// Code generated by mockery v2.50.0. DO NOT EDIT.

package websockets

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "gitlab.com/hmajid2301/banterbus/internal/service"

	uuid "github.com/google/uuid"
)

// MockPlayerServicer is an autogenerated mock type for the PlayerServicer type
type MockPlayerServicer struct {
	mock.Mock
}

type MockPlayerServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerServicer) EXPECT() *MockPlayerServicer_Expecter {
	return &MockPlayerServicer_Expecter{mock: &_m.Mock}
}

// GenerateNewAvatar provides a mock function with given fields: ctx, playerID
func (_m *MockPlayerServicer) GenerateNewAvatar(ctx context.Context, playerID uuid.UUID) (service.Lobby, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewAvatar")
	}

	var r0 service.Lobby
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (service.Lobby, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) service.Lobby); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(service.Lobby)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlayerServicer_GenerateNewAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateNewAvatar'
type MockPlayerServicer_GenerateNewAvatar_Call struct {
	*mock.Call
}

// GenerateNewAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockPlayerServicer_Expecter) GenerateNewAvatar(ctx interface{}, playerID interface{}) *MockPlayerServicer_GenerateNewAvatar_Call {
	return &MockPlayerServicer_GenerateNewAvatar_Call{Call: _e.mock.On("GenerateNewAvatar", ctx, playerID)}
}

func (_c *MockPlayerServicer_GenerateNewAvatar_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockPlayerServicer_GenerateNewAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPlayerServicer_GenerateNewAvatar_Call) Return(_a0 service.Lobby, _a1 error) *MockPlayerServicer_GenerateNewAvatar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlayerServicer_GenerateNewAvatar_Call) RunAndReturn(run func(context.Context, uuid.UUID) (service.Lobby, error)) *MockPlayerServicer_GenerateNewAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// TogglePlayerIsReady provides a mock function with given fields: ctx, playerID
func (_m *MockPlayerServicer) TogglePlayerIsReady(ctx context.Context, playerID uuid.UUID) (service.Lobby, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for TogglePlayerIsReady")
	}

	var r0 service.Lobby
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (service.Lobby, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) service.Lobby); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(service.Lobby)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlayerServicer_TogglePlayerIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TogglePlayerIsReady'
type MockPlayerServicer_TogglePlayerIsReady_Call struct {
	*mock.Call
}

// TogglePlayerIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockPlayerServicer_Expecter) TogglePlayerIsReady(ctx interface{}, playerID interface{}) *MockPlayerServicer_TogglePlayerIsReady_Call {
	return &MockPlayerServicer_TogglePlayerIsReady_Call{Call: _e.mock.On("TogglePlayerIsReady", ctx, playerID)}
}

func (_c *MockPlayerServicer_TogglePlayerIsReady_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockPlayerServicer_TogglePlayerIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPlayerServicer_TogglePlayerIsReady_Call) Return(_a0 service.Lobby, _a1 error) *MockPlayerServicer_TogglePlayerIsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlayerServicer_TogglePlayerIsReady_Call) RunAndReturn(run func(context.Context, uuid.UUID) (service.Lobby, error)) *MockPlayerServicer_TogglePlayerIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocale provides a mock function with given fields: ctx, playerID, locale
func (_m *MockPlayerServicer) UpdateLocale(ctx context.Context, playerID uuid.UUID, locale string) error {
	ret := _m.Called(ctx, playerID, locale)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocale")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, playerID, locale)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlayerServicer_UpdateLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocale'
type MockPlayerServicer_UpdateLocale_Call struct {
	*mock.Call
}

// UpdateLocale is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
//   - locale string
func (_e *MockPlayerServicer_Expecter) UpdateLocale(ctx interface{}, playerID interface{}, locale interface{}) *MockPlayerServicer_UpdateLocale_Call {
	return &MockPlayerServicer_UpdateLocale_Call{Call: _e.mock.On("UpdateLocale", ctx, playerID, locale)}
}

func (_c *MockPlayerServicer_UpdateLocale_Call) Run(run func(ctx context.Context, playerID uuid.UUID, locale string)) *MockPlayerServicer_UpdateLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockPlayerServicer_UpdateLocale_Call) Return(_a0 error) *MockPlayerServicer_UpdateLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlayerServicer_UpdateLocale_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *MockPlayerServicer_UpdateLocale_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNickname provides a mock function with given fields: ctx, nickname, playerID
func (_m *MockPlayerServicer) UpdateNickname(ctx context.Context, nickname string, playerID uuid.UUID) (service.Lobby, error) {
	ret := _m.Called(ctx, nickname, playerID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNickname")
	}

	var r0 service.Lobby
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (service.Lobby, error)); ok {
		return rf(ctx, nickname, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) service.Lobby); ok {
		r0 = rf(ctx, nickname, playerID)
	} else {
		r0 = ret.Get(0).(service.Lobby)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) error); ok {
		r1 = rf(ctx, nickname, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlayerServicer_UpdateNickname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNickname'
type MockPlayerServicer_UpdateNickname_Call struct {
	*mock.Call
}

// UpdateNickname is a helper method to define mock.On call
//   - ctx context.Context
//   - nickname string
//   - playerID uuid.UUID
func (_e *MockPlayerServicer_Expecter) UpdateNickname(ctx interface{}, nickname interface{}, playerID interface{}) *MockPlayerServicer_UpdateNickname_Call {
	return &MockPlayerServicer_UpdateNickname_Call{Call: _e.mock.On("UpdateNickname", ctx, nickname, playerID)}
}

func (_c *MockPlayerServicer_UpdateNickname_Call) Run(run func(ctx context.Context, nickname string, playerID uuid.UUID)) *MockPlayerServicer_UpdateNickname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockPlayerServicer_UpdateNickname_Call) Return(_a0 service.Lobby, _a1 error) *MockPlayerServicer_UpdateNickname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlayerServicer_UpdateNickname_Call) RunAndReturn(run func(context.Context, string, uuid.UUID) (service.Lobby, error)) *MockPlayerServicer_UpdateNickname_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlayerServicer creates a new instance of MockPlayerServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerServicer {
	mock := &MockPlayerServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
