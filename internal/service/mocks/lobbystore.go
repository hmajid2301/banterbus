// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/store/db"
)

// NewMockLobbyStore creates a new instance of MockLobbyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLobbyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLobbyStore {
	mock := &MockLobbyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLobbyStore is an autogenerated mock type for the LobbyStore type
type MockLobbyStore struct {
	mock.Mock
}

type MockLobbyStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLobbyStore) EXPECT() *MockLobbyStore_Expecter {
	return &MockLobbyStore_Expecter{mock: &_m.Mock}
}

// CreateRoom provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) CreateRoom(ctx context.Context, arg db.CreateRoomArgs) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateRoomArgs) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLobbyStore_CreateRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoom'
type MockLobbyStore_CreateRoom_Call struct {
	*mock.Call
}

// CreateRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateRoomArgs
func (_e *MockLobbyStore_Expecter) CreateRoom(ctx interface{}, arg interface{}) *MockLobbyStore_CreateRoom_Call {
	return &MockLobbyStore_CreateRoom_Call{Call: _e.mock.On("CreateRoom", ctx, arg)}
}

func (_c *MockLobbyStore_CreateRoom_Call) Run(run func(ctx context.Context, arg db.CreateRoomArgs)) *MockLobbyStore_CreateRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateRoomArgs
		if args[1] != nil {
			arg1 = args[1].(db.CreateRoomArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_CreateRoom_Call) Return(err error) *MockLobbyStore_CreateRoom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLobbyStore_CreateRoom_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateRoomArgs) error) *MockLobbyStore_CreateRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersInRoom provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) GetAllPlayersInRoom(ctx context.Context, playerID uuid.UUID) ([]db.GetAllPlayersInRoomRow, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersInRoom")
	}

	var r0 []db.GetAllPlayersInRoomRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllPlayersInRoomRow); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayersInRoomRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_GetAllPlayersInRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersInRoom'
type MockLobbyStore_GetAllPlayersInRoom_Call struct {
	*mock.Call
}

// GetAllPlayersInRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockLobbyStore_Expecter) GetAllPlayersInRoom(ctx interface{}, playerID interface{}) *MockLobbyStore_GetAllPlayersInRoom_Call {
	return &MockLobbyStore_GetAllPlayersInRoom_Call{Call: _e.mock.On("GetAllPlayersInRoom", ctx, playerID)}
}

func (_c *MockLobbyStore_GetAllPlayersInRoom_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockLobbyStore_GetAllPlayersInRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_GetAllPlayersInRoom_Call) Return(getAllPlayersInRoomRows []db.GetAllPlayersInRoomRow, err error) *MockLobbyStore_GetAllPlayersInRoom_Call {
	_c.Call.Return(getAllPlayersInRoomRows, err)
	return _c
}

func (_c *MockLobbyStore_GetAllPlayersInRoom_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)) *MockLobbyStore_GetAllPlayersInRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomQuestionByRound provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) GetRandomQuestionByRound(ctx context.Context, arg db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomQuestionByRound")
	}

	var r0 []db.GetRandomQuestionByRoundRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionByRoundParams) []db.GetRandomQuestionByRoundRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetRandomQuestionByRoundRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetRandomQuestionByRoundParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_GetRandomQuestionByRound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomQuestionByRound'
type MockLobbyStore_GetRandomQuestionByRound_Call struct {
	*mock.Call
}

// GetRandomQuestionByRound is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetRandomQuestionByRoundParams
func (_e *MockLobbyStore_Expecter) GetRandomQuestionByRound(ctx interface{}, arg interface{}) *MockLobbyStore_GetRandomQuestionByRound_Call {
	return &MockLobbyStore_GetRandomQuestionByRound_Call{Call: _e.mock.On("GetRandomQuestionByRound", ctx, arg)}
}

func (_c *MockLobbyStore_GetRandomQuestionByRound_Call) Run(run func(ctx context.Context, arg db.GetRandomQuestionByRoundParams)) *MockLobbyStore_GetRandomQuestionByRound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetRandomQuestionByRoundParams
		if args[1] != nil {
			arg1 = args[1].(db.GetRandomQuestionByRoundParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_GetRandomQuestionByRound_Call) Return(getRandomQuestionByRoundRows []db.GetRandomQuestionByRoundRow, err error) *MockLobbyStore_GetRandomQuestionByRound_Call {
	_c.Call.Return(getRandomQuestionByRoundRows, err)
	return _c
}

func (_c *MockLobbyStore_GetRandomQuestionByRound_Call) RunAndReturn(run func(ctx context.Context, arg db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error)) *MockLobbyStore_GetRandomQuestionByRound_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomQuestionInGroup provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) GetRandomQuestionInGroup(ctx context.Context, arg db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomQuestionInGroup")
	}

	var r0 []db.GetRandomQuestionInGroupRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionInGroupParams) []db.GetRandomQuestionInGroupRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetRandomQuestionInGroupRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetRandomQuestionInGroupParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_GetRandomQuestionInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomQuestionInGroup'
type MockLobbyStore_GetRandomQuestionInGroup_Call struct {
	*mock.Call
}

// GetRandomQuestionInGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetRandomQuestionInGroupParams
func (_e *MockLobbyStore_Expecter) GetRandomQuestionInGroup(ctx interface{}, arg interface{}) *MockLobbyStore_GetRandomQuestionInGroup_Call {
	return &MockLobbyStore_GetRandomQuestionInGroup_Call{Call: _e.mock.On("GetRandomQuestionInGroup", ctx, arg)}
}

func (_c *MockLobbyStore_GetRandomQuestionInGroup_Call) Run(run func(ctx context.Context, arg db.GetRandomQuestionInGroupParams)) *MockLobbyStore_GetRandomQuestionInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetRandomQuestionInGroupParams
		if args[1] != nil {
			arg1 = args[1].(db.GetRandomQuestionInGroupParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_GetRandomQuestionInGroup_Call) Return(getRandomQuestionInGroupRows []db.GetRandomQuestionInGroupRow, err error) *MockLobbyStore_GetRandomQuestionInGroup_Call {
	_c.Call.Return(getRandomQuestionInGroupRows, err)
	return _c
}

func (_c *MockLobbyStore_GetRandomQuestionInGroup_Call) RunAndReturn(run func(ctx context.Context, arg db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error)) *MockLobbyStore_GetRandomQuestionInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomByCode provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) GetRoomByCode(ctx context.Context, roomCode string) (db.Room, error) {
	ret := _mock.Called(ctx, roomCode)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomByCode")
	}

	var r0 db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.Room, error)); ok {
		return returnFunc(ctx, roomCode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.Room); ok {
		r0 = returnFunc(ctx, roomCode)
	} else {
		r0 = ret.Get(0).(db.Room)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, roomCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_GetRoomByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomByCode'
type MockLobbyStore_GetRoomByCode_Call struct {
	*mock.Call
}

// GetRoomByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
func (_e *MockLobbyStore_Expecter) GetRoomByCode(ctx interface{}, roomCode interface{}) *MockLobbyStore_GetRoomByCode_Call {
	return &MockLobbyStore_GetRoomByCode_Call{Call: _e.mock.On("GetRoomByCode", ctx, roomCode)}
}

func (_c *MockLobbyStore_GetRoomByCode_Call) Run(run func(ctx context.Context, roomCode string)) *MockLobbyStore_GetRoomByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_GetRoomByCode_Call) Return(room db.Room, err error) *MockLobbyStore_GetRoomByCode_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockLobbyStore_GetRoomByCode_Call) RunAndReturn(run func(ctx context.Context, roomCode string) (db.Room, error)) *MockLobbyStore_GetRoomByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomByPlayerID provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) GetRoomByPlayerID(ctx context.Context, playerID uuid.UUID) (db.Room, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomByPlayerID")
	}

	var r0 db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Room, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Room); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.Room)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_GetRoomByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomByPlayerID'
type MockLobbyStore_GetRoomByPlayerID_Call struct {
	*mock.Call
}

// GetRoomByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockLobbyStore_Expecter) GetRoomByPlayerID(ctx interface{}, playerID interface{}) *MockLobbyStore_GetRoomByPlayerID_Call {
	return &MockLobbyStore_GetRoomByPlayerID_Call{Call: _e.mock.On("GetRoomByPlayerID", ctx, playerID)}
}

func (_c *MockLobbyStore_GetRoomByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockLobbyStore_GetRoomByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_GetRoomByPlayerID_Call) Return(room db.Room, err error) *MockLobbyStore_GetRoomByPlayerID_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockLobbyStore_GetRoomByPlayerID_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.Room, error)) *MockLobbyStore_GetRoomByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// JoinRoom provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) JoinRoom(ctx context.Context, arg db.JoinRoomArgs) (db.JoinRoomResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for JoinRoom")
	}

	var r0 db.JoinRoomResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.JoinRoomArgs) (db.JoinRoomResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.JoinRoomArgs) db.JoinRoomResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.JoinRoomResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.JoinRoomArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_JoinRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinRoom'
type MockLobbyStore_JoinRoom_Call struct {
	*mock.Call
}

// JoinRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.JoinRoomArgs
func (_e *MockLobbyStore_Expecter) JoinRoom(ctx interface{}, arg interface{}) *MockLobbyStore_JoinRoom_Call {
	return &MockLobbyStore_JoinRoom_Call{Call: _e.mock.On("JoinRoom", ctx, arg)}
}

func (_c *MockLobbyStore_JoinRoom_Call) Run(run func(ctx context.Context, arg db.JoinRoomArgs)) *MockLobbyStore_JoinRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.JoinRoomArgs
		if args[1] != nil {
			arg1 = args[1].(db.JoinRoomArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_JoinRoom_Call) Return(joinRoomResult db.JoinRoomResult, err error) *MockLobbyStore_JoinRoom_Call {
	_c.Call.Return(joinRoomResult, err)
	return _c
}

func (_c *MockLobbyStore_JoinRoom_Call) RunAndReturn(run func(ctx context.Context, arg db.JoinRoomArgs) (db.JoinRoomResult, error)) *MockLobbyStore_JoinRoom_Call {
	_c.Call.Return(run)
	return _c
}

// ReassignHostPlayer provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) ReassignHostPlayer(ctx context.Context, arg db.ReassignHostPlayerParams) (db.Room, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ReassignHostPlayer")
	}

	var r0 db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.ReassignHostPlayerParams) (db.Room, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.ReassignHostPlayerParams) db.Room); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Room)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.ReassignHostPlayerParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_ReassignHostPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReassignHostPlayer'
type MockLobbyStore_ReassignHostPlayer_Call struct {
	*mock.Call
}

// ReassignHostPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ReassignHostPlayerParams
func (_e *MockLobbyStore_Expecter) ReassignHostPlayer(ctx interface{}, arg interface{}) *MockLobbyStore_ReassignHostPlayer_Call {
	return &MockLobbyStore_ReassignHostPlayer_Call{Call: _e.mock.On("ReassignHostPlayer", ctx, arg)}
}

func (_c *MockLobbyStore_ReassignHostPlayer_Call) Run(run func(ctx context.Context, arg db.ReassignHostPlayerParams)) *MockLobbyStore_ReassignHostPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.ReassignHostPlayerParams
		if args[1] != nil {
			arg1 = args[1].(db.ReassignHostPlayerParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_ReassignHostPlayer_Call) Return(room db.Room, err error) *MockLobbyStore_ReassignHostPlayer_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockLobbyStore_ReassignHostPlayer_Call) RunAndReturn(run func(ctx context.Context, arg db.ReassignHostPlayerParams) (db.Room, error)) *MockLobbyStore_ReassignHostPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePlayerFromRoom provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) RemovePlayerFromRoom(ctx context.Context, playerID uuid.UUID) (db.RoomsPlayer, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePlayerFromRoom")
	}

	var r0 db.RoomsPlayer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.RoomsPlayer, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.RoomsPlayer); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.RoomsPlayer)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyStore_RemovePlayerFromRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePlayerFromRoom'
type MockLobbyStore_RemovePlayerFromRoom_Call struct {
	*mock.Call
}

// RemovePlayerFromRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockLobbyStore_Expecter) RemovePlayerFromRoom(ctx interface{}, playerID interface{}) *MockLobbyStore_RemovePlayerFromRoom_Call {
	return &MockLobbyStore_RemovePlayerFromRoom_Call{Call: _e.mock.On("RemovePlayerFromRoom", ctx, playerID)}
}

func (_c *MockLobbyStore_RemovePlayerFromRoom_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockLobbyStore_RemovePlayerFromRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_RemovePlayerFromRoom_Call) Return(roomsPlayer db.RoomsPlayer, err error) *MockLobbyStore_RemovePlayerFromRoom_Call {
	_c.Call.Return(roomsPlayer, err)
	return _c
}

func (_c *MockLobbyStore_RemovePlayerFromRoom_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.RoomsPlayer, error)) *MockLobbyStore_RemovePlayerFromRoom_Call {
	_c.Call.Return(run)
	return _c
}

// StartGame provides a mock function for the type MockLobbyStore
func (_mock *MockLobbyStore) StartGame(ctx context.Context, arg db.StartGameArgs) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for StartGame")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.StartGameArgs) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLobbyStore_StartGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartGame'
type MockLobbyStore_StartGame_Call struct {
	*mock.Call
}

// StartGame is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.StartGameArgs
func (_e *MockLobbyStore_Expecter) StartGame(ctx interface{}, arg interface{}) *MockLobbyStore_StartGame_Call {
	return &MockLobbyStore_StartGame_Call{Call: _e.mock.On("StartGame", ctx, arg)}
}

func (_c *MockLobbyStore_StartGame_Call) Run(run func(ctx context.Context, arg db.StartGameArgs)) *MockLobbyStore_StartGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.StartGameArgs
		if args[1] != nil {
			arg1 = args[1].(db.StartGameArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyStore_StartGame_Call) Return(err error) *MockLobbyStore_StartGame_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLobbyStore_StartGame_Call) RunAndReturn(run func(ctx context.Context, arg db.StartGameArgs) error) *MockLobbyStore_StartGame_Call {
	_c.Call.Return(run)
	return _c
}
