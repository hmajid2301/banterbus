// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/store/db"
)

// NewMockPlayerStore creates a new instance of MockPlayerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerStore {
	mock := &MockPlayerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPlayerStore is an autogenerated mock type for the PlayerStore type
type MockPlayerStore struct {
	mock.Mock
}

type MockPlayerStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerStore) EXPECT() *MockPlayerStore_Expecter {
	return &MockPlayerStore_Expecter{mock: &_m.Mock}
}

// GenerateNewAvatarWithPlayers provides a mock function for the type MockPlayerStore
func (_mock *MockPlayerStore) GenerateNewAvatarWithPlayers(ctx context.Context, arg db.GenerateNewAvatarArgs) (db.GenerateNewAvatarResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewAvatarWithPlayers")
	}

	var r0 db.GenerateNewAvatarResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GenerateNewAvatarArgs) (db.GenerateNewAvatarResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GenerateNewAvatarArgs) db.GenerateNewAvatarResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.GenerateNewAvatarResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GenerateNewAvatarArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerStore_GenerateNewAvatarWithPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateNewAvatarWithPlayers'
type MockPlayerStore_GenerateNewAvatarWithPlayers_Call struct {
	*mock.Call
}

// GenerateNewAvatarWithPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GenerateNewAvatarArgs
func (_e *MockPlayerStore_Expecter) GenerateNewAvatarWithPlayers(ctx interface{}, arg interface{}) *MockPlayerStore_GenerateNewAvatarWithPlayers_Call {
	return &MockPlayerStore_GenerateNewAvatarWithPlayers_Call{Call: _e.mock.On("GenerateNewAvatarWithPlayers", ctx, arg)}
}

func (_c *MockPlayerStore_GenerateNewAvatarWithPlayers_Call) Run(run func(ctx context.Context, arg db.GenerateNewAvatarArgs)) *MockPlayerStore_GenerateNewAvatarWithPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GenerateNewAvatarArgs
		if args[1] != nil {
			arg1 = args[1].(db.GenerateNewAvatarArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPlayerStore_GenerateNewAvatarWithPlayers_Call) Return(generateNewAvatarResult db.GenerateNewAvatarResult, err error) *MockPlayerStore_GenerateNewAvatarWithPlayers_Call {
	_c.Call.Return(generateNewAvatarResult, err)
	return _c
}

func (_c *MockPlayerStore_GenerateNewAvatarWithPlayers_Call) RunAndReturn(run func(ctx context.Context, arg db.GenerateNewAvatarArgs) (db.GenerateNewAvatarResult, error)) *MockPlayerStore_GenerateNewAvatarWithPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayerByID provides a mock function for the type MockPlayerStore
func (_mock *MockPlayerStore) GetPlayerByID(ctx context.Context, id uuid.UUID) (db.Player, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayerByID")
	}

	var r0 db.Player
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Player, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Player); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Player)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerStore_GetPlayerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayerByID'
type MockPlayerStore_GetPlayerByID_Call struct {
	*mock.Call
}

// GetPlayerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockPlayerStore_Expecter) GetPlayerByID(ctx interface{}, id interface{}) *MockPlayerStore_GetPlayerByID_Call {
	return &MockPlayerStore_GetPlayerByID_Call{Call: _e.mock.On("GetPlayerByID", ctx, id)}
}

func (_c *MockPlayerStore_GetPlayerByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockPlayerStore_GetPlayerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPlayerStore_GetPlayerByID_Call) Return(player db.Player, err error) *MockPlayerStore_GetPlayerByID_Call {
	_c.Call.Return(player, err)
	return _c
}

func (_c *MockPlayerStore_GetPlayerByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.Player, error)) *MockPlayerStore_GetPlayerByID_Call {
	_c.Call.Return(run)
	return _c
}

// TogglePlayerReadyWithPlayers provides a mock function for the type MockPlayerStore
func (_mock *MockPlayerStore) TogglePlayerReadyWithPlayers(ctx context.Context, arg db.TogglePlayerIsReadyArgs) (db.TogglePlayerIsReadyResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for TogglePlayerReadyWithPlayers")
	}

	var r0 db.TogglePlayerIsReadyResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.TogglePlayerIsReadyArgs) (db.TogglePlayerIsReadyResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.TogglePlayerIsReadyArgs) db.TogglePlayerIsReadyResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.TogglePlayerIsReadyResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.TogglePlayerIsReadyArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerStore_TogglePlayerReadyWithPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TogglePlayerReadyWithPlayers'
type MockPlayerStore_TogglePlayerReadyWithPlayers_Call struct {
	*mock.Call
}

// TogglePlayerReadyWithPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.TogglePlayerIsReadyArgs
func (_e *MockPlayerStore_Expecter) TogglePlayerReadyWithPlayers(ctx interface{}, arg interface{}) *MockPlayerStore_TogglePlayerReadyWithPlayers_Call {
	return &MockPlayerStore_TogglePlayerReadyWithPlayers_Call{Call: _e.mock.On("TogglePlayerReadyWithPlayers", ctx, arg)}
}

func (_c *MockPlayerStore_TogglePlayerReadyWithPlayers_Call) Run(run func(ctx context.Context, arg db.TogglePlayerIsReadyArgs)) *MockPlayerStore_TogglePlayerReadyWithPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.TogglePlayerIsReadyArgs
		if args[1] != nil {
			arg1 = args[1].(db.TogglePlayerIsReadyArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPlayerStore_TogglePlayerReadyWithPlayers_Call) Return(togglePlayerIsReadyResult db.TogglePlayerIsReadyResult, err error) *MockPlayerStore_TogglePlayerReadyWithPlayers_Call {
	_c.Call.Return(togglePlayerIsReadyResult, err)
	return _c
}

func (_c *MockPlayerStore_TogglePlayerReadyWithPlayers_Call) RunAndReturn(run func(ctx context.Context, arg db.TogglePlayerIsReadyArgs) (db.TogglePlayerIsReadyResult, error)) *MockPlayerStore_TogglePlayerReadyWithPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocale provides a mock function for the type MockPlayerStore
func (_mock *MockPlayerStore) UpdateLocale(ctx context.Context, arg db.UpdateLocaleParams) (db.Player, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocale")
	}

	var r0 db.Player
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateLocaleParams) (db.Player, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateLocaleParams) db.Player); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Player)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateLocaleParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerStore_UpdateLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocale'
type MockPlayerStore_UpdateLocale_Call struct {
	*mock.Call
}

// UpdateLocale is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateLocaleParams
func (_e *MockPlayerStore_Expecter) UpdateLocale(ctx interface{}, arg interface{}) *MockPlayerStore_UpdateLocale_Call {
	return &MockPlayerStore_UpdateLocale_Call{Call: _e.mock.On("UpdateLocale", ctx, arg)}
}

func (_c *MockPlayerStore_UpdateLocale_Call) Run(run func(ctx context.Context, arg db.UpdateLocaleParams)) *MockPlayerStore_UpdateLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateLocaleParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateLocaleParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPlayerStore_UpdateLocale_Call) Return(player db.Player, err error) *MockPlayerStore_UpdateLocale_Call {
	_c.Call.Return(player, err)
	return _c
}

func (_c *MockPlayerStore_UpdateLocale_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateLocaleParams) (db.Player, error)) *MockPlayerStore_UpdateLocale_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNicknameWithPlayers provides a mock function for the type MockPlayerStore
func (_mock *MockPlayerStore) UpdateNicknameWithPlayers(ctx context.Context, arg db.UpdateNicknameArgs) (db.UpdateNicknameResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNicknameWithPlayers")
	}

	var r0 db.UpdateNicknameResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateNicknameArgs) (db.UpdateNicknameResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateNicknameArgs) db.UpdateNicknameResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.UpdateNicknameResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateNicknameArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPlayerStore_UpdateNicknameWithPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNicknameWithPlayers'
type MockPlayerStore_UpdateNicknameWithPlayers_Call struct {
	*mock.Call
}

// UpdateNicknameWithPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateNicknameArgs
func (_e *MockPlayerStore_Expecter) UpdateNicknameWithPlayers(ctx interface{}, arg interface{}) *MockPlayerStore_UpdateNicknameWithPlayers_Call {
	return &MockPlayerStore_UpdateNicknameWithPlayers_Call{Call: _e.mock.On("UpdateNicknameWithPlayers", ctx, arg)}
}

func (_c *MockPlayerStore_UpdateNicknameWithPlayers_Call) Run(run func(ctx context.Context, arg db.UpdateNicknameArgs)) *MockPlayerStore_UpdateNicknameWithPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateNicknameArgs
		if args[1] != nil {
			arg1 = args[1].(db.UpdateNicknameArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPlayerStore_UpdateNicknameWithPlayers_Call) Return(updateNicknameResult db.UpdateNicknameResult, err error) *MockPlayerStore_UpdateNicknameWithPlayers_Call {
	_c.Call.Return(updateNicknameResult, err)
	return _c
}

func (_c *MockPlayerStore_UpdateNicknameWithPlayers_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateNicknameArgs) (db.UpdateNicknameResult, error)) *MockPlayerStore_UpdateNicknameWithPlayers_Call {
	_c.Call.Return(run)
	return _c
}
