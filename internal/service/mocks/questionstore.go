// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/store/db"
)

// NewMockQuestionStore creates a new instance of MockQuestionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuestionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuestionStore {
	mock := &MockQuestionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuestionStore is an autogenerated mock type for the QuestionStore type
type MockQuestionStore struct {
	mock.Mock
}

type MockQuestionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuestionStore) EXPECT() *MockQuestionStore_Expecter {
	return &MockQuestionStore_Expecter{mock: &_m.Mock}
}

// AddGroup provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) AddGroup(ctx context.Context, arg db.AddGroupParams) (db.QuestionsGroup, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddGroup")
	}

	var r0 db.QuestionsGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddGroupParams) (db.QuestionsGroup, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddGroupParams) db.QuestionsGroup); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.QuestionsGroup)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.AddGroupParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_AddGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroup'
type MockQuestionStore_AddGroup_Call struct {
	*mock.Call
}

// AddGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddGroupParams
func (_e *MockQuestionStore_Expecter) AddGroup(ctx interface{}, arg interface{}) *MockQuestionStore_AddGroup_Call {
	return &MockQuestionStore_AddGroup_Call{Call: _e.mock.On("AddGroup", ctx, arg)}
}

func (_c *MockQuestionStore_AddGroup_Call) Run(run func(ctx context.Context, arg db.AddGroupParams)) *MockQuestionStore_AddGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.AddGroupParams
		if args[1] != nil {
			arg1 = args[1].(db.AddGroupParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_AddGroup_Call) Return(questionsGroup db.QuestionsGroup, err error) *MockQuestionStore_AddGroup_Call {
	_c.Call.Return(questionsGroup, err)
	return _c
}

func (_c *MockQuestionStore_AddGroup_Call) RunAndReturn(run func(ctx context.Context, arg db.AddGroupParams) (db.QuestionsGroup, error)) *MockQuestionStore_AddGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddQuestionTranslation provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) AddQuestionTranslation(ctx context.Context, arg db.AddQuestionTranslationParams) (db.QuestionsI18n, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddQuestionTranslation")
	}

	var r0 db.QuestionsI18n
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddQuestionTranslationParams) (db.QuestionsI18n, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddQuestionTranslationParams) db.QuestionsI18n); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.QuestionsI18n)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.AddQuestionTranslationParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_AddQuestionTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddQuestionTranslation'
type MockQuestionStore_AddQuestionTranslation_Call struct {
	*mock.Call
}

// AddQuestionTranslation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddQuestionTranslationParams
func (_e *MockQuestionStore_Expecter) AddQuestionTranslation(ctx interface{}, arg interface{}) *MockQuestionStore_AddQuestionTranslation_Call {
	return &MockQuestionStore_AddQuestionTranslation_Call{Call: _e.mock.On("AddQuestionTranslation", ctx, arg)}
}

func (_c *MockQuestionStore_AddQuestionTranslation_Call) Run(run func(ctx context.Context, arg db.AddQuestionTranslationParams)) *MockQuestionStore_AddQuestionTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.AddQuestionTranslationParams
		if args[1] != nil {
			arg1 = args[1].(db.AddQuestionTranslationParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_AddQuestionTranslation_Call) Return(questionsI18n db.QuestionsI18n, err error) *MockQuestionStore_AddQuestionTranslation_Call {
	_c.Call.Return(questionsI18n, err)
	return _c
}

func (_c *MockQuestionStore_AddQuestionTranslation_Call) RunAndReturn(run func(ctx context.Context, arg db.AddQuestionTranslationParams) (db.QuestionsI18n, error)) *MockQuestionStore_AddQuestionTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuestionWithTranslation provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) CreateQuestionWithTranslation(ctx context.Context, arg db.CreateQuestionArgs) (uuid.UUID, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuestionWithTranslation")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateQuestionArgs) (uuid.UUID, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateQuestionArgs) uuid.UUID); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateQuestionArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_CreateQuestionWithTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestionWithTranslation'
type MockQuestionStore_CreateQuestionWithTranslation_Call struct {
	*mock.Call
}

// CreateQuestionWithTranslation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateQuestionArgs
func (_e *MockQuestionStore_Expecter) CreateQuestionWithTranslation(ctx interface{}, arg interface{}) *MockQuestionStore_CreateQuestionWithTranslation_Call {
	return &MockQuestionStore_CreateQuestionWithTranslation_Call{Call: _e.mock.On("CreateQuestionWithTranslation", ctx, arg)}
}

func (_c *MockQuestionStore_CreateQuestionWithTranslation_Call) Run(run func(ctx context.Context, arg db.CreateQuestionArgs)) *MockQuestionStore_CreateQuestionWithTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateQuestionArgs
		if args[1] != nil {
			arg1 = args[1].(db.CreateQuestionArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_CreateQuestionWithTranslation_Call) Return(uUID uuid.UUID, err error) *MockQuestionStore_CreateQuestionWithTranslation_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockQuestionStore_CreateQuestionWithTranslation_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateQuestionArgs) (uuid.UUID, error)) *MockQuestionStore_CreateQuestionWithTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// DisableQuestion provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) DisableQuestion(ctx context.Context, id uuid.UUID) (db.Question, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DisableQuestion")
	}

	var r0 db.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Question, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Question); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Question)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_DisableQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableQuestion'
type MockQuestionStore_DisableQuestion_Call struct {
	*mock.Call
}

// DisableQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuestionStore_Expecter) DisableQuestion(ctx interface{}, id interface{}) *MockQuestionStore_DisableQuestion_Call {
	return &MockQuestionStore_DisableQuestion_Call{Call: _e.mock.On("DisableQuestion", ctx, id)}
}

func (_c *MockQuestionStore_DisableQuestion_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuestionStore_DisableQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_DisableQuestion_Call) Return(question db.Question, err error) *MockQuestionStore_DisableQuestion_Call {
	_c.Call.Return(question, err)
	return _c
}

func (_c *MockQuestionStore_DisableQuestion_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.Question, error)) *MockQuestionStore_DisableQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// EnableQuestion provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) EnableQuestion(ctx context.Context, id uuid.UUID) (db.Question, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for EnableQuestion")
	}

	var r0 db.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Question, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Question); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Question)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_EnableQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableQuestion'
type MockQuestionStore_EnableQuestion_Call struct {
	*mock.Call
}

// EnableQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuestionStore_Expecter) EnableQuestion(ctx interface{}, id interface{}) *MockQuestionStore_EnableQuestion_Call {
	return &MockQuestionStore_EnableQuestion_Call{Call: _e.mock.On("EnableQuestion", ctx, id)}
}

func (_c *MockQuestionStore_EnableQuestion_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuestionStore_EnableQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_EnableQuestion_Call) Return(question db.Question, err error) *MockQuestionStore_EnableQuestion_Call {
	_c.Call.Return(question, err)
	return _c
}

func (_c *MockQuestionStore_EnableQuestion_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.Question, error)) *MockQuestionStore_EnableQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) GetGroups(ctx context.Context) ([]db.QuestionsGroup, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []db.QuestionsGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.QuestionsGroup, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.QuestionsGroup); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.QuestionsGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockQuestionStore_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuestionStore_Expecter) GetGroups(ctx interface{}) *MockQuestionStore_GetGroups_Call {
	return &MockQuestionStore_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx)}
}

func (_c *MockQuestionStore_GetGroups_Call) Run(run func(ctx context.Context)) *MockQuestionStore_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuestionStore_GetGroups_Call) Return(questionsGroups []db.QuestionsGroup, err error) *MockQuestionStore_GetGroups_Call {
	_c.Call.Return(questionsGroups, err)
	return _c
}

func (_c *MockQuestionStore_GetGroups_Call) RunAndReturn(run func(ctx context.Context) ([]db.QuestionsGroup, error)) *MockQuestionStore_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestions provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) GetQuestions(ctx context.Context, arg db.GetQuestionsParams) ([]db.GetQuestionsRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestions")
	}

	var r0 []db.GetQuestionsRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetQuestionsParams) ([]db.GetQuestionsRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetQuestionsParams) []db.GetQuestionsRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetQuestionsRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetQuestionsParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_GetQuestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestions'
type MockQuestionStore_GetQuestions_Call struct {
	*mock.Call
}

// GetQuestions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetQuestionsParams
func (_e *MockQuestionStore_Expecter) GetQuestions(ctx interface{}, arg interface{}) *MockQuestionStore_GetQuestions_Call {
	return &MockQuestionStore_GetQuestions_Call{Call: _e.mock.On("GetQuestions", ctx, arg)}
}

func (_c *MockQuestionStore_GetQuestions_Call) Run(run func(ctx context.Context, arg db.GetQuestionsParams)) *MockQuestionStore_GetQuestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetQuestionsParams
		if args[1] != nil {
			arg1 = args[1].(db.GetQuestionsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_GetQuestions_Call) Return(getQuestionsRows []db.GetQuestionsRow, err error) *MockQuestionStore_GetQuestions_Call {
	_c.Call.Return(getQuestionsRows, err)
	return _c
}

func (_c *MockQuestionStore_GetQuestions_Call) RunAndReturn(run func(ctx context.Context, arg db.GetQuestionsParams) ([]db.GetQuestionsRow, error)) *MockQuestionStore_GetQuestions_Call {
	_c.Call.Return(run)
	return _c
}
