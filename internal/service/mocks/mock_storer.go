// Code generated by mockery v2.46.0. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	entities "gitlab.com/hmajid2301/banterbus/internal/entities"

	sqlc "gitlab.com/hmajid2301/banterbus/internal/store/db"

	store "gitlab.com/hmajid2301/banterbus/internal/store"

	time "time"
)

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

type MockStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorer) EXPECT() *MockStorer_Expecter {
	return &MockStorer_Expecter{mock: &_m.Mock}
}

// AddPlayerToRoom provides a mock function with given fields: ctx, player, roomCode
func (_m *MockStorer) AddPlayerToRoom(ctx context.Context, player entities.NewPlayer, roomCode string) ([]sqlc.GetAllPlayersInRoomRow, error) {
	ret := _m.Called(ctx, player, roomCode)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayerToRoom")
	}

	var r0 []sqlc.GetAllPlayersInRoomRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.NewPlayer, string) ([]sqlc.GetAllPlayersInRoomRow, error)); ok {
		return rf(ctx, player, roomCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.NewPlayer, string) []sqlc.GetAllPlayersInRoomRow); ok {
		r0 = rf(ctx, player, roomCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetAllPlayersInRoomRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.NewPlayer, string) error); ok {
		r1 = rf(ctx, player, roomCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddPlayerToRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlayerToRoom'
type MockStorer_AddPlayerToRoom_Call struct {
	*mock.Call
}

// AddPlayerToRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - player entities.NewPlayer
//   - roomCode string
func (_e *MockStorer_Expecter) AddPlayerToRoom(ctx interface{}, player interface{}, roomCode interface{}) *MockStorer_AddPlayerToRoom_Call {
	return &MockStorer_AddPlayerToRoom_Call{Call: _e.mock.On("AddPlayerToRoom", ctx, player, roomCode)}
}

func (_c *MockStorer_AddPlayerToRoom_Call) Run(run func(ctx context.Context, player entities.NewPlayer, roomCode string)) *MockStorer_AddPlayerToRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.NewPlayer), args[2].(string))
	})
	return _c
}

func (_c *MockStorer_AddPlayerToRoom_Call) Return(players []sqlc.GetAllPlayersInRoomRow, err error) *MockStorer_AddPlayerToRoom_Call {
	_c.Call.Return(players, err)
	return _c
}

func (_c *MockStorer_AddPlayerToRoom_Call) RunAndReturn(run func(context.Context, entities.NewPlayer, string) ([]sqlc.GetAllPlayersInRoomRow, error)) *MockStorer_AddPlayerToRoom_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoom provides a mock function with given fields: ctx, player, room
func (_m *MockStorer) CreateRoom(ctx context.Context, player entities.NewPlayer, room entities.NewRoom) (string, error) {
	ret := _m.Called(ctx, player, room)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.NewPlayer, entities.NewRoom) (string, error)); ok {
		return rf(ctx, player, room)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.NewPlayer, entities.NewRoom) string); ok {
		r0 = rf(ctx, player, room)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.NewPlayer, entities.NewRoom) error); ok {
		r1 = rf(ctx, player, room)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_CreateRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoom'
type MockStorer_CreateRoom_Call struct {
	*mock.Call
}

// CreateRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - player entities.NewPlayer
//   - room entities.NewRoom
func (_e *MockStorer_Expecter) CreateRoom(ctx interface{}, player interface{}, room interface{}) *MockStorer_CreateRoom_Call {
	return &MockStorer_CreateRoom_Call{Call: _e.mock.On("CreateRoom", ctx, player, room)}
}

func (_c *MockStorer_CreateRoom_Call) Run(run func(ctx context.Context, player entities.NewPlayer, room entities.NewRoom)) *MockStorer_CreateRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.NewPlayer), args[2].(entities.NewRoom))
	})
	return _c
}

func (_c *MockStorer_CreateRoom_Call) Return(roomCode string, err error) *MockStorer_CreateRoom_Call {
	_c.Call.Return(roomCode, err)
	return _c
}

func (_c *MockStorer_CreateRoom_Call) RunAndReturn(run func(context.Context, entities.NewPlayer, entities.NewRoom) (string, error)) *MockStorer_CreateRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameStateByPlayerID provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetGameStateByPlayerID(ctx context.Context, playerID string) (entities.GameState, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetGameStateByPlayerID")
	}

	var r0 entities.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.GameState, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.GameState); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(entities.GameState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetGameStateByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameStateByPlayerID'
type MockStorer_GetGameStateByPlayerID_Call struct {
	*mock.Call
}

// GetGameStateByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID string
func (_e *MockStorer_Expecter) GetGameStateByPlayerID(ctx interface{}, playerID interface{}) *MockStorer_GetGameStateByPlayerID_Call {
	return &MockStorer_GetGameStateByPlayerID_Call{Call: _e.mock.On("GetGameStateByPlayerID", ctx, playerID)}
}

func (_c *MockStorer_GetGameStateByPlayerID_Call) Run(run func(ctx context.Context, playerID string)) *MockStorer_GetGameStateByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorer_GetGameStateByPlayerID_Call) Return(gameState entities.GameState, err error) *MockStorer_GetGameStateByPlayerID_Call {
	_c.Call.Return(gameState, err)
	return _c
}

func (_c *MockStorer_GetGameStateByPlayerID_Call) RunAndReturn(run func(context.Context, string) (entities.GameState, error)) *MockStorer_GetGameStateByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLobbyByPlayerID provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetLobbyByPlayerID(ctx context.Context, playerID string) ([]sqlc.GetAllPlayersInRoomRow, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLobbyByPlayerID")
	}

	var r0 []sqlc.GetAllPlayersInRoomRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]sqlc.GetAllPlayersInRoomRow, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []sqlc.GetAllPlayersInRoomRow); ok {
		r0 = rf(ctx, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetAllPlayersInRoomRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetLobbyByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLobbyByPlayerID'
type MockStorer_GetLobbyByPlayerID_Call struct {
	*mock.Call
}

// GetLobbyByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID string
func (_e *MockStorer_Expecter) GetLobbyByPlayerID(ctx interface{}, playerID interface{}) *MockStorer_GetLobbyByPlayerID_Call {
	return &MockStorer_GetLobbyByPlayerID_Call{Call: _e.mock.On("GetLobbyByPlayerID", ctx, playerID)}
}

func (_c *MockStorer_GetLobbyByPlayerID_Call) Run(run func(ctx context.Context, playerID string)) *MockStorer_GetLobbyByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorer_GetLobbyByPlayerID_Call) Return(players []sqlc.GetAllPlayersInRoomRow, err error) *MockStorer_GetLobbyByPlayerID_Call {
	_c.Call.Return(players, err)
	return _c
}

func (_c *MockStorer_GetLobbyByPlayerID_Call) RunAndReturn(run func(context.Context, string) ([]sqlc.GetAllPlayersInRoomRow, error)) *MockStorer_GetLobbyByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomState provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetRoomState(ctx context.Context, playerID string) (store.RoomState, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomState")
	}

	var r0 store.RoomState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (store.RoomState, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) store.RoomState); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(store.RoomState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetRoomState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomState'
type MockStorer_GetRoomState_Call struct {
	*mock.Call
}

// GetRoomState is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID string
func (_e *MockStorer_Expecter) GetRoomState(ctx interface{}, playerID interface{}) *MockStorer_GetRoomState_Call {
	return &MockStorer_GetRoomState_Call{Call: _e.mock.On("GetRoomState", ctx, playerID)}
}

func (_c *MockStorer_GetRoomState_Call) Run(run func(ctx context.Context, playerID string)) *MockStorer_GetRoomState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorer_GetRoomState_Call) Return(_a0 store.RoomState, _a1 error) *MockStorer_GetRoomState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetRoomState_Call) RunAndReturn(run func(context.Context, string) (store.RoomState, error)) *MockStorer_GetRoomState_Call {
	_c.Call.Return(run)
	return _c
}

// KickPlayer provides a mock function with given fields: ctx, roomCode, playerID, playerNicknameToKick
func (_m *MockStorer) KickPlayer(ctx context.Context, roomCode string, playerID string, playerNicknameToKick string) ([]sqlc.GetAllPlayersInRoomRow, string, error) {
	ret := _m.Called(ctx, roomCode, playerID, playerNicknameToKick)

	if len(ret) == 0 {
		panic("no return value specified for KickPlayer")
	}

	var r0 []sqlc.GetAllPlayersInRoomRow
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]sqlc.GetAllPlayersInRoomRow, string, error)); ok {
		return rf(ctx, roomCode, playerID, playerNicknameToKick)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []sqlc.GetAllPlayersInRoomRow); ok {
		r0 = rf(ctx, roomCode, playerID, playerNicknameToKick)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetAllPlayersInRoomRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = rf(ctx, roomCode, playerID, playerNicknameToKick)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, roomCode, playerID, playerNicknameToKick)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockStorer_KickPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KickPlayer'
type MockStorer_KickPlayer_Call struct {
	*mock.Call
}

// KickPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
//   - playerID string
//   - playerNicknameToKick string
func (_e *MockStorer_Expecter) KickPlayer(ctx interface{}, roomCode interface{}, playerID interface{}, playerNicknameToKick interface{}) *MockStorer_KickPlayer_Call {
	return &MockStorer_KickPlayer_Call{Call: _e.mock.On("KickPlayer", ctx, roomCode, playerID, playerNicknameToKick)}
}

func (_c *MockStorer_KickPlayer_Call) Run(run func(ctx context.Context, roomCode string, playerID string, playerNicknameToKick string)) *MockStorer_KickPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockStorer_KickPlayer_Call) Return(players []sqlc.GetAllPlayersInRoomRow, playerToKickID string, err error) *MockStorer_KickPlayer_Call {
	_c.Call.Return(players, playerToKickID, err)
	return _c
}

func (_c *MockStorer_KickPlayer_Call) RunAndReturn(run func(context.Context, string, string, string) ([]sqlc.GetAllPlayersInRoomRow, string, error)) *MockStorer_KickPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// StartGame provides a mock function with given fields: ctx, roomCode, playerID
func (_m *MockStorer) StartGame(ctx context.Context, roomCode string, playerID string) (entities.GameState, error) {
	ret := _m.Called(ctx, roomCode, playerID)

	if len(ret) == 0 {
		panic("no return value specified for StartGame")
	}

	var r0 entities.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.GameState, error)); ok {
		return rf(ctx, roomCode, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.GameState); ok {
		r0 = rf(ctx, roomCode, playerID)
	} else {
		r0 = ret.Get(0).(entities.GameState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, roomCode, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_StartGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartGame'
type MockStorer_StartGame_Call struct {
	*mock.Call
}

// StartGame is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
//   - playerID string
func (_e *MockStorer_Expecter) StartGame(ctx interface{}, roomCode interface{}, playerID interface{}) *MockStorer_StartGame_Call {
	return &MockStorer_StartGame_Call{Call: _e.mock.On("StartGame", ctx, roomCode, playerID)}
}

func (_c *MockStorer_StartGame_Call) Run(run func(ctx context.Context, roomCode string, playerID string)) *MockStorer_StartGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStorer_StartGame_Call) Return(gameState entities.GameState, err error) *MockStorer_StartGame_Call {
	_c.Call.Return(gameState, err)
	return _c
}

func (_c *MockStorer_StartGame_Call) RunAndReturn(run func(context.Context, string, string) (entities.GameState, error)) *MockStorer_StartGame_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitAnswer provides a mock function with given fields: ctx, playerID, answer, submittedAt
func (_m *MockStorer) SubmitAnswer(ctx context.Context, playerID string, answer string, submittedAt time.Time) error {
	ret := _m.Called(ctx, playerID, answer, submittedAt)

	if len(ret) == 0 {
		panic("no return value specified for SubmitAnswer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = rf(ctx, playerID, answer, submittedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_SubmitAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitAnswer'
type MockStorer_SubmitAnswer_Call struct {
	*mock.Call
}

// SubmitAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID string
//   - answer string
//   - submittedAt time.Time
func (_e *MockStorer_Expecter) SubmitAnswer(ctx interface{}, playerID interface{}, answer interface{}, submittedAt interface{}) *MockStorer_SubmitAnswer_Call {
	return &MockStorer_SubmitAnswer_Call{Call: _e.mock.On("SubmitAnswer", ctx, playerID, answer, submittedAt)}
}

func (_c *MockStorer_SubmitAnswer_Call) Run(run func(ctx context.Context, playerID string, answer string, submittedAt time.Time)) *MockStorer_SubmitAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *MockStorer_SubmitAnswer_Call) Return(err error) *MockStorer_SubmitAnswer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorer_SubmitAnswer_Call) RunAndReturn(run func(context.Context, string, string, time.Time) error) *MockStorer_SubmitAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleIsReady provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) ToggleIsReady(ctx context.Context, playerID string) ([]sqlc.GetAllPlayersInRoomRow, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for ToggleIsReady")
	}

	var r0 []sqlc.GetAllPlayersInRoomRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]sqlc.GetAllPlayersInRoomRow, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []sqlc.GetAllPlayersInRoomRow); ok {
		r0 = rf(ctx, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetAllPlayersInRoomRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_ToggleIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleIsReady'
type MockStorer_ToggleIsReady_Call struct {
	*mock.Call
}

// ToggleIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID string
func (_e *MockStorer_Expecter) ToggleIsReady(ctx interface{}, playerID interface{}) *MockStorer_ToggleIsReady_Call {
	return &MockStorer_ToggleIsReady_Call{Call: _e.mock.On("ToggleIsReady", ctx, playerID)}
}

func (_c *MockStorer_ToggleIsReady_Call) Run(run func(ctx context.Context, playerID string)) *MockStorer_ToggleIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorer_ToggleIsReady_Call) Return(players []sqlc.GetAllPlayersInRoomRow, err error) *MockStorer_ToggleIsReady_Call {
	_c.Call.Return(players, err)
	return _c
}

func (_c *MockStorer_ToggleIsReady_Call) RunAndReturn(run func(context.Context, string) ([]sqlc.GetAllPlayersInRoomRow, error)) *MockStorer_ToggleIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAvatar provides a mock function with given fields: ctx, avatar, playerID
func (_m *MockStorer) UpdateAvatar(ctx context.Context, avatar []byte, playerID string) ([]sqlc.GetAllPlayersInRoomRow, error) {
	ret := _m.Called(ctx, avatar, playerID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 []sqlc.GetAllPlayersInRoomRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) ([]sqlc.GetAllPlayersInRoomRow, error)); ok {
		return rf(ctx, avatar, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) []sqlc.GetAllPlayersInRoomRow); ok {
		r0 = rf(ctx, avatar, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetAllPlayersInRoomRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, avatar, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpdateAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAvatar'
type MockStorer_UpdateAvatar_Call struct {
	*mock.Call
}

// UpdateAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - avatar []byte
//   - playerID string
func (_e *MockStorer_Expecter) UpdateAvatar(ctx interface{}, avatar interface{}, playerID interface{}) *MockStorer_UpdateAvatar_Call {
	return &MockStorer_UpdateAvatar_Call{Call: _e.mock.On("UpdateAvatar", ctx, avatar, playerID)}
}

func (_c *MockStorer_UpdateAvatar_Call) Run(run func(ctx context.Context, avatar []byte, playerID string)) *MockStorer_UpdateAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockStorer_UpdateAvatar_Call) Return(players []sqlc.GetAllPlayersInRoomRow, err error) *MockStorer_UpdateAvatar_Call {
	_c.Call.Return(players, err)
	return _c
}

func (_c *MockStorer_UpdateAvatar_Call) RunAndReturn(run func(context.Context, []byte, string) ([]sqlc.GetAllPlayersInRoomRow, error)) *MockStorer_UpdateAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNickname provides a mock function with given fields: ctx, nickname, playerID
func (_m *MockStorer) UpdateNickname(ctx context.Context, nickname string, playerID string) ([]sqlc.GetAllPlayersInRoomRow, error) {
	ret := _m.Called(ctx, nickname, playerID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNickname")
	}

	var r0 []sqlc.GetAllPlayersInRoomRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]sqlc.GetAllPlayersInRoomRow, error)); ok {
		return rf(ctx, nickname, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []sqlc.GetAllPlayersInRoomRow); ok {
		r0 = rf(ctx, nickname, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.GetAllPlayersInRoomRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, nickname, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpdateNickname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNickname'
type MockStorer_UpdateNickname_Call struct {
	*mock.Call
}

// UpdateNickname is a helper method to define mock.On call
//   - ctx context.Context
//   - nickname string
//   - playerID string
func (_e *MockStorer_Expecter) UpdateNickname(ctx interface{}, nickname interface{}, playerID interface{}) *MockStorer_UpdateNickname_Call {
	return &MockStorer_UpdateNickname_Call{Call: _e.mock.On("UpdateNickname", ctx, nickname, playerID)}
}

func (_c *MockStorer_UpdateNickname_Call) Run(run func(ctx context.Context, nickname string, playerID string)) *MockStorer_UpdateNickname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStorer_UpdateNickname_Call) Return(players []sqlc.GetAllPlayersInRoomRow, err error) *MockStorer_UpdateNickname_Call {
	_c.Call.Return(players, err)
	return _c
}

func (_c *MockStorer_UpdateNickname_Call) RunAndReturn(run func(context.Context, string, string) ([]sqlc.GetAllPlayersInRoomRow, error)) *MockStorer_UpdateNickname_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorer creates a new instance of MockStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorer {
	mock := &MockStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
