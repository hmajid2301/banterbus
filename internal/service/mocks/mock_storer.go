// Code generated by mockery v2.50.0. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	db "gitlab.com/hmajid2301/banterbus/internal/store/db"

	uuid "github.com/google/uuid"
)

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

type MockStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorer) EXPECT() *MockStorer_Expecter {
	return &MockStorer_Expecter{mock: &_m.Mock}
}

// AddFibbingItAnswer provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddFibbingItAnswer(ctx context.Context, arg db.AddFibbingItAnswerParams) (db.FibbingItAnswer, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddFibbingItAnswer")
	}

	var r0 db.FibbingItAnswer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItAnswerParams) (db.FibbingItAnswer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItAnswerParams) db.FibbingItAnswer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.FibbingItAnswer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddFibbingItAnswerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddFibbingItAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFibbingItAnswer'
type MockStorer_AddFibbingItAnswer_Call struct {
	*mock.Call
}

// AddFibbingItAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddFibbingItAnswerParams
func (_e *MockStorer_Expecter) AddFibbingItAnswer(ctx interface{}, arg interface{}) *MockStorer_AddFibbingItAnswer_Call {
	return &MockStorer_AddFibbingItAnswer_Call{Call: _e.mock.On("AddFibbingItAnswer", ctx, arg)}
}

func (_c *MockStorer_AddFibbingItAnswer_Call) Run(run func(ctx context.Context, arg db.AddFibbingItAnswerParams)) *MockStorer_AddFibbingItAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddFibbingItAnswerParams))
	})
	return _c
}

func (_c *MockStorer_AddFibbingItAnswer_Call) Return(_a0 db.FibbingItAnswer, _a1 error) *MockStorer_AddFibbingItAnswer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddFibbingItAnswer_Call) RunAndReturn(run func(context.Context, db.AddFibbingItAnswerParams) (db.FibbingItAnswer, error)) *MockStorer_AddFibbingItAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// AddFibbingItRole provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddFibbingItRole(ctx context.Context, arg db.AddFibbingItRoleParams) (db.FibbingItPlayerRole, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddFibbingItRole")
	}

	var r0 db.FibbingItPlayerRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItRoleParams) (db.FibbingItPlayerRole, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItRoleParams) db.FibbingItPlayerRole); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.FibbingItPlayerRole)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddFibbingItRoleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddFibbingItRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFibbingItRole'
type MockStorer_AddFibbingItRole_Call struct {
	*mock.Call
}

// AddFibbingItRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddFibbingItRoleParams
func (_e *MockStorer_Expecter) AddFibbingItRole(ctx interface{}, arg interface{}) *MockStorer_AddFibbingItRole_Call {
	return &MockStorer_AddFibbingItRole_Call{Call: _e.mock.On("AddFibbingItRole", ctx, arg)}
}

func (_c *MockStorer_AddFibbingItRole_Call) Run(run func(ctx context.Context, arg db.AddFibbingItRoleParams)) *MockStorer_AddFibbingItRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddFibbingItRoleParams))
	})
	return _c
}

func (_c *MockStorer_AddFibbingItRole_Call) Return(_a0 db.FibbingItPlayerRole, _a1 error) *MockStorer_AddFibbingItRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddFibbingItRole_Call) RunAndReturn(run func(context.Context, db.AddFibbingItRoleParams) (db.FibbingItPlayerRole, error)) *MockStorer_AddFibbingItRole_Call {
	_c.Call.Return(run)
	return _c
}

// AddFibbingItRound provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddFibbingItRound(ctx context.Context, arg db.AddFibbingItRoundParams) (db.FibbingItRound, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddFibbingItRound")
	}

	var r0 db.FibbingItRound
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItRoundParams) (db.FibbingItRound, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItRoundParams) db.FibbingItRound); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.FibbingItRound)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddFibbingItRoundParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddFibbingItRound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFibbingItRound'
type MockStorer_AddFibbingItRound_Call struct {
	*mock.Call
}

// AddFibbingItRound is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddFibbingItRoundParams
func (_e *MockStorer_Expecter) AddFibbingItRound(ctx interface{}, arg interface{}) *MockStorer_AddFibbingItRound_Call {
	return &MockStorer_AddFibbingItRound_Call{Call: _e.mock.On("AddFibbingItRound", ctx, arg)}
}

func (_c *MockStorer_AddFibbingItRound_Call) Run(run func(ctx context.Context, arg db.AddFibbingItRoundParams)) *MockStorer_AddFibbingItRound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddFibbingItRoundParams))
	})
	return _c
}

func (_c *MockStorer_AddFibbingItRound_Call) Return(_a0 db.FibbingItRound, _a1 error) *MockStorer_AddFibbingItRound_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddFibbingItRound_Call) RunAndReturn(run func(context.Context, db.AddFibbingItRoundParams) (db.FibbingItRound, error)) *MockStorer_AddFibbingItRound_Call {
	_c.Call.Return(run)
	return _c
}

// AddFibbingItScore provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddFibbingItScore(ctx context.Context, arg db.AddFibbingItScoreParams) (db.FibbingItScore, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddFibbingItScore")
	}

	var r0 db.FibbingItScore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItScoreParams) (db.FibbingItScore, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddFibbingItScoreParams) db.FibbingItScore); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.FibbingItScore)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddFibbingItScoreParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddFibbingItScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFibbingItScore'
type MockStorer_AddFibbingItScore_Call struct {
	*mock.Call
}

// AddFibbingItScore is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddFibbingItScoreParams
func (_e *MockStorer_Expecter) AddFibbingItScore(ctx interface{}, arg interface{}) *MockStorer_AddFibbingItScore_Call {
	return &MockStorer_AddFibbingItScore_Call{Call: _e.mock.On("AddFibbingItScore", ctx, arg)}
}

func (_c *MockStorer_AddFibbingItScore_Call) Run(run func(ctx context.Context, arg db.AddFibbingItScoreParams)) *MockStorer_AddFibbingItScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddFibbingItScoreParams))
	})
	return _c
}

func (_c *MockStorer_AddFibbingItScore_Call) Return(_a0 db.FibbingItScore, _a1 error) *MockStorer_AddFibbingItScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddFibbingItScore_Call) RunAndReturn(run func(context.Context, db.AddFibbingItScoreParams) (db.FibbingItScore, error)) *MockStorer_AddFibbingItScore_Call {
	_c.Call.Return(run)
	return _c
}

// AddGameState provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddGameState(ctx context.Context, arg db.AddGameStateParams) (db.GameState, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddGameState")
	}

	var r0 db.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddGameStateParams) (db.GameState, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddGameStateParams) db.GameState); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.GameState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddGameStateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGameState'
type MockStorer_AddGameState_Call struct {
	*mock.Call
}

// AddGameState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddGameStateParams
func (_e *MockStorer_Expecter) AddGameState(ctx interface{}, arg interface{}) *MockStorer_AddGameState_Call {
	return &MockStorer_AddGameState_Call{Call: _e.mock.On("AddGameState", ctx, arg)}
}

func (_c *MockStorer_AddGameState_Call) Run(run func(ctx context.Context, arg db.AddGameStateParams)) *MockStorer_AddGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddGameStateParams))
	})
	return _c
}

func (_c *MockStorer_AddGameState_Call) Return(_a0 db.GameState, _a1 error) *MockStorer_AddGameState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddGameState_Call) RunAndReturn(run func(context.Context, db.AddGameStateParams) (db.GameState, error)) *MockStorer_AddGameState_Call {
	_c.Call.Return(run)
	return _c
}

// AddPlayer provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddPlayer(ctx context.Context, arg db.AddPlayerParams) (db.Player, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayer")
	}

	var r0 db.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddPlayerParams) (db.Player, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddPlayerParams) db.Player); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddPlayerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlayer'
type MockStorer_AddPlayer_Call struct {
	*mock.Call
}

// AddPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddPlayerParams
func (_e *MockStorer_Expecter) AddPlayer(ctx interface{}, arg interface{}) *MockStorer_AddPlayer_Call {
	return &MockStorer_AddPlayer_Call{Call: _e.mock.On("AddPlayer", ctx, arg)}
}

func (_c *MockStorer_AddPlayer_Call) Run(run func(ctx context.Context, arg db.AddPlayerParams)) *MockStorer_AddPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddPlayerParams))
	})
	return _c
}

func (_c *MockStorer_AddPlayer_Call) Return(_a0 db.Player, _a1 error) *MockStorer_AddPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddPlayer_Call) RunAndReturn(run func(context.Context, db.AddPlayerParams) (db.Player, error)) *MockStorer_AddPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// AddPlayerToRoom provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddPlayerToRoom(ctx context.Context, arg db.AddPlayerToRoomArgs) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayerToRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddPlayerToRoomArgs) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_AddPlayerToRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlayerToRoom'
type MockStorer_AddPlayerToRoom_Call struct {
	*mock.Call
}

// AddPlayerToRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddPlayerToRoomArgs
func (_e *MockStorer_Expecter) AddPlayerToRoom(ctx interface{}, arg interface{}) *MockStorer_AddPlayerToRoom_Call {
	return &MockStorer_AddPlayerToRoom_Call{Call: _e.mock.On("AddPlayerToRoom", ctx, arg)}
}

func (_c *MockStorer_AddPlayerToRoom_Call) Run(run func(ctx context.Context, arg db.AddPlayerToRoomArgs)) *MockStorer_AddPlayerToRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddPlayerToRoomArgs))
	})
	return _c
}

func (_c *MockStorer_AddPlayerToRoom_Call) Return(_a0 error) *MockStorer_AddPlayerToRoom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_AddPlayerToRoom_Call) RunAndReturn(run func(context.Context, db.AddPlayerToRoomArgs) error) *MockStorer_AddPlayerToRoom_Call {
	_c.Call.Return(run)
	return _c
}

// AddQuestion provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddQuestion(ctx context.Context, arg db.AddQuestionParams) (db.Question, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddQuestion")
	}

	var r0 db.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddQuestionParams) (db.Question, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddQuestionParams) db.Question); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Question)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddQuestionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddQuestion'
type MockStorer_AddQuestion_Call struct {
	*mock.Call
}

// AddQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddQuestionParams
func (_e *MockStorer_Expecter) AddQuestion(ctx interface{}, arg interface{}) *MockStorer_AddQuestion_Call {
	return &MockStorer_AddQuestion_Call{Call: _e.mock.On("AddQuestion", ctx, arg)}
}

func (_c *MockStorer_AddQuestion_Call) Run(run func(ctx context.Context, arg db.AddQuestionParams)) *MockStorer_AddQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddQuestionParams))
	})
	return _c
}

func (_c *MockStorer_AddQuestion_Call) Return(_a0 db.Question, _a1 error) *MockStorer_AddQuestion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddQuestion_Call) RunAndReturn(run func(context.Context, db.AddQuestionParams) (db.Question, error)) *MockStorer_AddQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// AddQuestionTranslation provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddQuestionTranslation(ctx context.Context, arg db.AddQuestionTranslationParams) (db.QuestionsI18n, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddQuestionTranslation")
	}

	var r0 db.QuestionsI18n
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddQuestionTranslationParams) (db.QuestionsI18n, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddQuestionTranslationParams) db.QuestionsI18n); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.QuestionsI18n)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddQuestionTranslationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddQuestionTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddQuestionTranslation'
type MockStorer_AddQuestionTranslation_Call struct {
	*mock.Call
}

// AddQuestionTranslation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddQuestionTranslationParams
func (_e *MockStorer_Expecter) AddQuestionTranslation(ctx interface{}, arg interface{}) *MockStorer_AddQuestionTranslation_Call {
	return &MockStorer_AddQuestionTranslation_Call{Call: _e.mock.On("AddQuestionTranslation", ctx, arg)}
}

func (_c *MockStorer_AddQuestionTranslation_Call) Run(run func(ctx context.Context, arg db.AddQuestionTranslationParams)) *MockStorer_AddQuestionTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddQuestionTranslationParams))
	})
	return _c
}

func (_c *MockStorer_AddQuestionTranslation_Call) Return(_a0 db.QuestionsI18n, _a1 error) *MockStorer_AddQuestionTranslation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddQuestionTranslation_Call) RunAndReturn(run func(context.Context, db.AddQuestionTranslationParams) (db.QuestionsI18n, error)) *MockStorer_AddQuestionTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoom provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddRoom(ctx context.Context, arg db.AddRoomParams) (db.Room, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddRoom")
	}

	var r0 db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddRoomParams) (db.Room, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddRoomParams) db.Room); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddRoomParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoom'
type MockStorer_AddRoom_Call struct {
	*mock.Call
}

// AddRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddRoomParams
func (_e *MockStorer_Expecter) AddRoom(ctx interface{}, arg interface{}) *MockStorer_AddRoom_Call {
	return &MockStorer_AddRoom_Call{Call: _e.mock.On("AddRoom", ctx, arg)}
}

func (_c *MockStorer_AddRoom_Call) Run(run func(ctx context.Context, arg db.AddRoomParams)) *MockStorer_AddRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddRoomParams))
	})
	return _c
}

func (_c *MockStorer_AddRoom_Call) Return(_a0 db.Room, _a1 error) *MockStorer_AddRoom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddRoom_Call) RunAndReturn(run func(context.Context, db.AddRoomParams) (db.Room, error)) *MockStorer_AddRoom_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoomPlayer provides a mock function with given fields: ctx, arg
func (_m *MockStorer) AddRoomPlayer(ctx context.Context, arg db.AddRoomPlayerParams) (db.RoomsPlayer, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddRoomPlayer")
	}

	var r0 db.RoomsPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddRoomPlayerParams) (db.RoomsPlayer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddRoomPlayerParams) db.RoomsPlayer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.RoomsPlayer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddRoomPlayerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_AddRoomPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoomPlayer'
type MockStorer_AddRoomPlayer_Call struct {
	*mock.Call
}

// AddRoomPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddRoomPlayerParams
func (_e *MockStorer_Expecter) AddRoomPlayer(ctx interface{}, arg interface{}) *MockStorer_AddRoomPlayer_Call {
	return &MockStorer_AddRoomPlayer_Call{Call: _e.mock.On("AddRoomPlayer", ctx, arg)}
}

func (_c *MockStorer_AddRoomPlayer_Call) Run(run func(ctx context.Context, arg db.AddRoomPlayerParams)) *MockStorer_AddRoomPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddRoomPlayerParams))
	})
	return _c
}

func (_c *MockStorer_AddRoomPlayer_Call) Return(_a0 db.RoomsPlayer, _a1 error) *MockStorer_AddRoomPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_AddRoomPlayer_Call) RunAndReturn(run func(context.Context, db.AddRoomPlayerParams) (db.RoomsPlayer, error)) *MockStorer_AddRoomPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQuestion provides a mock function with given fields: ctx, arg
func (_m *MockStorer) CreateQuestion(ctx context.Context, arg db.CreateQuestionArgs) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuestion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateQuestionArgs) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_CreateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestion'
type MockStorer_CreateQuestion_Call struct {
	*mock.Call
}

// CreateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateQuestionArgs
func (_e *MockStorer_Expecter) CreateQuestion(ctx interface{}, arg interface{}) *MockStorer_CreateQuestion_Call {
	return &MockStorer_CreateQuestion_Call{Call: _e.mock.On("CreateQuestion", ctx, arg)}
}

func (_c *MockStorer_CreateQuestion_Call) Run(run func(ctx context.Context, arg db.CreateQuestionArgs)) *MockStorer_CreateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateQuestionArgs))
	})
	return _c
}

func (_c *MockStorer_CreateQuestion_Call) Return(_a0 error) *MockStorer_CreateQuestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_CreateQuestion_Call) RunAndReturn(run func(context.Context, db.CreateQuestionArgs) error) *MockStorer_CreateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoom provides a mock function with given fields: ctx, arg
func (_m *MockStorer) CreateRoom(ctx context.Context, arg db.CreateRoomArgs) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateRoomArgs) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_CreateRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoom'
type MockStorer_CreateRoom_Call struct {
	*mock.Call
}

// CreateRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateRoomArgs
func (_e *MockStorer_Expecter) CreateRoom(ctx interface{}, arg interface{}) *MockStorer_CreateRoom_Call {
	return &MockStorer_CreateRoom_Call{Call: _e.mock.On("CreateRoom", ctx, arg)}
}

func (_c *MockStorer_CreateRoom_Call) Run(run func(ctx context.Context, arg db.CreateRoomArgs)) *MockStorer_CreateRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateRoomArgs))
	})
	return _c
}

func (_c *MockStorer_CreateRoom_Call) Return(_a0 error) *MockStorer_CreateRoom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_CreateRoom_Call) RunAndReturn(run func(context.Context, db.CreateRoomArgs) error) *MockStorer_CreateRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayerAnswerIsReady provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetAllPlayerAnswerIsReady(ctx context.Context, playerID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayerAnswerIsReady")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetAllPlayerAnswerIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayerAnswerIsReady'
type MockStorer_GetAllPlayerAnswerIsReady_Call struct {
	*mock.Call
}

// GetAllPlayerAnswerIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) GetAllPlayerAnswerIsReady(ctx interface{}, playerID interface{}) *MockStorer_GetAllPlayerAnswerIsReady_Call {
	return &MockStorer_GetAllPlayerAnswerIsReady_Call{Call: _e.mock.On("GetAllPlayerAnswerIsReady", ctx, playerID)}
}

func (_c *MockStorer_GetAllPlayerAnswerIsReady_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_GetAllPlayerAnswerIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetAllPlayerAnswerIsReady_Call) Return(_a0 bool, _a1 error) *MockStorer_GetAllPlayerAnswerIsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetAllPlayerAnswerIsReady_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MockStorer_GetAllPlayerAnswerIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayerByRoomCode provides a mock function with given fields: ctx, roomCode
func (_m *MockStorer) GetAllPlayerByRoomCode(ctx context.Context, roomCode string) ([]db.GetAllPlayerByRoomCodeRow, error) {
	ret := _m.Called(ctx, roomCode)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayerByRoomCode")
	}

	var r0 []db.GetAllPlayerByRoomCodeRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]db.GetAllPlayerByRoomCodeRow, error)); ok {
		return rf(ctx, roomCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []db.GetAllPlayerByRoomCodeRow); ok {
		r0 = rf(ctx, roomCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayerByRoomCodeRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roomCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetAllPlayerByRoomCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayerByRoomCode'
type MockStorer_GetAllPlayerByRoomCode_Call struct {
	*mock.Call
}

// GetAllPlayerByRoomCode is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
func (_e *MockStorer_Expecter) GetAllPlayerByRoomCode(ctx interface{}, roomCode interface{}) *MockStorer_GetAllPlayerByRoomCode_Call {
	return &MockStorer_GetAllPlayerByRoomCode_Call{Call: _e.mock.On("GetAllPlayerByRoomCode", ctx, roomCode)}
}

func (_c *MockStorer_GetAllPlayerByRoomCode_Call) Run(run func(ctx context.Context, roomCode string)) *MockStorer_GetAllPlayerByRoomCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorer_GetAllPlayerByRoomCode_Call) Return(_a0 []db.GetAllPlayerByRoomCodeRow, _a1 error) *MockStorer_GetAllPlayerByRoomCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetAllPlayerByRoomCode_Call) RunAndReturn(run func(context.Context, string) ([]db.GetAllPlayerByRoomCodeRow, error)) *MockStorer_GetAllPlayerByRoomCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersByGameStateID provides a mock function with given fields: ctx, id
func (_m *MockStorer) GetAllPlayersByGameStateID(ctx context.Context, id uuid.UUID) ([]db.GetAllPlayersByGameStateIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersByGameStateID")
	}

	var r0 []db.GetAllPlayersByGameStateIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllPlayersByGameStateIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllPlayersByGameStateIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayersByGameStateIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetAllPlayersByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersByGameStateID'
type MockStorer_GetAllPlayersByGameStateID_Call struct {
	*mock.Call
}

// GetAllPlayersByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStorer_Expecter) GetAllPlayersByGameStateID(ctx interface{}, id interface{}) *MockStorer_GetAllPlayersByGameStateID_Call {
	return &MockStorer_GetAllPlayersByGameStateID_Call{Call: _e.mock.On("GetAllPlayersByGameStateID", ctx, id)}
}

func (_c *MockStorer_GetAllPlayersByGameStateID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorer_GetAllPlayersByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetAllPlayersByGameStateID_Call) Return(_a0 []db.GetAllPlayersByGameStateIDRow, _a1 error) *MockStorer_GetAllPlayersByGameStateID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetAllPlayersByGameStateID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.GetAllPlayersByGameStateIDRow, error)) *MockStorer_GetAllPlayersByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersInRoom provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetAllPlayersInRoom(ctx context.Context, playerID uuid.UUID) ([]db.GetAllPlayersInRoomRow, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersInRoom")
	}

	var r0 []db.GetAllPlayersInRoomRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllPlayersInRoomRow); ok {
		r0 = rf(ctx, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayersInRoomRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetAllPlayersInRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersInRoom'
type MockStorer_GetAllPlayersInRoom_Call struct {
	*mock.Call
}

// GetAllPlayersInRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) GetAllPlayersInRoom(ctx interface{}, playerID interface{}) *MockStorer_GetAllPlayersInRoom_Call {
	return &MockStorer_GetAllPlayersInRoom_Call{Call: _e.mock.On("GetAllPlayersInRoom", ctx, playerID)}
}

func (_c *MockStorer_GetAllPlayersInRoom_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_GetAllPlayersInRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetAllPlayersInRoom_Call) Return(_a0 []db.GetAllPlayersInRoomRow, _a1 error) *MockStorer_GetAllPlayersInRoom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetAllPlayersInRoom_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)) *MockStorer_GetAllPlayersInRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersVotingIsReady provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetAllPlayersVotingIsReady(ctx context.Context, playerID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersVotingIsReady")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetAllPlayersVotingIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersVotingIsReady'
type MockStorer_GetAllPlayersVotingIsReady_Call struct {
	*mock.Call
}

// GetAllPlayersVotingIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) GetAllPlayersVotingIsReady(ctx interface{}, playerID interface{}) *MockStorer_GetAllPlayersVotingIsReady_Call {
	return &MockStorer_GetAllPlayersVotingIsReady_Call{Call: _e.mock.On("GetAllPlayersVotingIsReady", ctx, playerID)}
}

func (_c *MockStorer_GetAllPlayersVotingIsReady_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_GetAllPlayersVotingIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetAllPlayersVotingIsReady_Call) Return(_a0 bool, _a1 error) *MockStorer_GetAllPlayersVotingIsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetAllPlayersVotingIsReady_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MockStorer_GetAllPlayersVotingIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVotesForRoundByGameStateID provides a mock function with given fields: ctx, gameStateID
func (_m *MockStorer) GetAllVotesForRoundByGameStateID(ctx context.Context, gameStateID uuid.UUID) ([]db.GetAllVotesForRoundByGameStateIDRow, error) {
	ret := _m.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVotesForRoundByGameStateID")
	}

	var r0 []db.GetAllVotesForRoundByGameStateIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllVotesForRoundByGameStateIDRow, error)); ok {
		return rf(ctx, gameStateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllVotesForRoundByGameStateIDRow); ok {
		r0 = rf(ctx, gameStateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllVotesForRoundByGameStateIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetAllVotesForRoundByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVotesForRoundByGameStateID'
type MockStorer_GetAllVotesForRoundByGameStateID_Call struct {
	*mock.Call
}

// GetAllVotesForRoundByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
func (_e *MockStorer_Expecter) GetAllVotesForRoundByGameStateID(ctx interface{}, gameStateID interface{}) *MockStorer_GetAllVotesForRoundByGameStateID_Call {
	return &MockStorer_GetAllVotesForRoundByGameStateID_Call{Call: _e.mock.On("GetAllVotesForRoundByGameStateID", ctx, gameStateID)}
}

func (_c *MockStorer_GetAllVotesForRoundByGameStateID_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID)) *MockStorer_GetAllVotesForRoundByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetAllVotesForRoundByGameStateID_Call) Return(_a0 []db.GetAllVotesForRoundByGameStateIDRow, _a1 error) *MockStorer_GetAllVotesForRoundByGameStateID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetAllVotesForRoundByGameStateID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.GetAllVotesForRoundByGameStateIDRow, error)) *MockStorer_GetAllVotesForRoundByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentQuestionByPlayerID provides a mock function with given fields: ctx, id
func (_m *MockStorer) GetCurrentQuestionByPlayerID(ctx context.Context, id uuid.UUID) (db.GetCurrentQuestionByPlayerIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentQuestionByPlayerID")
	}

	var r0 db.GetCurrentQuestionByPlayerIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetCurrentQuestionByPlayerIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetCurrentQuestionByPlayerIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.GetCurrentQuestionByPlayerIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetCurrentQuestionByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentQuestionByPlayerID'
type MockStorer_GetCurrentQuestionByPlayerID_Call struct {
	*mock.Call
}

// GetCurrentQuestionByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStorer_Expecter) GetCurrentQuestionByPlayerID(ctx interface{}, id interface{}) *MockStorer_GetCurrentQuestionByPlayerID_Call {
	return &MockStorer_GetCurrentQuestionByPlayerID_Call{Call: _e.mock.On("GetCurrentQuestionByPlayerID", ctx, id)}
}

func (_c *MockStorer_GetCurrentQuestionByPlayerID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorer_GetCurrentQuestionByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetCurrentQuestionByPlayerID_Call) Return(_a0 db.GetCurrentQuestionByPlayerIDRow, _a1 error) *MockStorer_GetCurrentQuestionByPlayerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetCurrentQuestionByPlayerID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GetCurrentQuestionByPlayerIDRow, error)) *MockStorer_GetCurrentQuestionByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameState provides a mock function with given fields: ctx, id
func (_m *MockStorer) GetGameState(ctx context.Context, id uuid.UUID) (db.GameState, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGameState")
	}

	var r0 db.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GameState, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GameState); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.GameState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameState'
type MockStorer_GetGameState_Call struct {
	*mock.Call
}

// GetGameState is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStorer_Expecter) GetGameState(ctx interface{}, id interface{}) *MockStorer_GetGameState_Call {
	return &MockStorer_GetGameState_Call{Call: _e.mock.On("GetGameState", ctx, id)}
}

func (_c *MockStorer_GetGameState_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorer_GetGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetGameState_Call) Return(_a0 db.GameState, _a1 error) *MockStorer_GetGameState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetGameState_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GameState, error)) *MockStorer_GetGameState_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameStateByPlayerID provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetGameStateByPlayerID(ctx context.Context, playerID uuid.UUID) (db.GameState, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetGameStateByPlayerID")
	}

	var r0 db.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GameState, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GameState); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.GameState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetGameStateByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameStateByPlayerID'
type MockStorer_GetGameStateByPlayerID_Call struct {
	*mock.Call
}

// GetGameStateByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) GetGameStateByPlayerID(ctx interface{}, playerID interface{}) *MockStorer_GetGameStateByPlayerID_Call {
	return &MockStorer_GetGameStateByPlayerID_Call{Call: _e.mock.On("GetGameStateByPlayerID", ctx, playerID)}
}

func (_c *MockStorer_GetGameStateByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_GetGameStateByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetGameStateByPlayerID_Call) Return(_a0 db.GameState, _a1 error) *MockStorer_GetGameStateByPlayerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetGameStateByPlayerID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GameState, error)) *MockStorer_GetGameStateByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx
func (_m *MockStorer) GetGroups(ctx context.Context) ([]db.QuestionsGroup, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []db.QuestionsGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.QuestionsGroup, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.QuestionsGroup); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.QuestionsGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockStorer_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorer_Expecter) GetGroups(ctx interface{}) *MockStorer_GetGroups_Call {
	return &MockStorer_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx)}
}

func (_c *MockStorer_GetGroups_Call) Run(run func(ctx context.Context)) *MockStorer_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorer_GetGroups_Call) Return(_a0 []db.QuestionsGroup, _a1 error) *MockStorer_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetGroups_Call) RunAndReturn(run func(context.Context) ([]db.QuestionsGroup, error)) *MockStorer_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRoundByGameStateID provides a mock function with given fields: ctx, id
func (_m *MockStorer) GetLatestRoundByGameStateID(ctx context.Context, id uuid.UUID) (db.GetLatestRoundByGameStateIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRoundByGameStateID")
	}

	var r0 db.GetLatestRoundByGameStateIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetLatestRoundByGameStateIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetLatestRoundByGameStateIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.GetLatestRoundByGameStateIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetLatestRoundByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRoundByGameStateID'
type MockStorer_GetLatestRoundByGameStateID_Call struct {
	*mock.Call
}

// GetLatestRoundByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStorer_Expecter) GetLatestRoundByGameStateID(ctx interface{}, id interface{}) *MockStorer_GetLatestRoundByGameStateID_Call {
	return &MockStorer_GetLatestRoundByGameStateID_Call{Call: _e.mock.On("GetLatestRoundByGameStateID", ctx, id)}
}

func (_c *MockStorer_GetLatestRoundByGameStateID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorer_GetLatestRoundByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetLatestRoundByGameStateID_Call) Return(_a0 db.GetLatestRoundByGameStateIDRow, _a1 error) *MockStorer_GetLatestRoundByGameStateID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetLatestRoundByGameStateID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GetLatestRoundByGameStateIDRow, error)) *MockStorer_GetLatestRoundByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRoundByPlayerID provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetLatestRoundByPlayerID(ctx context.Context, playerID uuid.UUID) (db.GetLatestRoundByPlayerIDRow, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRoundByPlayerID")
	}

	var r0 db.GetLatestRoundByPlayerIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetLatestRoundByPlayerIDRow, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetLatestRoundByPlayerIDRow); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.GetLatestRoundByPlayerIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetLatestRoundByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRoundByPlayerID'
type MockStorer_GetLatestRoundByPlayerID_Call struct {
	*mock.Call
}

// GetLatestRoundByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) GetLatestRoundByPlayerID(ctx interface{}, playerID interface{}) *MockStorer_GetLatestRoundByPlayerID_Call {
	return &MockStorer_GetLatestRoundByPlayerID_Call{Call: _e.mock.On("GetLatestRoundByPlayerID", ctx, playerID)}
}

func (_c *MockStorer_GetLatestRoundByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_GetLatestRoundByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetLatestRoundByPlayerID_Call) Return(_a0 db.GetLatestRoundByPlayerIDRow, _a1 error) *MockStorer_GetLatestRoundByPlayerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetLatestRoundByPlayerID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GetLatestRoundByPlayerIDRow, error)) *MockStorer_GetLatestRoundByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayerByID provides a mock function with given fields: ctx, id
func (_m *MockStorer) GetPlayerByID(ctx context.Context, id uuid.UUID) (db.Player, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayerByID")
	}

	var r0 db.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Player, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Player); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetPlayerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayerByID'
type MockStorer_GetPlayerByID_Call struct {
	*mock.Call
}

// GetPlayerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStorer_Expecter) GetPlayerByID(ctx interface{}, id interface{}) *MockStorer_GetPlayerByID_Call {
	return &MockStorer_GetPlayerByID_Call{Call: _e.mock.On("GetPlayerByID", ctx, id)}
}

func (_c *MockStorer_GetPlayerByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorer_GetPlayerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetPlayerByID_Call) Return(_a0 db.Player, _a1 error) *MockStorer_GetPlayerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetPlayerByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Player, error)) *MockStorer_GetPlayerByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestions provides a mock function with given fields: ctx, arg
func (_m *MockStorer) GetQuestions(ctx context.Context, arg db.GetQuestionsParams) ([]db.GetQuestionsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestions")
	}

	var r0 []db.GetQuestionsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetQuestionsParams) ([]db.GetQuestionsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetQuestionsParams) []db.GetQuestionsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetQuestionsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetQuestionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetQuestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestions'
type MockStorer_GetQuestions_Call struct {
	*mock.Call
}

// GetQuestions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetQuestionsParams
func (_e *MockStorer_Expecter) GetQuestions(ctx interface{}, arg interface{}) *MockStorer_GetQuestions_Call {
	return &MockStorer_GetQuestions_Call{Call: _e.mock.On("GetQuestions", ctx, arg)}
}

func (_c *MockStorer_GetQuestions_Call) Run(run func(ctx context.Context, arg db.GetQuestionsParams)) *MockStorer_GetQuestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetQuestionsParams))
	})
	return _c
}

func (_c *MockStorer_GetQuestions_Call) Return(_a0 []db.GetQuestionsRow, _a1 error) *MockStorer_GetQuestions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetQuestions_Call) RunAndReturn(run func(context.Context, db.GetQuestionsParams) ([]db.GetQuestionsRow, error)) *MockStorer_GetQuestions_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomQuestionByRound provides a mock function with given fields: ctx, arg
func (_m *MockStorer) GetRandomQuestionByRound(ctx context.Context, arg db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomQuestionByRound")
	}

	var r0 []db.GetRandomQuestionByRoundRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionByRoundParams) []db.GetRandomQuestionByRoundRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetRandomQuestionByRoundRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetRandomQuestionByRoundParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetRandomQuestionByRound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomQuestionByRound'
type MockStorer_GetRandomQuestionByRound_Call struct {
	*mock.Call
}

// GetRandomQuestionByRound is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetRandomQuestionByRoundParams
func (_e *MockStorer_Expecter) GetRandomQuestionByRound(ctx interface{}, arg interface{}) *MockStorer_GetRandomQuestionByRound_Call {
	return &MockStorer_GetRandomQuestionByRound_Call{Call: _e.mock.On("GetRandomQuestionByRound", ctx, arg)}
}

func (_c *MockStorer_GetRandomQuestionByRound_Call) Run(run func(ctx context.Context, arg db.GetRandomQuestionByRoundParams)) *MockStorer_GetRandomQuestionByRound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetRandomQuestionByRoundParams))
	})
	return _c
}

func (_c *MockStorer_GetRandomQuestionByRound_Call) Return(_a0 []db.GetRandomQuestionByRoundRow, _a1 error) *MockStorer_GetRandomQuestionByRound_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetRandomQuestionByRound_Call) RunAndReturn(run func(context.Context, db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error)) *MockStorer_GetRandomQuestionByRound_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomQuestionInGroup provides a mock function with given fields: ctx, arg
func (_m *MockStorer) GetRandomQuestionInGroup(ctx context.Context, arg db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomQuestionInGroup")
	}

	var r0 []db.GetRandomQuestionInGroupRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionInGroupParams) []db.GetRandomQuestionInGroupRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetRandomQuestionInGroupRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetRandomQuestionInGroupParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetRandomQuestionInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomQuestionInGroup'
type MockStorer_GetRandomQuestionInGroup_Call struct {
	*mock.Call
}

// GetRandomQuestionInGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetRandomQuestionInGroupParams
func (_e *MockStorer_Expecter) GetRandomQuestionInGroup(ctx interface{}, arg interface{}) *MockStorer_GetRandomQuestionInGroup_Call {
	return &MockStorer_GetRandomQuestionInGroup_Call{Call: _e.mock.On("GetRandomQuestionInGroup", ctx, arg)}
}

func (_c *MockStorer_GetRandomQuestionInGroup_Call) Run(run func(ctx context.Context, arg db.GetRandomQuestionInGroupParams)) *MockStorer_GetRandomQuestionInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetRandomQuestionInGroupParams))
	})
	return _c
}

func (_c *MockStorer_GetRandomQuestionInGroup_Call) Return(_a0 []db.GetRandomQuestionInGroupRow, _a1 error) *MockStorer_GetRandomQuestionInGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetRandomQuestionInGroup_Call) RunAndReturn(run func(context.Context, db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error)) *MockStorer_GetRandomQuestionInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomByCode provides a mock function with given fields: ctx, roomCode
func (_m *MockStorer) GetRoomByCode(ctx context.Context, roomCode string) (db.Room, error) {
	ret := _m.Called(ctx, roomCode)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomByCode")
	}

	var r0 db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Room, error)); ok {
		return rf(ctx, roomCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Room); ok {
		r0 = rf(ctx, roomCode)
	} else {
		r0 = ret.Get(0).(db.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roomCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetRoomByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomByCode'
type MockStorer_GetRoomByCode_Call struct {
	*mock.Call
}

// GetRoomByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
func (_e *MockStorer_Expecter) GetRoomByCode(ctx interface{}, roomCode interface{}) *MockStorer_GetRoomByCode_Call {
	return &MockStorer_GetRoomByCode_Call{Call: _e.mock.On("GetRoomByCode", ctx, roomCode)}
}

func (_c *MockStorer_GetRoomByCode_Call) Run(run func(ctx context.Context, roomCode string)) *MockStorer_GetRoomByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorer_GetRoomByCode_Call) Return(_a0 db.Room, _a1 error) *MockStorer_GetRoomByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetRoomByCode_Call) RunAndReturn(run func(context.Context, string) (db.Room, error)) *MockStorer_GetRoomByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomByPlayerID provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) GetRoomByPlayerID(ctx context.Context, playerID uuid.UUID) (db.Room, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomByPlayerID")
	}

	var r0 db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Room, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Room); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetRoomByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomByPlayerID'
type MockStorer_GetRoomByPlayerID_Call struct {
	*mock.Call
}

// GetRoomByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) GetRoomByPlayerID(ctx interface{}, playerID interface{}) *MockStorer_GetRoomByPlayerID_Call {
	return &MockStorer_GetRoomByPlayerID_Call{Call: _e.mock.On("GetRoomByPlayerID", ctx, playerID)}
}

func (_c *MockStorer_GetRoomByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_GetRoomByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetRoomByPlayerID_Call) Return(_a0 db.Room, _a1 error) *MockStorer_GetRoomByPlayerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetRoomByPlayerID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Room, error)) *MockStorer_GetRoomByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalScoresByGameStateID provides a mock function with given fields: ctx, arg
func (_m *MockStorer) GetTotalScoresByGameStateID(ctx context.Context, arg db.GetTotalScoresByGameStateIDParams) ([]db.GetTotalScoresByGameStateIDRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalScoresByGameStateID")
	}

	var r0 []db.GetTotalScoresByGameStateIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTotalScoresByGameStateIDParams) ([]db.GetTotalScoresByGameStateIDRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetTotalScoresByGameStateIDParams) []db.GetTotalScoresByGameStateIDRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetTotalScoresByGameStateIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetTotalScoresByGameStateIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetTotalScoresByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalScoresByGameStateID'
type MockStorer_GetTotalScoresByGameStateID_Call struct {
	*mock.Call
}

// GetTotalScoresByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetTotalScoresByGameStateIDParams
func (_e *MockStorer_Expecter) GetTotalScoresByGameStateID(ctx interface{}, arg interface{}) *MockStorer_GetTotalScoresByGameStateID_Call {
	return &MockStorer_GetTotalScoresByGameStateID_Call{Call: _e.mock.On("GetTotalScoresByGameStateID", ctx, arg)}
}

func (_c *MockStorer_GetTotalScoresByGameStateID_Call) Run(run func(ctx context.Context, arg db.GetTotalScoresByGameStateIDParams)) *MockStorer_GetTotalScoresByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetTotalScoresByGameStateIDParams))
	})
	return _c
}

func (_c *MockStorer_GetTotalScoresByGameStateID_Call) Return(_a0 []db.GetTotalScoresByGameStateIDRow, _a1 error) *MockStorer_GetTotalScoresByGameStateID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetTotalScoresByGameStateID_Call) RunAndReturn(run func(context.Context, db.GetTotalScoresByGameStateIDParams) ([]db.GetTotalScoresByGameStateIDRow, error)) *MockStorer_GetTotalScoresByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVotingState provides a mock function with given fields: ctx, id
func (_m *MockStorer) GetVotingState(ctx context.Context, id uuid.UUID) ([]db.GetVotingStateRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVotingState")
	}

	var r0 []db.GetVotingStateRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetVotingStateRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetVotingStateRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetVotingStateRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_GetVotingState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotingState'
type MockStorer_GetVotingState_Call struct {
	*mock.Call
}

// GetVotingState is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStorer_Expecter) GetVotingState(ctx interface{}, id interface{}) *MockStorer_GetVotingState_Call {
	return &MockStorer_GetVotingState_Call{Call: _e.mock.On("GetVotingState", ctx, id)}
}

func (_c *MockStorer_GetVotingState_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorer_GetVotingState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_GetVotingState_Call) Return(_a0 []db.GetVotingStateRow, _a1 error) *MockStorer_GetVotingState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_GetVotingState_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.GetVotingStateRow, error)) *MockStorer_GetVotingState_Call {
	_c.Call.Return(run)
	return _c
}

// NewRound provides a mock function with given fields: ctx, arg
func (_m *MockStorer) NewRound(ctx context.Context, arg db.NewRoundArgs) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for NewRound")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.NewRoundArgs) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_NewRound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRound'
type MockStorer_NewRound_Call struct {
	*mock.Call
}

// NewRound is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.NewRoundArgs
func (_e *MockStorer_Expecter) NewRound(ctx interface{}, arg interface{}) *MockStorer_NewRound_Call {
	return &MockStorer_NewRound_Call{Call: _e.mock.On("NewRound", ctx, arg)}
}

func (_c *MockStorer_NewRound_Call) Run(run func(ctx context.Context, arg db.NewRoundArgs)) *MockStorer_NewRound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.NewRoundArgs))
	})
	return _c
}

func (_c *MockStorer_NewRound_Call) Return(_a0 error) *MockStorer_NewRound_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_NewRound_Call) RunAndReturn(run func(context.Context, db.NewRoundArgs) error) *MockStorer_NewRound_Call {
	_c.Call.Return(run)
	return _c
}

// NewScores provides a mock function with given fields: ctx, arg
func (_m *MockStorer) NewScores(ctx context.Context, arg db.NewScoresArgs) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for NewScores")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.NewScoresArgs) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_NewScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewScores'
type MockStorer_NewScores_Call struct {
	*mock.Call
}

// NewScores is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.NewScoresArgs
func (_e *MockStorer_Expecter) NewScores(ctx interface{}, arg interface{}) *MockStorer_NewScores_Call {
	return &MockStorer_NewScores_Call{Call: _e.mock.On("NewScores", ctx, arg)}
}

func (_c *MockStorer_NewScores_Call) Run(run func(ctx context.Context, arg db.NewScoresArgs)) *MockStorer_NewScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.NewScoresArgs))
	})
	return _c
}

func (_c *MockStorer_NewScores_Call) Return(_a0 error) *MockStorer_NewScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_NewScores_Call) RunAndReturn(run func(context.Context, db.NewScoresArgs) error) *MockStorer_NewScores_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePlayerFromRoom provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) RemovePlayerFromRoom(ctx context.Context, playerID uuid.UUID) (db.RoomsPlayer, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePlayerFromRoom")
	}

	var r0 db.RoomsPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.RoomsPlayer, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.RoomsPlayer); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.RoomsPlayer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_RemovePlayerFromRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePlayerFromRoom'
type MockStorer_RemovePlayerFromRoom_Call struct {
	*mock.Call
}

// RemovePlayerFromRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) RemovePlayerFromRoom(ctx interface{}, playerID interface{}) *MockStorer_RemovePlayerFromRoom_Call {
	return &MockStorer_RemovePlayerFromRoom_Call{Call: _e.mock.On("RemovePlayerFromRoom", ctx, playerID)}
}

func (_c *MockStorer_RemovePlayerFromRoom_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_RemovePlayerFromRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_RemovePlayerFromRoom_Call) Return(_a0 db.RoomsPlayer, _a1 error) *MockStorer_RemovePlayerFromRoom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_RemovePlayerFromRoom_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.RoomsPlayer, error)) *MockStorer_RemovePlayerFromRoom_Call {
	_c.Call.Return(run)
	return _c
}

// StartGame provides a mock function with given fields: ctx, arg
func (_m *MockStorer) StartGame(ctx context.Context, arg db.StartGameArgs) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for StartGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.StartGameArgs) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_StartGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartGame'
type MockStorer_StartGame_Call struct {
	*mock.Call
}

// StartGame is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.StartGameArgs
func (_e *MockStorer_Expecter) StartGame(ctx interface{}, arg interface{}) *MockStorer_StartGame_Call {
	return &MockStorer_StartGame_Call{Call: _e.mock.On("StartGame", ctx, arg)}
}

func (_c *MockStorer_StartGame_Call) Run(run func(ctx context.Context, arg db.StartGameArgs)) *MockStorer_StartGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.StartGameArgs))
	})
	return _c
}

func (_c *MockStorer_StartGame_Call) Return(_a0 error) *MockStorer_StartGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_StartGame_Call) RunAndReturn(run func(context.Context, db.StartGameArgs) error) *MockStorer_StartGame_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAnswerIsReady provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) ToggleAnswerIsReady(ctx context.Context, playerID uuid.UUID) (db.FibbingItAnswer, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAnswerIsReady")
	}

	var r0 db.FibbingItAnswer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.FibbingItAnswer, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.FibbingItAnswer); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.FibbingItAnswer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_ToggleAnswerIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAnswerIsReady'
type MockStorer_ToggleAnswerIsReady_Call struct {
	*mock.Call
}

// ToggleAnswerIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) ToggleAnswerIsReady(ctx interface{}, playerID interface{}) *MockStorer_ToggleAnswerIsReady_Call {
	return &MockStorer_ToggleAnswerIsReady_Call{Call: _e.mock.On("ToggleAnswerIsReady", ctx, playerID)}
}

func (_c *MockStorer_ToggleAnswerIsReady_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_ToggleAnswerIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_ToggleAnswerIsReady_Call) Return(_a0 db.FibbingItAnswer, _a1 error) *MockStorer_ToggleAnswerIsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_ToggleAnswerIsReady_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.FibbingItAnswer, error)) *MockStorer_ToggleAnswerIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// TogglePlayerIsReady provides a mock function with given fields: ctx, id
func (_m *MockStorer) TogglePlayerIsReady(ctx context.Context, id uuid.UUID) (db.Player, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for TogglePlayerIsReady")
	}

	var r0 db.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Player, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Player); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_TogglePlayerIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TogglePlayerIsReady'
type MockStorer_TogglePlayerIsReady_Call struct {
	*mock.Call
}

// TogglePlayerIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockStorer_Expecter) TogglePlayerIsReady(ctx interface{}, id interface{}) *MockStorer_TogglePlayerIsReady_Call {
	return &MockStorer_TogglePlayerIsReady_Call{Call: _e.mock.On("TogglePlayerIsReady", ctx, id)}
}

func (_c *MockStorer_TogglePlayerIsReady_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStorer_TogglePlayerIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_TogglePlayerIsReady_Call) Return(_a0 db.Player, _a1 error) *MockStorer_TogglePlayerIsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_TogglePlayerIsReady_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Player, error)) *MockStorer_TogglePlayerIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleVotingIsReady provides a mock function with given fields: ctx, playerID
func (_m *MockStorer) ToggleVotingIsReady(ctx context.Context, playerID uuid.UUID) (db.FibbingItVote, error) {
	ret := _m.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for ToggleVotingIsReady")
	}

	var r0 db.FibbingItVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.FibbingItVote, error)); ok {
		return rf(ctx, playerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.FibbingItVote); ok {
		r0 = rf(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.FibbingItVote)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_ToggleVotingIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleVotingIsReady'
type MockStorer_ToggleVotingIsReady_Call struct {
	*mock.Call
}

// ToggleVotingIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockStorer_Expecter) ToggleVotingIsReady(ctx interface{}, playerID interface{}) *MockStorer_ToggleVotingIsReady_Call {
	return &MockStorer_ToggleVotingIsReady_Call{Call: _e.mock.On("ToggleVotingIsReady", ctx, playerID)}
}

func (_c *MockStorer_ToggleVotingIsReady_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockStorer_ToggleVotingIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStorer_ToggleVotingIsReady_Call) Return(_a0 db.FibbingItVote, _a1 error) *MockStorer_ToggleVotingIsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_ToggleVotingIsReady_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.FibbingItVote, error)) *MockStorer_ToggleVotingIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAvatar provides a mock function with given fields: ctx, arg
func (_m *MockStorer) UpdateAvatar(ctx context.Context, arg db.UpdateAvatarParams) (db.Player, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 db.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAvatarParams) (db.Player, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAvatarParams) db.Player); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateAvatarParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpdateAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAvatar'
type MockStorer_UpdateAvatar_Call struct {
	*mock.Call
}

// UpdateAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateAvatarParams
func (_e *MockStorer_Expecter) UpdateAvatar(ctx interface{}, arg interface{}) *MockStorer_UpdateAvatar_Call {
	return &MockStorer_UpdateAvatar_Call{Call: _e.mock.On("UpdateAvatar", ctx, arg)}
}

func (_c *MockStorer_UpdateAvatar_Call) Run(run func(ctx context.Context, arg db.UpdateAvatarParams)) *MockStorer_UpdateAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateAvatarParams))
	})
	return _c
}

func (_c *MockStorer_UpdateAvatar_Call) Return(_a0 db.Player, _a1 error) *MockStorer_UpdateAvatar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_UpdateAvatar_Call) RunAndReturn(run func(context.Context, db.UpdateAvatarParams) (db.Player, error)) *MockStorer_UpdateAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGameState provides a mock function with given fields: ctx, arg
func (_m *MockStorer) UpdateGameState(ctx context.Context, arg db.UpdateGameStateParams) (db.GameState, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGameState")
	}

	var r0 db.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateGameStateParams) (db.GameState, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateGameStateParams) db.GameState); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.GameState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateGameStateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpdateGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGameState'
type MockStorer_UpdateGameState_Call struct {
	*mock.Call
}

// UpdateGameState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateGameStateParams
func (_e *MockStorer_Expecter) UpdateGameState(ctx interface{}, arg interface{}) *MockStorer_UpdateGameState_Call {
	return &MockStorer_UpdateGameState_Call{Call: _e.mock.On("UpdateGameState", ctx, arg)}
}

func (_c *MockStorer_UpdateGameState_Call) Run(run func(ctx context.Context, arg db.UpdateGameStateParams)) *MockStorer_UpdateGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateGameStateParams))
	})
	return _c
}

func (_c *MockStorer_UpdateGameState_Call) Return(_a0 db.GameState, _a1 error) *MockStorer_UpdateGameState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_UpdateGameState_Call) RunAndReturn(run func(context.Context, db.UpdateGameStateParams) (db.GameState, error)) *MockStorer_UpdateGameState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocale provides a mock function with given fields: ctx, arg
func (_m *MockStorer) UpdateLocale(ctx context.Context, arg db.UpdateLocaleParams) (db.Player, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocale")
	}

	var r0 db.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateLocaleParams) (db.Player, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateLocaleParams) db.Player); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateLocaleParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpdateLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocale'
type MockStorer_UpdateLocale_Call struct {
	*mock.Call
}

// UpdateLocale is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateLocaleParams
func (_e *MockStorer_Expecter) UpdateLocale(ctx interface{}, arg interface{}) *MockStorer_UpdateLocale_Call {
	return &MockStorer_UpdateLocale_Call{Call: _e.mock.On("UpdateLocale", ctx, arg)}
}

func (_c *MockStorer_UpdateLocale_Call) Run(run func(ctx context.Context, arg db.UpdateLocaleParams)) *MockStorer_UpdateLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateLocaleParams))
	})
	return _c
}

func (_c *MockStorer_UpdateLocale_Call) Return(_a0 db.Player, _a1 error) *MockStorer_UpdateLocale_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_UpdateLocale_Call) RunAndReturn(run func(context.Context, db.UpdateLocaleParams) (db.Player, error)) *MockStorer_UpdateLocale_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNickname provides a mock function with given fields: ctx, arg
func (_m *MockStorer) UpdateNickname(ctx context.Context, arg db.UpdateNicknameParams) (db.Player, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNickname")
	}

	var r0 db.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateNicknameParams) (db.Player, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateNicknameParams) db.Player); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Player)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateNicknameParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpdateNickname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNickname'
type MockStorer_UpdateNickname_Call struct {
	*mock.Call
}

// UpdateNickname is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateNicknameParams
func (_e *MockStorer_Expecter) UpdateNickname(ctx interface{}, arg interface{}) *MockStorer_UpdateNickname_Call {
	return &MockStorer_UpdateNickname_Call{Call: _e.mock.On("UpdateNickname", ctx, arg)}
}

func (_c *MockStorer_UpdateNickname_Call) Run(run func(ctx context.Context, arg db.UpdateNicknameParams)) *MockStorer_UpdateNickname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateNicknameParams))
	})
	return _c
}

func (_c *MockStorer_UpdateNickname_Call) Return(_a0 db.Player, _a1 error) *MockStorer_UpdateNickname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_UpdateNickname_Call) RunAndReturn(run func(context.Context, db.UpdateNicknameParams) (db.Player, error)) *MockStorer_UpdateNickname_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoomState provides a mock function with given fields: ctx, arg
func (_m *MockStorer) UpdateRoomState(ctx context.Context, arg db.UpdateRoomStateParams) (db.Room, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoomState")
	}

	var r0 db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateRoomStateParams) (db.Room, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateRoomStateParams) db.Room); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateRoomStateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpdateRoomState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoomState'
type MockStorer_UpdateRoomState_Call struct {
	*mock.Call
}

// UpdateRoomState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateRoomStateParams
func (_e *MockStorer_Expecter) UpdateRoomState(ctx interface{}, arg interface{}) *MockStorer_UpdateRoomState_Call {
	return &MockStorer_UpdateRoomState_Call{Call: _e.mock.On("UpdateRoomState", ctx, arg)}
}

func (_c *MockStorer_UpdateRoomState_Call) Run(run func(ctx context.Context, arg db.UpdateRoomStateParams)) *MockStorer_UpdateRoomState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateRoomStateParams))
	})
	return _c
}

func (_c *MockStorer_UpdateRoomState_Call) Return(_a0 db.Room, _a1 error) *MockStorer_UpdateRoomState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_UpdateRoomState_Call) RunAndReturn(run func(context.Context, db.UpdateRoomStateParams) (db.Room, error)) *MockStorer_UpdateRoomState_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertFibbingItVote provides a mock function with given fields: ctx, arg
func (_m *MockStorer) UpsertFibbingItVote(ctx context.Context, arg db.UpsertFibbingItVoteParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertFibbingItVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpsertFibbingItVoteParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_UpsertFibbingItVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertFibbingItVote'
type MockStorer_UpsertFibbingItVote_Call struct {
	*mock.Call
}

// UpsertFibbingItVote is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpsertFibbingItVoteParams
func (_e *MockStorer_Expecter) UpsertFibbingItVote(ctx interface{}, arg interface{}) *MockStorer_UpsertFibbingItVote_Call {
	return &MockStorer_UpsertFibbingItVote_Call{Call: _e.mock.On("UpsertFibbingItVote", ctx, arg)}
}

func (_c *MockStorer_UpsertFibbingItVote_Call) Run(run func(ctx context.Context, arg db.UpsertFibbingItVoteParams)) *MockStorer_UpsertFibbingItVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpsertFibbingItVoteParams))
	})
	return _c
}

func (_c *MockStorer_UpsertFibbingItVote_Call) Return(_a0 error) *MockStorer_UpsertFibbingItVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_UpsertFibbingItVote_Call) RunAndReturn(run func(context.Context, db.UpsertFibbingItVoteParams) error) *MockStorer_UpsertFibbingItVote_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertQuestionsGroup provides a mock function with given fields: ctx, arg
func (_m *MockStorer) UpsertQuestionsGroup(ctx context.Context, arg db.UpsertQuestionsGroupParams) (db.QuestionsGroup, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertQuestionsGroup")
	}

	var r0 db.QuestionsGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpsertQuestionsGroupParams) (db.QuestionsGroup, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpsertQuestionsGroupParams) db.QuestionsGroup); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.QuestionsGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpsertQuestionsGroupParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorer_UpsertQuestionsGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertQuestionsGroup'
type MockStorer_UpsertQuestionsGroup_Call struct {
	*mock.Call
}

// UpsertQuestionsGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpsertQuestionsGroupParams
func (_e *MockStorer_Expecter) UpsertQuestionsGroup(ctx interface{}, arg interface{}) *MockStorer_UpsertQuestionsGroup_Call {
	return &MockStorer_UpsertQuestionsGroup_Call{Call: _e.mock.On("UpsertQuestionsGroup", ctx, arg)}
}

func (_c *MockStorer_UpsertQuestionsGroup_Call) Run(run func(ctx context.Context, arg db.UpsertQuestionsGroupParams)) *MockStorer_UpsertQuestionsGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpsertQuestionsGroupParams))
	})
	return _c
}

func (_c *MockStorer_UpsertQuestionsGroup_Call) Return(_a0 db.QuestionsGroup, _a1 error) *MockStorer_UpsertQuestionsGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorer_UpsertQuestionsGroup_Call) RunAndReturn(run func(context.Context, db.UpsertQuestionsGroupParams) (db.QuestionsGroup, error)) *MockStorer_UpsertQuestionsGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorer creates a new instance of MockStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorer {
	mock := &MockStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
