// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/store/db"
)

// NewMockRoundStore creates a new instance of MockRoundStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoundStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoundStore {
	mock := &MockRoundStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoundStore is an autogenerated mock type for the RoundStore type
type MockRoundStore struct {
	mock.Mock
}

type MockRoundStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoundStore) EXPECT() *MockRoundStore_Expecter {
	return &MockRoundStore_Expecter{mock: &_m.Mock}
}

// CountTotalRoundsByGameStateID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) CountTotalRoundsByGameStateID(ctx context.Context, gameStateID uuid.UUID) (int64, error) {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for CountTotalRoundsByGameStateID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return returnFunc(ctx, gameStateID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_CountTotalRoundsByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountTotalRoundsByGameStateID'
type MockRoundStore_CountTotalRoundsByGameStateID_Call struct {
	*mock.Call
}

// CountTotalRoundsByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
func (_e *MockRoundStore_Expecter) CountTotalRoundsByGameStateID(ctx interface{}, gameStateID interface{}) *MockRoundStore_CountTotalRoundsByGameStateID_Call {
	return &MockRoundStore_CountTotalRoundsByGameStateID_Call{Call: _e.mock.On("CountTotalRoundsByGameStateID", ctx, gameStateID)}
}

func (_c *MockRoundStore_CountTotalRoundsByGameStateID_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID)) *MockRoundStore_CountTotalRoundsByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_CountTotalRoundsByGameStateID_Call) Return(n int64, err error) *MockRoundStore_CountTotalRoundsByGameStateID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRoundStore_CountTotalRoundsByGameStateID_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID) (int64, error)) *MockRoundStore_CountTotalRoundsByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayerAnswerIsReady provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllPlayerAnswerIsReady(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayerAnswerIsReady")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllPlayerAnswerIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayerAnswerIsReady'
type MockRoundStore_GetAllPlayerAnswerIsReady_Call struct {
	*mock.Call
}

// GetAllPlayerAnswerIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllPlayerAnswerIsReady(ctx interface{}, id interface{}) *MockRoundStore_GetAllPlayerAnswerIsReady_Call {
	return &MockRoundStore_GetAllPlayerAnswerIsReady_Call{Call: _e.mock.On("GetAllPlayerAnswerIsReady", ctx, id)}
}

func (_c *MockRoundStore_GetAllPlayerAnswerIsReady_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetAllPlayerAnswerIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllPlayerAnswerIsReady_Call) Return(b bool, err error) *MockRoundStore_GetAllPlayerAnswerIsReady_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRoundStore_GetAllPlayerAnswerIsReady_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (bool, error)) *MockRoundStore_GetAllPlayerAnswerIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayerAnswerIsReadyByPlayerID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllPlayerAnswerIsReadyByPlayerID(ctx context.Context, playerID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayerAnswerIsReadyByPlayerID")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayerAnswerIsReadyByPlayerID'
type MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call struct {
	*mock.Call
}

// GetAllPlayerAnswerIsReadyByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllPlayerAnswerIsReadyByPlayerID(ctx interface{}, playerID interface{}) *MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call {
	return &MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call{Call: _e.mock.On("GetAllPlayerAnswerIsReadyByPlayerID", ctx, playerID)}
}

func (_c *MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call) Return(b bool, err error) *MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (bool, error)) *MockRoundStore_GetAllPlayerAnswerIsReadyByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersByGameStateID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllPlayersByGameStateID(ctx context.Context, id uuid.UUID) ([]db.GetAllPlayersByGameStateIDRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersByGameStateID")
	}

	var r0 []db.GetAllPlayersByGameStateIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllPlayersByGameStateIDRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllPlayersByGameStateIDRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayersByGameStateIDRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllPlayersByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersByGameStateID'
type MockRoundStore_GetAllPlayersByGameStateID_Call struct {
	*mock.Call
}

// GetAllPlayersByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllPlayersByGameStateID(ctx interface{}, id interface{}) *MockRoundStore_GetAllPlayersByGameStateID_Call {
	return &MockRoundStore_GetAllPlayersByGameStateID_Call{Call: _e.mock.On("GetAllPlayersByGameStateID", ctx, id)}
}

func (_c *MockRoundStore_GetAllPlayersByGameStateID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetAllPlayersByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllPlayersByGameStateID_Call) Return(getAllPlayersByGameStateIDRows []db.GetAllPlayersByGameStateIDRow, err error) *MockRoundStore_GetAllPlayersByGameStateID_Call {
	_c.Call.Return(getAllPlayersByGameStateIDRows, err)
	return _c
}

func (_c *MockRoundStore_GetAllPlayersByGameStateID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) ([]db.GetAllPlayersByGameStateIDRow, error)) *MockRoundStore_GetAllPlayersByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersInRoom provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllPlayersInRoom(ctx context.Context, playerID uuid.UUID) ([]db.GetAllPlayersInRoomRow, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersInRoom")
	}

	var r0 []db.GetAllPlayersInRoomRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllPlayersInRoomRow); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayersInRoomRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllPlayersInRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersInRoom'
type MockRoundStore_GetAllPlayersInRoom_Call struct {
	*mock.Call
}

// GetAllPlayersInRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllPlayersInRoom(ctx interface{}, playerID interface{}) *MockRoundStore_GetAllPlayersInRoom_Call {
	return &MockRoundStore_GetAllPlayersInRoom_Call{Call: _e.mock.On("GetAllPlayersInRoom", ctx, playerID)}
}

func (_c *MockRoundStore_GetAllPlayersInRoom_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_GetAllPlayersInRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllPlayersInRoom_Call) Return(getAllPlayersInRoomRows []db.GetAllPlayersInRoomRow, err error) *MockRoundStore_GetAllPlayersInRoom_Call {
	_c.Call.Return(getAllPlayersInRoomRows, err)
	return _c
}

func (_c *MockRoundStore_GetAllPlayersInRoom_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)) *MockRoundStore_GetAllPlayersInRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersQuestionStateByGameStateID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllPlayersQuestionStateByGameStateID(ctx context.Context, id uuid.UUID) ([]db.GetAllPlayersQuestionStateByGameStateIDRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersQuestionStateByGameStateID")
	}

	var r0 []db.GetAllPlayersQuestionStateByGameStateIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllPlayersQuestionStateByGameStateIDRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllPlayersQuestionStateByGameStateIDRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayersQuestionStateByGameStateIDRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersQuestionStateByGameStateID'
type MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call struct {
	*mock.Call
}

// GetAllPlayersQuestionStateByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllPlayersQuestionStateByGameStateID(ctx interface{}, id interface{}) *MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call {
	return &MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call{Call: _e.mock.On("GetAllPlayersQuestionStateByGameStateID", ctx, id)}
}

func (_c *MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call) Return(getAllPlayersQuestionStateByGameStateIDRows []db.GetAllPlayersQuestionStateByGameStateIDRow, err error) *MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call {
	_c.Call.Return(getAllPlayersQuestionStateByGameStateIDRows, err)
	return _c
}

func (_c *MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) ([]db.GetAllPlayersQuestionStateByGameStateIDRow, error)) *MockRoundStore_GetAllPlayersQuestionStateByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersVotingIsReady provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllPlayersVotingIsReady(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersVotingIsReady")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllPlayersVotingIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersVotingIsReady'
type MockRoundStore_GetAllPlayersVotingIsReady_Call struct {
	*mock.Call
}

// GetAllPlayersVotingIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllPlayersVotingIsReady(ctx interface{}, id interface{}) *MockRoundStore_GetAllPlayersVotingIsReady_Call {
	return &MockRoundStore_GetAllPlayersVotingIsReady_Call{Call: _e.mock.On("GetAllPlayersVotingIsReady", ctx, id)}
}

func (_c *MockRoundStore_GetAllPlayersVotingIsReady_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetAllPlayersVotingIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllPlayersVotingIsReady_Call) Return(b bool, err error) *MockRoundStore_GetAllPlayersVotingIsReady_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRoundStore_GetAllPlayersVotingIsReady_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (bool, error)) *MockRoundStore_GetAllPlayersVotingIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersVotingIsReadyByPlayerID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllPlayersVotingIsReadyByPlayerID(ctx context.Context, playerID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersVotingIsReadyByPlayerID")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersVotingIsReadyByPlayerID'
type MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call struct {
	*mock.Call
}

// GetAllPlayersVotingIsReadyByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllPlayersVotingIsReadyByPlayerID(ctx interface{}, playerID interface{}) *MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call {
	return &MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call{Call: _e.mock.On("GetAllPlayersVotingIsReadyByPlayerID", ctx, playerID)}
}

func (_c *MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call) Return(b bool, err error) *MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (bool, error)) *MockRoundStore_GetAllPlayersVotingIsReadyByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVotesForRoundByGameStateID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetAllVotesForRoundByGameStateID(ctx context.Context, gameStateID uuid.UUID) ([]db.GetAllVotesForRoundByGameStateIDRow, error) {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVotesForRoundByGameStateID")
	}

	var r0 []db.GetAllVotesForRoundByGameStateIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllVotesForRoundByGameStateIDRow, error)); ok {
		return returnFunc(ctx, gameStateID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllVotesForRoundByGameStateIDRow); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllVotesForRoundByGameStateIDRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetAllVotesForRoundByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVotesForRoundByGameStateID'
type MockRoundStore_GetAllVotesForRoundByGameStateID_Call struct {
	*mock.Call
}

// GetAllVotesForRoundByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
func (_e *MockRoundStore_Expecter) GetAllVotesForRoundByGameStateID(ctx interface{}, gameStateID interface{}) *MockRoundStore_GetAllVotesForRoundByGameStateID_Call {
	return &MockRoundStore_GetAllVotesForRoundByGameStateID_Call{Call: _e.mock.On("GetAllVotesForRoundByGameStateID", ctx, gameStateID)}
}

func (_c *MockRoundStore_GetAllVotesForRoundByGameStateID_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID)) *MockRoundStore_GetAllVotesForRoundByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetAllVotesForRoundByGameStateID_Call) Return(getAllVotesForRoundByGameStateIDRows []db.GetAllVotesForRoundByGameStateIDRow, err error) *MockRoundStore_GetAllVotesForRoundByGameStateID_Call {
	_c.Call.Return(getAllVotesForRoundByGameStateIDRows, err)
	return _c
}

func (_c *MockRoundStore_GetAllVotesForRoundByGameStateID_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID) ([]db.GetAllVotesForRoundByGameStateIDRow, error)) *MockRoundStore_GetAllVotesForRoundByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentQuestionByPlayerID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetCurrentQuestionByPlayerID(ctx context.Context, id uuid.UUID) (db.GetCurrentQuestionByPlayerIDRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentQuestionByPlayerID")
	}

	var r0 db.GetCurrentQuestionByPlayerIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetCurrentQuestionByPlayerIDRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetCurrentQuestionByPlayerIDRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.GetCurrentQuestionByPlayerIDRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetCurrentQuestionByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentQuestionByPlayerID'
type MockRoundStore_GetCurrentQuestionByPlayerID_Call struct {
	*mock.Call
}

// GetCurrentQuestionByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetCurrentQuestionByPlayerID(ctx interface{}, id interface{}) *MockRoundStore_GetCurrentQuestionByPlayerID_Call {
	return &MockRoundStore_GetCurrentQuestionByPlayerID_Call{Call: _e.mock.On("GetCurrentQuestionByPlayerID", ctx, id)}
}

func (_c *MockRoundStore_GetCurrentQuestionByPlayerID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetCurrentQuestionByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetCurrentQuestionByPlayerID_Call) Return(getCurrentQuestionByPlayerIDRow db.GetCurrentQuestionByPlayerIDRow, err error) *MockRoundStore_GetCurrentQuestionByPlayerID_Call {
	_c.Call.Return(getCurrentQuestionByPlayerIDRow, err)
	return _c
}

func (_c *MockRoundStore_GetCurrentQuestionByPlayerID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.GetCurrentQuestionByPlayerIDRow, error)) *MockRoundStore_GetCurrentQuestionByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFibberByRoundID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetFibberByRoundID(ctx context.Context, roundID uuid.UUID) (db.FibbingItPlayerRole, error) {
	ret := _mock.Called(ctx, roundID)

	if len(ret) == 0 {
		panic("no return value specified for GetFibberByRoundID")
	}

	var r0 db.FibbingItPlayerRole
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.FibbingItPlayerRole, error)); ok {
		return returnFunc(ctx, roundID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.FibbingItPlayerRole); ok {
		r0 = returnFunc(ctx, roundID)
	} else {
		r0 = ret.Get(0).(db.FibbingItPlayerRole)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, roundID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetFibberByRoundID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFibberByRoundID'
type MockRoundStore_GetFibberByRoundID_Call struct {
	*mock.Call
}

// GetFibberByRoundID is a helper method to define mock.On call
//   - ctx context.Context
//   - roundID uuid.UUID
func (_e *MockRoundStore_Expecter) GetFibberByRoundID(ctx interface{}, roundID interface{}) *MockRoundStore_GetFibberByRoundID_Call {
	return &MockRoundStore_GetFibberByRoundID_Call{Call: _e.mock.On("GetFibberByRoundID", ctx, roundID)}
}

func (_c *MockRoundStore_GetFibberByRoundID_Call) Run(run func(ctx context.Context, roundID uuid.UUID)) *MockRoundStore_GetFibberByRoundID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetFibberByRoundID_Call) Return(fibbingItPlayerRole db.FibbingItPlayerRole, err error) *MockRoundStore_GetFibberByRoundID_Call {
	_c.Call.Return(fibbingItPlayerRole, err)
	return _c
}

func (_c *MockRoundStore_GetFibberByRoundID_Call) RunAndReturn(run func(ctx context.Context, roundID uuid.UUID) (db.FibbingItPlayerRole, error)) *MockRoundStore_GetFibberByRoundID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameState provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetGameState(ctx context.Context, id uuid.UUID) (db.GameState, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGameState")
	}

	var r0 db.GameState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GameState, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GameState); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.GameState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameState'
type MockRoundStore_GetGameState_Call struct {
	*mock.Call
}

// GetGameState is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetGameState(ctx interface{}, id interface{}) *MockRoundStore_GetGameState_Call {
	return &MockRoundStore_GetGameState_Call{Call: _e.mock.On("GetGameState", ctx, id)}
}

func (_c *MockRoundStore_GetGameState_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetGameState_Call) Return(gameState db.GameState, err error) *MockRoundStore_GetGameState_Call {
	_c.Call.Return(gameState, err)
	return _c
}

func (_c *MockRoundStore_GetGameState_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.GameState, error)) *MockRoundStore_GetGameState_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameStateByPlayerID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetGameStateByPlayerID(ctx context.Context, playerID uuid.UUID) (db.GameState, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetGameStateByPlayerID")
	}

	var r0 db.GameState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GameState, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GameState); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.GameState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetGameStateByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameStateByPlayerID'
type MockRoundStore_GetGameStateByPlayerID_Call struct {
	*mock.Call
}

// GetGameStateByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) GetGameStateByPlayerID(ctx interface{}, playerID interface{}) *MockRoundStore_GetGameStateByPlayerID_Call {
	return &MockRoundStore_GetGameStateByPlayerID_Call{Call: _e.mock.On("GetGameStateByPlayerID", ctx, playerID)}
}

func (_c *MockRoundStore_GetGameStateByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_GetGameStateByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetGameStateByPlayerID_Call) Return(gameState db.GameState, err error) *MockRoundStore_GetGameStateByPlayerID_Call {
	_c.Call.Return(gameState, err)
	return _c
}

func (_c *MockRoundStore_GetGameStateByPlayerID_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.GameState, error)) *MockRoundStore_GetGameStateByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRoundByGameStateID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetLatestRoundByGameStateID(ctx context.Context, id uuid.UUID) (db.GetLatestRoundByGameStateIDRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRoundByGameStateID")
	}

	var r0 db.GetLatestRoundByGameStateIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetLatestRoundByGameStateIDRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetLatestRoundByGameStateIDRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.GetLatestRoundByGameStateIDRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetLatestRoundByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRoundByGameStateID'
type MockRoundStore_GetLatestRoundByGameStateID_Call struct {
	*mock.Call
}

// GetLatestRoundByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetLatestRoundByGameStateID(ctx interface{}, id interface{}) *MockRoundStore_GetLatestRoundByGameStateID_Call {
	return &MockRoundStore_GetLatestRoundByGameStateID_Call{Call: _e.mock.On("GetLatestRoundByGameStateID", ctx, id)}
}

func (_c *MockRoundStore_GetLatestRoundByGameStateID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetLatestRoundByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetLatestRoundByGameStateID_Call) Return(getLatestRoundByGameStateIDRow db.GetLatestRoundByGameStateIDRow, err error) *MockRoundStore_GetLatestRoundByGameStateID_Call {
	_c.Call.Return(getLatestRoundByGameStateIDRow, err)
	return _c
}

func (_c *MockRoundStore_GetLatestRoundByGameStateID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.GetLatestRoundByGameStateIDRow, error)) *MockRoundStore_GetLatestRoundByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRoundByPlayerID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetLatestRoundByPlayerID(ctx context.Context, playerID uuid.UUID) (db.GetLatestRoundByPlayerIDRow, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRoundByPlayerID")
	}

	var r0 db.GetLatestRoundByPlayerIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetLatestRoundByPlayerIDRow, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetLatestRoundByPlayerIDRow); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.GetLatestRoundByPlayerIDRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetLatestRoundByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRoundByPlayerID'
type MockRoundStore_GetLatestRoundByPlayerID_Call struct {
	*mock.Call
}

// GetLatestRoundByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) GetLatestRoundByPlayerID(ctx interface{}, playerID interface{}) *MockRoundStore_GetLatestRoundByPlayerID_Call {
	return &MockRoundStore_GetLatestRoundByPlayerID_Call{Call: _e.mock.On("GetLatestRoundByPlayerID", ctx, playerID)}
}

func (_c *MockRoundStore_GetLatestRoundByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_GetLatestRoundByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetLatestRoundByPlayerID_Call) Return(getLatestRoundByPlayerIDRow db.GetLatestRoundByPlayerIDRow, err error) *MockRoundStore_GetLatestRoundByPlayerID_Call {
	_c.Call.Return(getLatestRoundByPlayerIDRow, err)
	return _c
}

func (_c *MockRoundStore_GetLatestRoundByPlayerID_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.GetLatestRoundByPlayerIDRow, error)) *MockRoundStore_GetLatestRoundByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionWithLocalesById provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetQuestionWithLocalesById(ctx context.Context, id uuid.UUID) ([]db.GetQuestionWithLocalesByIdRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestionWithLocalesById")
	}

	var r0 []db.GetQuestionWithLocalesByIdRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetQuestionWithLocalesByIdRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetQuestionWithLocalesByIdRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetQuestionWithLocalesByIdRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetQuestionWithLocalesById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionWithLocalesById'
type MockRoundStore_GetQuestionWithLocalesById_Call struct {
	*mock.Call
}

// GetQuestionWithLocalesById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRoundStore_Expecter) GetQuestionWithLocalesById(ctx interface{}, id interface{}) *MockRoundStore_GetQuestionWithLocalesById_Call {
	return &MockRoundStore_GetQuestionWithLocalesById_Call{Call: _e.mock.On("GetQuestionWithLocalesById", ctx, id)}
}

func (_c *MockRoundStore_GetQuestionWithLocalesById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRoundStore_GetQuestionWithLocalesById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetQuestionWithLocalesById_Call) Return(getQuestionWithLocalesByIdRows []db.GetQuestionWithLocalesByIdRow, err error) *MockRoundStore_GetQuestionWithLocalesById_Call {
	_c.Call.Return(getQuestionWithLocalesByIdRows, err)
	return _c
}

func (_c *MockRoundStore_GetQuestionWithLocalesById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) ([]db.GetQuestionWithLocalesByIdRow, error)) *MockRoundStore_GetQuestionWithLocalesById_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomQuestionByRound provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetRandomQuestionByRound(ctx context.Context, arg db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomQuestionByRound")
	}

	var r0 []db.GetRandomQuestionByRoundRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionByRoundParams) []db.GetRandomQuestionByRoundRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetRandomQuestionByRoundRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetRandomQuestionByRoundParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetRandomQuestionByRound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomQuestionByRound'
type MockRoundStore_GetRandomQuestionByRound_Call struct {
	*mock.Call
}

// GetRandomQuestionByRound is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetRandomQuestionByRoundParams
func (_e *MockRoundStore_Expecter) GetRandomQuestionByRound(ctx interface{}, arg interface{}) *MockRoundStore_GetRandomQuestionByRound_Call {
	return &MockRoundStore_GetRandomQuestionByRound_Call{Call: _e.mock.On("GetRandomQuestionByRound", ctx, arg)}
}

func (_c *MockRoundStore_GetRandomQuestionByRound_Call) Run(run func(ctx context.Context, arg db.GetRandomQuestionByRoundParams)) *MockRoundStore_GetRandomQuestionByRound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetRandomQuestionByRoundParams
		if args[1] != nil {
			arg1 = args[1].(db.GetRandomQuestionByRoundParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetRandomQuestionByRound_Call) Return(getRandomQuestionByRoundRows []db.GetRandomQuestionByRoundRow, err error) *MockRoundStore_GetRandomQuestionByRound_Call {
	_c.Call.Return(getRandomQuestionByRoundRows, err)
	return _c
}

func (_c *MockRoundStore_GetRandomQuestionByRound_Call) RunAndReturn(run func(ctx context.Context, arg db.GetRandomQuestionByRoundParams) ([]db.GetRandomQuestionByRoundRow, error)) *MockRoundStore_GetRandomQuestionByRound_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandomQuestionInGroup provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetRandomQuestionInGroup(ctx context.Context, arg db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomQuestionInGroup")
	}

	var r0 []db.GetRandomQuestionInGroupRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetRandomQuestionInGroupParams) []db.GetRandomQuestionInGroupRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetRandomQuestionInGroupRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetRandomQuestionInGroupParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetRandomQuestionInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomQuestionInGroup'
type MockRoundStore_GetRandomQuestionInGroup_Call struct {
	*mock.Call
}

// GetRandomQuestionInGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetRandomQuestionInGroupParams
func (_e *MockRoundStore_Expecter) GetRandomQuestionInGroup(ctx interface{}, arg interface{}) *MockRoundStore_GetRandomQuestionInGroup_Call {
	return &MockRoundStore_GetRandomQuestionInGroup_Call{Call: _e.mock.On("GetRandomQuestionInGroup", ctx, arg)}
}

func (_c *MockRoundStore_GetRandomQuestionInGroup_Call) Run(run func(ctx context.Context, arg db.GetRandomQuestionInGroupParams)) *MockRoundStore_GetRandomQuestionInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetRandomQuestionInGroupParams
		if args[1] != nil {
			arg1 = args[1].(db.GetRandomQuestionInGroupParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetRandomQuestionInGroup_Call) Return(getRandomQuestionInGroupRows []db.GetRandomQuestionInGroupRow, err error) *MockRoundStore_GetRandomQuestionInGroup_Call {
	_c.Call.Return(getRandomQuestionInGroupRows, err)
	return _c
}

func (_c *MockRoundStore_GetRandomQuestionInGroup_Call) RunAndReturn(run func(ctx context.Context, arg db.GetRandomQuestionInGroupParams) ([]db.GetRandomQuestionInGroupRow, error)) *MockRoundStore_GetRandomQuestionInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomByPlayerID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetRoomByPlayerID(ctx context.Context, playerID uuid.UUID) (db.Room, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomByPlayerID")
	}

	var r0 db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Room, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Room); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.Room)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetRoomByPlayerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomByPlayerID'
type MockRoundStore_GetRoomByPlayerID_Call struct {
	*mock.Call
}

// GetRoomByPlayerID is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) GetRoomByPlayerID(ctx interface{}, playerID interface{}) *MockRoundStore_GetRoomByPlayerID_Call {
	return &MockRoundStore_GetRoomByPlayerID_Call{Call: _e.mock.On("GetRoomByPlayerID", ctx, playerID)}
}

func (_c *MockRoundStore_GetRoomByPlayerID_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_GetRoomByPlayerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetRoomByPlayerID_Call) Return(room db.Room, err error) *MockRoundStore_GetRoomByPlayerID_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockRoundStore_GetRoomByPlayerID_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.Room, error)) *MockRoundStore_GetRoomByPlayerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalScoresByGameStateID provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetTotalScoresByGameStateID(ctx context.Context, arg db.GetTotalScoresByGameStateIDParams) ([]db.GetTotalScoresByGameStateIDRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalScoresByGameStateID")
	}

	var r0 []db.GetTotalScoresByGameStateIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetTotalScoresByGameStateIDParams) ([]db.GetTotalScoresByGameStateIDRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetTotalScoresByGameStateIDParams) []db.GetTotalScoresByGameStateIDRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetTotalScoresByGameStateIDRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetTotalScoresByGameStateIDParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetTotalScoresByGameStateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalScoresByGameStateID'
type MockRoundStore_GetTotalScoresByGameStateID_Call struct {
	*mock.Call
}

// GetTotalScoresByGameStateID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetTotalScoresByGameStateIDParams
func (_e *MockRoundStore_Expecter) GetTotalScoresByGameStateID(ctx interface{}, arg interface{}) *MockRoundStore_GetTotalScoresByGameStateID_Call {
	return &MockRoundStore_GetTotalScoresByGameStateID_Call{Call: _e.mock.On("GetTotalScoresByGameStateID", ctx, arg)}
}

func (_c *MockRoundStore_GetTotalScoresByGameStateID_Call) Run(run func(ctx context.Context, arg db.GetTotalScoresByGameStateIDParams)) *MockRoundStore_GetTotalScoresByGameStateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetTotalScoresByGameStateIDParams
		if args[1] != nil {
			arg1 = args[1].(db.GetTotalScoresByGameStateIDParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetTotalScoresByGameStateID_Call) Return(getTotalScoresByGameStateIDRows []db.GetTotalScoresByGameStateIDRow, err error) *MockRoundStore_GetTotalScoresByGameStateID_Call {
	_c.Call.Return(getTotalScoresByGameStateIDRows, err)
	return _c
}

func (_c *MockRoundStore_GetTotalScoresByGameStateID_Call) RunAndReturn(run func(ctx context.Context, arg db.GetTotalScoresByGameStateIDParams) ([]db.GetTotalScoresByGameStateIDRow, error)) *MockRoundStore_GetTotalScoresByGameStateID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVotingState provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) GetVotingState(ctx context.Context, roundID uuid.UUID) ([]db.GetVotingStateRow, error) {
	ret := _mock.Called(ctx, roundID)

	if len(ret) == 0 {
		panic("no return value specified for GetVotingState")
	}

	var r0 []db.GetVotingStateRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetVotingStateRow, error)); ok {
		return returnFunc(ctx, roundID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetVotingStateRow); ok {
		r0 = returnFunc(ctx, roundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetVotingStateRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, roundID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_GetVotingState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotingState'
type MockRoundStore_GetVotingState_Call struct {
	*mock.Call
}

// GetVotingState is a helper method to define mock.On call
//   - ctx context.Context
//   - roundID uuid.UUID
func (_e *MockRoundStore_Expecter) GetVotingState(ctx interface{}, roundID interface{}) *MockRoundStore_GetVotingState_Call {
	return &MockRoundStore_GetVotingState_Call{Call: _e.mock.On("GetVotingState", ctx, roundID)}
}

func (_c *MockRoundStore_GetVotingState_Call) Run(run func(ctx context.Context, roundID uuid.UUID)) *MockRoundStore_GetVotingState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_GetVotingState_Call) Return(getVotingStateRows []db.GetVotingStateRow, err error) *MockRoundStore_GetVotingState_Call {
	_c.Call.Return(getVotingStateRows, err)
	return _c
}

func (_c *MockRoundStore_GetVotingState_Call) RunAndReturn(run func(ctx context.Context, roundID uuid.UUID) ([]db.GetVotingStateRow, error)) *MockRoundStore_GetVotingState_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleAnswerIsReady provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) ToggleAnswerIsReady(ctx context.Context, playerID uuid.UUID) (db.FibbingItAnswer, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for ToggleAnswerIsReady")
	}

	var r0 db.FibbingItAnswer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.FibbingItAnswer, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.FibbingItAnswer); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.FibbingItAnswer)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_ToggleAnswerIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleAnswerIsReady'
type MockRoundStore_ToggleAnswerIsReady_Call struct {
	*mock.Call
}

// ToggleAnswerIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) ToggleAnswerIsReady(ctx interface{}, playerID interface{}) *MockRoundStore_ToggleAnswerIsReady_Call {
	return &MockRoundStore_ToggleAnswerIsReady_Call{Call: _e.mock.On("ToggleAnswerIsReady", ctx, playerID)}
}

func (_c *MockRoundStore_ToggleAnswerIsReady_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_ToggleAnswerIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_ToggleAnswerIsReady_Call) Return(fibbingItAnswer db.FibbingItAnswer, err error) *MockRoundStore_ToggleAnswerIsReady_Call {
	_c.Call.Return(fibbingItAnswer, err)
	return _c
}

func (_c *MockRoundStore_ToggleAnswerIsReady_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.FibbingItAnswer, error)) *MockRoundStore_ToggleAnswerIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleVotingIsReady provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) ToggleVotingIsReady(ctx context.Context, playerID uuid.UUID) (db.FibbingItVote, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for ToggleVotingIsReady")
	}

	var r0 db.FibbingItVote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.FibbingItVote, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.FibbingItVote); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.FibbingItVote)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_ToggleVotingIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleVotingIsReady'
type MockRoundStore_ToggleVotingIsReady_Call struct {
	*mock.Call
}

// ToggleVotingIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRoundStore_Expecter) ToggleVotingIsReady(ctx interface{}, playerID interface{}) *MockRoundStore_ToggleVotingIsReady_Call {
	return &MockRoundStore_ToggleVotingIsReady_Call{Call: _e.mock.On("ToggleVotingIsReady", ctx, playerID)}
}

func (_c *MockRoundStore_ToggleVotingIsReady_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRoundStore_ToggleVotingIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_ToggleVotingIsReady_Call) Return(fibbingItVote db.FibbingItVote, err error) *MockRoundStore_ToggleVotingIsReady_Call {
	_c.Call.Return(fibbingItVote, err)
	return _c
}

func (_c *MockRoundStore_ToggleVotingIsReady_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.FibbingItVote, error)) *MockRoundStore_ToggleVotingIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGameState provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpdateGameState(ctx context.Context, arg db.UpdateGameStateParams) (db.GameState, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGameState")
	}

	var r0 db.GameState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateGameStateParams) (db.GameState, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateGameStateParams) db.GameState); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.GameState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateGameStateParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_UpdateGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGameState'
type MockRoundStore_UpdateGameState_Call struct {
	*mock.Call
}

// UpdateGameState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateGameStateParams
func (_e *MockRoundStore_Expecter) UpdateGameState(ctx interface{}, arg interface{}) *MockRoundStore_UpdateGameState_Call {
	return &MockRoundStore_UpdateGameState_Call{Call: _e.mock.On("UpdateGameState", ctx, arg)}
}

func (_c *MockRoundStore_UpdateGameState_Call) Run(run func(ctx context.Context, arg db.UpdateGameStateParams)) *MockRoundStore_UpdateGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateGameStateParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateGameStateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpdateGameState_Call) Return(gameState db.GameState, err error) *MockRoundStore_UpdateGameState_Call {
	_c.Call.Return(gameState, err)
	return _c
}

func (_c *MockRoundStore_UpdateGameState_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateGameStateParams) (db.GameState, error)) *MockRoundStore_UpdateGameState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoomState provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpdateRoomState(ctx context.Context, arg db.UpdateRoomStateParams) (db.Room, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoomState")
	}

	var r0 db.Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateRoomStateParams) (db.Room, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateRoomStateParams) db.Room); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Room)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateRoomStateParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_UpdateRoomState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoomState'
type MockRoundStore_UpdateRoomState_Call struct {
	*mock.Call
}

// UpdateRoomState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateRoomStateParams
func (_e *MockRoundStore_Expecter) UpdateRoomState(ctx interface{}, arg interface{}) *MockRoundStore_UpdateRoomState_Call {
	return &MockRoundStore_UpdateRoomState_Call{Call: _e.mock.On("UpdateRoomState", ctx, arg)}
}

func (_c *MockRoundStore_UpdateRoomState_Call) Run(run func(ctx context.Context, arg db.UpdateRoomStateParams)) *MockRoundStore_UpdateRoomState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateRoomStateParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateRoomStateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpdateRoomState_Call) Return(room db.Room, err error) *MockRoundStore_UpdateRoomState_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockRoundStore_UpdateRoomState_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateRoomStateParams) (db.Room, error)) *MockRoundStore_UpdateRoomState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToQuestion provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpdateStateToQuestion(ctx context.Context, arg db.UpdateStateToQuestionArgs) (db.UpdateStateToQuestionResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToQuestion")
	}

	var r0 db.UpdateStateToQuestionResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToQuestionArgs) (db.UpdateStateToQuestionResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToQuestionArgs) db.UpdateStateToQuestionResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.UpdateStateToQuestionResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateStateToQuestionArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_UpdateStateToQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToQuestion'
type MockRoundStore_UpdateStateToQuestion_Call struct {
	*mock.Call
}

// UpdateStateToQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStateToQuestionArgs
func (_e *MockRoundStore_Expecter) UpdateStateToQuestion(ctx interface{}, arg interface{}) *MockRoundStore_UpdateStateToQuestion_Call {
	return &MockRoundStore_UpdateStateToQuestion_Call{Call: _e.mock.On("UpdateStateToQuestion", ctx, arg)}
}

func (_c *MockRoundStore_UpdateStateToQuestion_Call) Run(run func(ctx context.Context, arg db.UpdateStateToQuestionArgs)) *MockRoundStore_UpdateStateToQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateStateToQuestionArgs
		if args[1] != nil {
			arg1 = args[1].(db.UpdateStateToQuestionArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpdateStateToQuestion_Call) Return(updateStateToQuestionResult db.UpdateStateToQuestionResult, err error) *MockRoundStore_UpdateStateToQuestion_Call {
	_c.Call.Return(updateStateToQuestionResult, err)
	return _c
}

func (_c *MockRoundStore_UpdateStateToQuestion_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateStateToQuestionArgs) (db.UpdateStateToQuestionResult, error)) *MockRoundStore_UpdateStateToQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToReveal provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpdateStateToReveal(ctx context.Context, arg db.UpdateStateToRevealArgs) (db.UpdateStateToRevealResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToReveal")
	}

	var r0 db.UpdateStateToRevealResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToRevealArgs) (db.UpdateStateToRevealResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToRevealArgs) db.UpdateStateToRevealResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.UpdateStateToRevealResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateStateToRevealArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_UpdateStateToReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToReveal'
type MockRoundStore_UpdateStateToReveal_Call struct {
	*mock.Call
}

// UpdateStateToReveal is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStateToRevealArgs
func (_e *MockRoundStore_Expecter) UpdateStateToReveal(ctx interface{}, arg interface{}) *MockRoundStore_UpdateStateToReveal_Call {
	return &MockRoundStore_UpdateStateToReveal_Call{Call: _e.mock.On("UpdateStateToReveal", ctx, arg)}
}

func (_c *MockRoundStore_UpdateStateToReveal_Call) Run(run func(ctx context.Context, arg db.UpdateStateToRevealArgs)) *MockRoundStore_UpdateStateToReveal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateStateToRevealArgs
		if args[1] != nil {
			arg1 = args[1].(db.UpdateStateToRevealArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpdateStateToReveal_Call) Return(updateStateToRevealResult db.UpdateStateToRevealResult, err error) *MockRoundStore_UpdateStateToReveal_Call {
	_c.Call.Return(updateStateToRevealResult, err)
	return _c
}

func (_c *MockRoundStore_UpdateStateToReveal_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateStateToRevealArgs) (db.UpdateStateToRevealResult, error)) *MockRoundStore_UpdateStateToReveal_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToScore provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpdateStateToScore(ctx context.Context, arg db.UpdateStateToScoreArgs) (db.UpdateStateToScoreResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToScore")
	}

	var r0 db.UpdateStateToScoreResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToScoreArgs) (db.UpdateStateToScoreResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToScoreArgs) db.UpdateStateToScoreResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.UpdateStateToScoreResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateStateToScoreArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_UpdateStateToScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToScore'
type MockRoundStore_UpdateStateToScore_Call struct {
	*mock.Call
}

// UpdateStateToScore is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStateToScoreArgs
func (_e *MockRoundStore_Expecter) UpdateStateToScore(ctx interface{}, arg interface{}) *MockRoundStore_UpdateStateToScore_Call {
	return &MockRoundStore_UpdateStateToScore_Call{Call: _e.mock.On("UpdateStateToScore", ctx, arg)}
}

func (_c *MockRoundStore_UpdateStateToScore_Call) Run(run func(ctx context.Context, arg db.UpdateStateToScoreArgs)) *MockRoundStore_UpdateStateToScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateStateToScoreArgs
		if args[1] != nil {
			arg1 = args[1].(db.UpdateStateToScoreArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpdateStateToScore_Call) Return(updateStateToScoreResult db.UpdateStateToScoreResult, err error) *MockRoundStore_UpdateStateToScore_Call {
	_c.Call.Return(updateStateToScoreResult, err)
	return _c
}

func (_c *MockRoundStore_UpdateStateToScore_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateStateToScoreArgs) (db.UpdateStateToScoreResult, error)) *MockRoundStore_UpdateStateToScore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToVoting provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpdateStateToVoting(ctx context.Context, arg db.UpdateStateToVotingArgs) (db.UpdateStateToVotingResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToVoting")
	}

	var r0 db.UpdateStateToVotingResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToVotingArgs) (db.UpdateStateToVotingResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStateToVotingArgs) db.UpdateStateToVotingResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.UpdateStateToVotingResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateStateToVotingArgs) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_UpdateStateToVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToVoting'
type MockRoundStore_UpdateStateToVoting_Call struct {
	*mock.Call
}

// UpdateStateToVoting is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStateToVotingArgs
func (_e *MockRoundStore_Expecter) UpdateStateToVoting(ctx interface{}, arg interface{}) *MockRoundStore_UpdateStateToVoting_Call {
	return &MockRoundStore_UpdateStateToVoting_Call{Call: _e.mock.On("UpdateStateToVoting", ctx, arg)}
}

func (_c *MockRoundStore_UpdateStateToVoting_Call) Run(run func(ctx context.Context, arg db.UpdateStateToVotingArgs)) *MockRoundStore_UpdateStateToVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateStateToVotingArgs
		if args[1] != nil {
			arg1 = args[1].(db.UpdateStateToVotingArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpdateStateToVoting_Call) Return(updateStateToVotingResult db.UpdateStateToVotingResult, err error) *MockRoundStore_UpdateStateToVoting_Call {
	_c.Call.Return(updateStateToVotingResult, err)
	return _c
}

func (_c *MockRoundStore_UpdateStateToVoting_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateStateToVotingArgs) (db.UpdateStateToVotingResult, error)) *MockRoundStore_UpdateStateToVoting_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertFibbingItAnswer provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpsertFibbingItAnswer(ctx context.Context, arg db.UpsertFibbingItAnswerParams) (db.FibbingItAnswer, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertFibbingItAnswer")
	}

	var r0 db.FibbingItAnswer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpsertFibbingItAnswerParams) (db.FibbingItAnswer, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpsertFibbingItAnswerParams) db.FibbingItAnswer); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.FibbingItAnswer)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpsertFibbingItAnswerParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundStore_UpsertFibbingItAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertFibbingItAnswer'
type MockRoundStore_UpsertFibbingItAnswer_Call struct {
	*mock.Call
}

// UpsertFibbingItAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpsertFibbingItAnswerParams
func (_e *MockRoundStore_Expecter) UpsertFibbingItAnswer(ctx interface{}, arg interface{}) *MockRoundStore_UpsertFibbingItAnswer_Call {
	return &MockRoundStore_UpsertFibbingItAnswer_Call{Call: _e.mock.On("UpsertFibbingItAnswer", ctx, arg)}
}

func (_c *MockRoundStore_UpsertFibbingItAnswer_Call) Run(run func(ctx context.Context, arg db.UpsertFibbingItAnswerParams)) *MockRoundStore_UpsertFibbingItAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpsertFibbingItAnswerParams
		if args[1] != nil {
			arg1 = args[1].(db.UpsertFibbingItAnswerParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpsertFibbingItAnswer_Call) Return(fibbingItAnswer db.FibbingItAnswer, err error) *MockRoundStore_UpsertFibbingItAnswer_Call {
	_c.Call.Return(fibbingItAnswer, err)
	return _c
}

func (_c *MockRoundStore_UpsertFibbingItAnswer_Call) RunAndReturn(run func(ctx context.Context, arg db.UpsertFibbingItAnswerParams) (db.FibbingItAnswer, error)) *MockRoundStore_UpsertFibbingItAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertFibbingItVote provides a mock function for the type MockRoundStore
func (_mock *MockRoundStore) UpsertFibbingItVote(ctx context.Context, arg db.UpsertFibbingItVoteParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertFibbingItVote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpsertFibbingItVoteParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoundStore_UpsertFibbingItVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertFibbingItVote'
type MockRoundStore_UpsertFibbingItVote_Call struct {
	*mock.Call
}

// UpsertFibbingItVote is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpsertFibbingItVoteParams
func (_e *MockRoundStore_Expecter) UpsertFibbingItVote(ctx interface{}, arg interface{}) *MockRoundStore_UpsertFibbingItVote_Call {
	return &MockRoundStore_UpsertFibbingItVote_Call{Call: _e.mock.On("UpsertFibbingItVote", ctx, arg)}
}

func (_c *MockRoundStore_UpsertFibbingItVote_Call) Run(run func(ctx context.Context, arg db.UpsertFibbingItVoteParams)) *MockRoundStore_UpsertFibbingItVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpsertFibbingItVoteParams
		if args[1] != nil {
			arg1 = args[1].(db.UpsertFibbingItVoteParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundStore_UpsertFibbingItVote_Call) Return(err error) *MockRoundStore_UpsertFibbingItVote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoundStore_UpsertFibbingItVote_Call) RunAndReturn(run func(ctx context.Context, arg db.UpsertFibbingItVoteParams) error) *MockRoundStore_UpsertFibbingItVote_Call {
	_c.Call.Return(run)
	return _c
}
