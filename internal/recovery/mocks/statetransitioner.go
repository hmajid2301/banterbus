// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package recovery

import (
	"context"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/statemachine"
)

// NewMockStateTransitioner creates a new instance of MockStateTransitioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateTransitioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateTransitioner {
	mock := &MockStateTransitioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStateTransitioner is an autogenerated mock type for the StateTransitioner type
type MockStateTransitioner struct {
	mock.Mock
}

type MockStateTransitioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateTransitioner) EXPECT() *MockStateTransitioner_Expecter {
	return &MockStateTransitioner_Expecter{mock: &_m.Mock}
}

// NewStateDependencies provides a mock function for the type MockStateTransitioner
func (_mock *MockStateTransitioner) NewStateDependencies() (*statemachine.StateDependencies, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewStateDependencies")
	}

	var r0 *statemachine.StateDependencies
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*statemachine.StateDependencies, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *statemachine.StateDependencies); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statemachine.StateDependencies)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStateTransitioner_NewStateDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStateDependencies'
type MockStateTransitioner_NewStateDependencies_Call struct {
	*mock.Call
}

// NewStateDependencies is a helper method to define mock.On call
func (_e *MockStateTransitioner_Expecter) NewStateDependencies() *MockStateTransitioner_NewStateDependencies_Call {
	return &MockStateTransitioner_NewStateDependencies_Call{Call: _e.mock.On("NewStateDependencies")}
}

func (_c *MockStateTransitioner_NewStateDependencies_Call) Run(run func()) *MockStateTransitioner_NewStateDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateTransitioner_NewStateDependencies_Call) Return(stateDependencies *statemachine.StateDependencies, err error) *MockStateTransitioner_NewStateDependencies_Call {
	_c.Call.Return(stateDependencies, err)
	return _c
}

func (_c *MockStateTransitioner_NewStateDependencies_Call) RunAndReturn(run func() (*statemachine.StateDependencies, error)) *MockStateTransitioner_NewStateDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// StartStateMachine provides a mock function for the type MockStateTransitioner
func (_mock *MockStateTransitioner) StartStateMachine(ctx context.Context, gameStateID uuid.UUID, state statemachine.State) {
	_mock.Called(ctx, gameStateID, state)
	return
}

// MockStateTransitioner_StartStateMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStateMachine'
type MockStateTransitioner_StartStateMachine_Call struct {
	*mock.Call
}

// StartStateMachine is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
//   - state statemachine.State
func (_e *MockStateTransitioner_Expecter) StartStateMachine(ctx interface{}, gameStateID interface{}, state interface{}) *MockStateTransitioner_StartStateMachine_Call {
	return &MockStateTransitioner_StartStateMachine_Call{Call: _e.mock.On("StartStateMachine", ctx, gameStateID, state)}
}

func (_c *MockStateTransitioner_StartStateMachine_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID, state statemachine.State)) *MockStateTransitioner_StartStateMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 statemachine.State
		if args[2] != nil {
			arg2 = args[2].(statemachine.State)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStateTransitioner_StartStateMachine_Call) Return() *MockStateTransitioner_StartStateMachine_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStateTransitioner_StartStateMachine_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID, state statemachine.State)) *MockStateTransitioner_StartStateMachine_Call {
	_c.Run(run)
	return _c
}
