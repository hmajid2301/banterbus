// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package recovery

import (
	"context"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMessagePublisher creates a new instance of MockMessagePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessagePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessagePublisher {
	mock := &MockMessagePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessagePublisher is an autogenerated mock type for the MessagePublisher type
type MockMessagePublisher struct {
	mock.Mock
}

type MockMessagePublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessagePublisher) EXPECT() *MockMessagePublisher_Expecter {
	return &MockMessagePublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockMessagePublisher
func (_mock *MockMessagePublisher) Publish(ctx context.Context, playerID uuid.UUID, message []byte) error {
	ret := _mock.Called(ctx, playerID, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []byte) error); ok {
		r0 = returnFunc(ctx, playerID, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessagePublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMessagePublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
//   - message []byte
func (_e *MockMessagePublisher_Expecter) Publish(ctx interface{}, playerID interface{}, message interface{}) *MockMessagePublisher_Publish_Call {
	return &MockMessagePublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, playerID, message)}
}

func (_c *MockMessagePublisher_Publish_Call) Run(run func(ctx context.Context, playerID uuid.UUID, message []byte)) *MockMessagePublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMessagePublisher_Publish_Call) Return(err error) *MockMessagePublisher_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessagePublisher_Publish_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID, message []byte) error) *MockMessagePublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}
