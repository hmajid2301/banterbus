// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package recovery

import (
	"context"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/store/db"
)

// NewMockRecoveryStore creates a new instance of MockRecoveryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecoveryStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecoveryStore {
	mock := &MockRecoveryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRecoveryStore is an autogenerated mock type for the RecoveryStore type
type MockRecoveryStore struct {
	mock.Mock
}

type MockRecoveryStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecoveryStore) EXPECT() *MockRecoveryStore_Expecter {
	return &MockRecoveryStore_Expecter{mock: &_m.Mock}
}

// GetActiveGames provides a mock function for the type MockRecoveryStore
func (_mock *MockRecoveryStore) GetActiveGames(ctx context.Context) ([]db.GetActiveGamesRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveGames")
	}

	var r0 []db.GetActiveGamesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.GetActiveGamesRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.GetActiveGamesRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetActiveGamesRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecoveryStore_GetActiveGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveGames'
type MockRecoveryStore_GetActiveGames_Call struct {
	*mock.Call
}

// GetActiveGames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRecoveryStore_Expecter) GetActiveGames(ctx interface{}) *MockRecoveryStore_GetActiveGames_Call {
	return &MockRecoveryStore_GetActiveGames_Call{Call: _e.mock.On("GetActiveGames", ctx)}
}

func (_c *MockRecoveryStore_GetActiveGames_Call) Run(run func(ctx context.Context)) *MockRecoveryStore_GetActiveGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRecoveryStore_GetActiveGames_Call) Return(getActiveGamesRows []db.GetActiveGamesRow, err error) *MockRecoveryStore_GetActiveGames_Call {
	_c.Call.Return(getActiveGamesRows, err)
	return _c
}

func (_c *MockRecoveryStore_GetActiveGames_Call) RunAndReturn(run func(ctx context.Context) ([]db.GetActiveGamesRow, error)) *MockRecoveryStore_GetActiveGames_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPlayersInRoom provides a mock function for the type MockRecoveryStore
func (_mock *MockRecoveryStore) GetAllPlayersInRoom(ctx context.Context, playerID uuid.UUID) ([]db.GetAllPlayersInRoomRow, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPlayersInRoom")
	}

	var r0 []db.GetAllPlayersInRoomRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetAllPlayersInRoomRow); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllPlayersInRoomRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecoveryStore_GetAllPlayersInRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPlayersInRoom'
type MockRecoveryStore_GetAllPlayersInRoom_Call struct {
	*mock.Call
}

// GetAllPlayersInRoom is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockRecoveryStore_Expecter) GetAllPlayersInRoom(ctx interface{}, playerID interface{}) *MockRecoveryStore_GetAllPlayersInRoom_Call {
	return &MockRecoveryStore_GetAllPlayersInRoom_Call{Call: _e.mock.On("GetAllPlayersInRoom", ctx, playerID)}
}

func (_c *MockRecoveryStore_GetAllPlayersInRoom_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockRecoveryStore_GetAllPlayersInRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRecoveryStore_GetAllPlayersInRoom_Call) Return(getAllPlayersInRoomRows []db.GetAllPlayersInRoomRow, err error) *MockRecoveryStore_GetAllPlayersInRoom_Call {
	_c.Call.Return(getAllPlayersInRoomRows, err)
	return _c
}

func (_c *MockRecoveryStore_GetAllPlayersInRoom_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) ([]db.GetAllPlayersInRoomRow, error)) *MockRecoveryStore_GetAllPlayersInRoom_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseGameLock provides a mock function for the type MockRecoveryStore
func (_mock *MockRecoveryStore) ReleaseGameLock(ctx context.Context, gameStateID string) error {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseGameLock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRecoveryStore_ReleaseGameLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseGameLock'
type MockRecoveryStore_ReleaseGameLock_Call struct {
	*mock.Call
}

// ReleaseGameLock is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID string
func (_e *MockRecoveryStore_Expecter) ReleaseGameLock(ctx interface{}, gameStateID interface{}) *MockRecoveryStore_ReleaseGameLock_Call {
	return &MockRecoveryStore_ReleaseGameLock_Call{Call: _e.mock.On("ReleaseGameLock", ctx, gameStateID)}
}

func (_c *MockRecoveryStore_ReleaseGameLock_Call) Run(run func(ctx context.Context, gameStateID string)) *MockRecoveryStore_ReleaseGameLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRecoveryStore_ReleaseGameLock_Call) Return(err error) *MockRecoveryStore_ReleaseGameLock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRecoveryStore_ReleaseGameLock_Call) RunAndReturn(run func(ctx context.Context, gameStateID string) error) *MockRecoveryStore_ReleaseGameLock_Call {
	_c.Call.Return(run)
	return _c
}

// TryAcquireGameLock provides a mock function for the type MockRecoveryStore
func (_mock *MockRecoveryStore) TryAcquireGameLock(ctx context.Context, gameStateID string) (bool, error) {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for TryAcquireGameLock")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, gameStateID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecoveryStore_TryAcquireGameLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryAcquireGameLock'
type MockRecoveryStore_TryAcquireGameLock_Call struct {
	*mock.Call
}

// TryAcquireGameLock is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID string
func (_e *MockRecoveryStore_Expecter) TryAcquireGameLock(ctx interface{}, gameStateID interface{}) *MockRecoveryStore_TryAcquireGameLock_Call {
	return &MockRecoveryStore_TryAcquireGameLock_Call{Call: _e.mock.On("TryAcquireGameLock", ctx, gameStateID)}
}

func (_c *MockRecoveryStore_TryAcquireGameLock_Call) Run(run func(ctx context.Context, gameStateID string)) *MockRecoveryStore_TryAcquireGameLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRecoveryStore_TryAcquireGameLock_Call) Return(b bool, err error) *MockRecoveryStore_TryAcquireGameLock_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRecoveryStore_TryAcquireGameLock_Call) RunAndReturn(run func(ctx context.Context, gameStateID string) (bool, error)) *MockRecoveryStore_TryAcquireGameLock_Call {
	_c.Call.Return(run)
	return _c
}
