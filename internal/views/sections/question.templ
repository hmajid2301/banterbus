package sections

import (
	"encoding/json"
	"github.com/invopop/ctxi18n/i18n"
	"gitlab.com/banterbus/banterbus/internal/service"
	"gitlab.com/banterbus/banterbus/internal/views/components"
	"strconv"
)

templ Question(gameState service.QuestionState, currentPlayer service.PlayerWithRole, showRole bool) {
	<div hx-swap-oob="innerHTML:#page">
		<div>
			<div class="flex flex-col space-y-6 sm:space-y-8 md:space-y-10 text-text2" data-player-role={ currentPlayer.Role }>
				<div class="flex flex-col justify-between items-center space-y-4 sm:flex-row sm:space-y-0">
					<div class="order-1 sm:order-1">
						@components.Role(currentPlayer.Role, showRole)
					</div>
					<p class="order-2 text-lg text-center sm:order-2 sm:text-xl md:text-2xl">{ i18n.T(ctx, "question.round") } { strconv.Itoa(gameState.Round) } / 3</p>
					<div class="order-3 text-center sm:order-3 sm:text-right">
						@components.CircularTimer(components.CircularTimerProps{
							InitialSeconds: int(gameState.Deadline.Seconds()),
							Size:           "w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16",
						})
					</div>
				</div>
				<p class="text-xl leading-tight text-center sm:text-2xl md:text-3xl lg:text-4xl xl:text-5xl">{ currentPlayer.Question }</p>
				<form id="submit_answer_form" ws-send hx-vals='{"message_type": "submit_answer"}'>
					if len(currentPlayer.PossibleAnswers) > 0 {
						for _, answer := range currentPlayer.PossibleAnswers {
							<div class="flex justify-between items-center my-3 sm:my-5">
								// TODO: see if we can simplify this
								if answer == currentPlayer.CurrentAnswer {
									@components.Button(components.ButtonProps{
										Label:           answer,
										BackgroundColor: "bg-text2",
										TextColor:       "text-black",
									}, templ.Attributes{"name": "answer", "value": answer, "hx-include": "this"}) {
										{ answer }
									}
								} else {
									@components.Button(components.ButtonProps{
										Label: answer,
									}, templ.Attributes{"name": "answer", "value": answer, "hx-include": "this"}) {
										{ answer }
									}
								}
							</div>
						}
					} else {
						@components.TextInput(components.TextInputProps{
							InputName:   "answer",
							Value:       currentPlayer.CurrentAnswer,
							Placeholder: i18n.T(ctx, "question.answer_placeholder"),
						}, templ.Attributes{})
						@components.Button(components.ButtonProps{}, templ.Attributes{"type": "submit", "hx-include": "this"}) {
							{ i18n.T(ctx, "question.submit_answer_button") }
						}
					}
				</form>
				<form id="toggle_ready_form" hx-vals='{"message_type": "toggle_answer_is_ready" }' ws-send class="w-full">
					if currentPlayer.IsAnswerReady {
						@components.Button(components.ButtonProps{TextColor: "text-black", BackgroundColor: "bg-text2"}, templ.Attributes{"type": "submit", "hx-include": "this"}) {
							{ i18n.T(ctx, "common.not_ready_button") }
						}
					} else {
						@components.Button(components.ButtonProps{}, templ.Attributes{"type": "submit", "hx-include": "this"}) {
							{ i18n.T(ctx, "common.ready_button") }
						}
					}
				</form>
			</div>
		</div>
	</div>
}

func toJSON(v any) string {
	b, _ := json.Marshal(v)
	return string(b)
}
