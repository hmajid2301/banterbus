package sections

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"gitlab.com/hmajid2301/banterbus/internal/service"
	"gitlab.com/hmajid2301/banterbus/internal/views/components"
)

templ Lobby(code string, players []service.LobbyPlayer, currentPlayer service.LobbyPlayer, rulesContent templ.Component) {
	<div hx-swap-oob="innerHTML:#page">
		<div
			id="kick-player-modal"
			class="fixed inset-0 z-50"
			x-data="{ show: false, kickNickname: '', kickRoomCode: '' }"
			x-show="show"
			@show-kick-modal.document="kickNickname = window.kickData.nickname; kickRoomCode = window.kickData.roomCode; show = true; $nextTick(() => $refs.modal.focus())"
			@keydown.escape.window="show = false"
			x-transition:enter="ease-out duration-300"
			x-transition:enter-start="opacity-0"
			x-transition:enter-end="opacity-100"
			x-transition:leave="ease-in duration-200"
			x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			role="dialog"
			aria-modal="true"
			aria-labelledby="kick-modal-title"
			aria-describedby="kick-modal-description"
		>
			<div
				class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"
				@click="show = false"
			></div>
			<div class="flex fixed inset-0 justify-center items-center p-4">
				<div
					x-ref="modal"
					class="relative p-6 w-full max-w-md bg-black rounded-lg shadow-xl transition-all transform"
					x-transition:enter="ease-out duration-300"
					x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
					x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
					x-transition:leave="ease-in duration-200"
					x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
					x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
					@click.stop
					tabindex="-1"
				>
					<div class="flex justify-between items-center mb-4">
						<h3 id="kick-modal-title" class="text-lg font-semibold text-text">
							{ i18n.T(ctx, "lobby.kick_player_title") }
						</h3>
						<button
							class="text-text2 hover:text-text"
							@click="show = false"
							aria-label={ i18n.T(ctx, "common.close") }
						>
							<i class="hgi hgi-solid hgi-cancel-01"></i>
						</button>
					</div>
					<div class="mb-6">
						<p id="kick-modal-description" class="text-text2">
							<span x-text="`Are you sure you want to kick ${kickNickname}? They will be removed from the game immediately.`"></span>
						</p>
					</div>
					<div class="flex justify-end space-x-3">
						<button
							class="py-2 px-4 text-sm font-medium rounded-md focus:ring-2 focus:ring-offset-2 focus:outline-none text-text2 bg-surface1 hover:bg-surface2 focus:ring-blue"
							@click="show = false"
						>
							{ i18n.T(ctx, "common.cancel") }
						</button>
						<button
							class="py-2 px-4 text-sm font-medium text-black rounded-md hover:bg-red-600 focus:ring-2 focus:ring-offset-2 focus:outline-none bg-red focus:ring-red"
							ws-send
							x-bind:hx-vals="JSON.stringify({message_type: 'kick_player', room_code: kickRoomCode, player_nickname_to_kick: kickNickname})"
							@click="show = false"
						>
							{ i18n.T(ctx, "lobby.kick_player_confirm") }
						</button>
					</div>
				</div>
			</div>
		</div>
		@components.TextInput(components.TextInputProps{
			LabelName: i18n.T(ctx, "common.roomcode_label"),
			InputName: "room_code",
			Value:     code,
		}, templ.Attributes{"disabled": true}) {
			<button class="inline-flex absolute top-1/2 justify-center items-center p-2 rounded-lg text-text2 end-2 hover:text-blue" aria-label="Copy Join Link" @click={ getClipboardString(code) }>
				<i class="hgi hgi-solid hgi-copy-01"></i>
			</button>
		}
		<div>
			@components.Rules(rulesContent)
		</div>
		<div class="flex flex-col space-y-4 text-text2">
			for _, player := range players {
				<div class="flex flex-col">
					<div class="flex relative flex-col justify-between items-center p-2 space-y-2 w-full rounded-lg sm:flex-row sm:space-y-0 sm:space-x-2 bg-surface1">
						<div class="relative w-24 h-24 rounded-full border-2 border-white sm:w-20 sm:h-20 bg-overlay0">
							if player.IsHost {
								<div class="absolute -top-2 -left-2 sm:top-0 sm:left-1/2 sm:transform sm:-translate-x-1/2 sm:-translate-y-1/2">
									<i class="text-lg text-yellow-500 sm:text-base hgi hgi-solid hgi-crown"></i>
								</div>
							}
							if currentPlayer.IsHost && !player.IsHost {
								<button
									aria-label="Kick Player"
									@click={ getKickModalClick(player.Nickname, code) }
									class="absolute top-0 right-0 p-2 text-black bg-white rounded-full hover:bg-surface2 hover:text-text2"
								>
									<i class="text-sm text-red-500 hgi hgi-solid hgi-delete-02"></i>
								</button>
							}
							<img src={ player.Avatar } alt="avatar" class="w-full h-full rounded-full"/>
							if currentPlayer == player {
								<form id="update_avatar_form" hx-vals='{"message_type": "generate_new_avatar" }' ws-send>
									<button class="absolute right-0 bottom-0 p-2 text-black bg-white rounded-full hover:bg-surface2 hover:text-text2" aria-label="Update Avatar">
										<i class="text-sm hgi hgi-solid hgi-redo-02"></i>
									</button>
								</form>
							}
						</div>
						if currentPlayer == player {
							<form id="update_nickname_form" hx-vals='{"message_type": "update_player_nickname" }' ws-send>
								<div class="flex flex-row items-center space-x-2">
									<input type="text" name="player_nickname" value={ player.Nickname } class="py-2 px-4 font-semibold text-center rounded-xl border-1 bg-overlay0 placeholder-surface0 border-text2" placeholder="Your nickname"/>
								</div>
							</form>
						} else {
							<p class="font-semibold text-center">{ player.Nickname }</p>
						}
						<div class="flex justify-center">
							if player.IsReady {
								<span class="py-1 px-3 text-xs font-bold text-black rounded-full bg-green">READY</span>
							} else {
								<span class="py-1 px-3 text-xs font-bold text-black rounded-full bg-red">NOT READY</span>
							}
						</div>
					</div>
				</div>
			}
			<div class="flex flex-col items-center space-y-2 w-full sm:flex-row sm:space-y-0 sm:space-x-2">
				<form id="toggle_ready_form" hx-vals='{"message_type": "toggle_player_is_ready" }' ws-send class="w-full">
					if currentPlayer.IsReady {
						@components.Button(components.ButtonProps{TextColor: "text-black", BackgroundColor: "bg-text2"}, templ.Attributes{"type": "submit", "hx-include": "this"}) {
							{ i18n.T(ctx, "common.not_ready_button") }
						}
					} else {
						@components.Button(components.ButtonProps{}, templ.Attributes{"type": "submit", "hx-include": "this"}) {
							{ i18n.T(ctx, "common.ready_button") }
						}
					}
				</form>
				if currentPlayer.IsHost && allPlayersReady(players) {
					<form id="start_game_form" hx-vals='{"message_type": "start_game" }' ws-send class="w-full">
						<input class="hidden" name="room_code" value={ code }/>
						@components.Button(components.ButtonProps{}, templ.Attributes{"type": "submit", "hx-include": "this"}) {
							{ i18n.T(ctx, "lobby.start_game_button") }
						}
					</form>
				}
			</div>
		</div>
	</div>
}

func getClipboardString(code string) string {
	return fmt.Sprintf("navigator.clipboard.writeText(`${window.location.origin}/join/%s`), showMsg = true, setTimeout(() => showMsg = false, 1000)", code)
}

func allPlayersReady(players []service.LobbyPlayer) bool {
	for _, player := range players {
		if !player.IsReady {
			return false
		}
	}
	return true
}

func getKickModalClick(nickname, roomCode string) string {
	return fmt.Sprintf("window.kickData = { nickname: '%s', roomCode: '%s' }; document.dispatchEvent(new CustomEvent('show-kick-modal'))", nickname, roomCode)
}
