// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"

	"gitlab.com/hmajid2301/banterbus/internal/service"
	"gitlab.com/hmajid2301/banterbus/internal/store/db"
)

// NewMockLobbyServicer creates a new instance of MockLobbyServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLobbyServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLobbyServicer {
	mock := &MockLobbyServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLobbyServicer is an autogenerated mock type for the LobbyServicer type
type MockLobbyServicer struct {
	mock.Mock
}

type MockLobbyServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLobbyServicer) EXPECT() *MockLobbyServicer_Expecter {
	return &MockLobbyServicer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLobbyServicer
func (_mock *MockLobbyServicer) Create(ctx context.Context, gameName string, player service.NewHostPlayer) (service.Lobby, error) {
	ret := _mock.Called(ctx, gameName, player)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 service.Lobby
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, service.NewHostPlayer) (service.Lobby, error)); ok {
		return returnFunc(ctx, gameName, player)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, service.NewHostPlayer) service.Lobby); ok {
		r0 = returnFunc(ctx, gameName, player)
	} else {
		r0 = ret.Get(0).(service.Lobby)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, service.NewHostPlayer) error); ok {
		r1 = returnFunc(ctx, gameName, player)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyServicer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLobbyServicer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - gameName string
//   - player service.NewHostPlayer
func (_e *MockLobbyServicer_Expecter) Create(ctx interface{}, gameName interface{}, player interface{}) *MockLobbyServicer_Create_Call {
	return &MockLobbyServicer_Create_Call{Call: _e.mock.On("Create", ctx, gameName, player)}
}

func (_c *MockLobbyServicer_Create_Call) Run(run func(ctx context.Context, gameName string, player service.NewHostPlayer)) *MockLobbyServicer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 service.NewHostPlayer
		if args[2] != nil {
			arg2 = args[2].(service.NewHostPlayer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLobbyServicer_Create_Call) Return(lobby service.Lobby, err error) *MockLobbyServicer_Create_Call {
	_c.Call.Return(lobby, err)
	return _c
}

func (_c *MockLobbyServicer_Create_Call) RunAndReturn(run func(ctx context.Context, gameName string, player service.NewHostPlayer) (service.Lobby, error)) *MockLobbyServicer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetLobby provides a mock function for the type MockLobbyServicer
func (_mock *MockLobbyServicer) GetLobby(ctx context.Context, playerID uuid.UUID) (service.Lobby, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLobby")
	}

	var r0 service.Lobby
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (service.Lobby, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) service.Lobby); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(service.Lobby)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyServicer_GetLobby_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLobby'
type MockLobbyServicer_GetLobby_Call struct {
	*mock.Call
}

// GetLobby is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockLobbyServicer_Expecter) GetLobby(ctx interface{}, playerID interface{}) *MockLobbyServicer_GetLobby_Call {
	return &MockLobbyServicer_GetLobby_Call{Call: _e.mock.On("GetLobby", ctx, playerID)}
}

func (_c *MockLobbyServicer_GetLobby_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockLobbyServicer_GetLobby_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyServicer_GetLobby_Call) Return(lobby service.Lobby, err error) *MockLobbyServicer_GetLobby_Call {
	_c.Call.Return(lobby, err)
	return _c
}

func (_c *MockLobbyServicer_GetLobby_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (service.Lobby, error)) *MockLobbyServicer_GetLobby_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoomState provides a mock function for the type MockLobbyServicer
func (_mock *MockLobbyServicer) GetRoomState(ctx context.Context, playerID uuid.UUID) (db.RoomState, error) {
	ret := _mock.Called(ctx, playerID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomState")
	}

	var r0 db.RoomState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.RoomState, error)); ok {
		return returnFunc(ctx, playerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.RoomState); ok {
		r0 = returnFunc(ctx, playerID)
	} else {
		r0 = ret.Get(0).(db.RoomState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, playerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyServicer_GetRoomState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoomState'
type MockLobbyServicer_GetRoomState_Call struct {
	*mock.Call
}

// GetRoomState is a helper method to define mock.On call
//   - ctx context.Context
//   - playerID uuid.UUID
func (_e *MockLobbyServicer_Expecter) GetRoomState(ctx interface{}, playerID interface{}) *MockLobbyServicer_GetRoomState_Call {
	return &MockLobbyServicer_GetRoomState_Call{Call: _e.mock.On("GetRoomState", ctx, playerID)}
}

func (_c *MockLobbyServicer_GetRoomState_Call) Run(run func(ctx context.Context, playerID uuid.UUID)) *MockLobbyServicer_GetRoomState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLobbyServicer_GetRoomState_Call) Return(roomState db.RoomState, err error) *MockLobbyServicer_GetRoomState_Call {
	_c.Call.Return(roomState, err)
	return _c
}

func (_c *MockLobbyServicer_GetRoomState_Call) RunAndReturn(run func(ctx context.Context, playerID uuid.UUID) (db.RoomState, error)) *MockLobbyServicer_GetRoomState_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function for the type MockLobbyServicer
func (_mock *MockLobbyServicer) Join(ctx context.Context, roomCode string, playerID uuid.UUID, playerNickname string) (service.Lobby, error) {
	ret := _mock.Called(ctx, roomCode, playerID, playerNickname)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 service.Lobby
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, string) (service.Lobby, error)); ok {
		return returnFunc(ctx, roomCode, playerID, playerNickname)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, string) service.Lobby); ok {
		r0 = returnFunc(ctx, roomCode, playerID, playerNickname)
	} else {
		r0 = ret.Get(0).(service.Lobby)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, roomCode, playerID, playerNickname)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyServicer_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockLobbyServicer_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
//   - playerID uuid.UUID
//   - playerNickname string
func (_e *MockLobbyServicer_Expecter) Join(ctx interface{}, roomCode interface{}, playerID interface{}, playerNickname interface{}) *MockLobbyServicer_Join_Call {
	return &MockLobbyServicer_Join_Call{Call: _e.mock.On("Join", ctx, roomCode, playerID, playerNickname)}
}

func (_c *MockLobbyServicer_Join_Call) Run(run func(ctx context.Context, roomCode string, playerID uuid.UUID, playerNickname string)) *MockLobbyServicer_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLobbyServicer_Join_Call) Return(lobby service.Lobby, err error) *MockLobbyServicer_Join_Call {
	_c.Call.Return(lobby, err)
	return _c
}

func (_c *MockLobbyServicer_Join_Call) RunAndReturn(run func(ctx context.Context, roomCode string, playerID uuid.UUID, playerNickname string) (service.Lobby, error)) *MockLobbyServicer_Join_Call {
	_c.Call.Return(run)
	return _c
}

// KickPlayer provides a mock function for the type MockLobbyServicer
func (_mock *MockLobbyServicer) KickPlayer(ctx context.Context, roomCode string, playerID uuid.UUID, playerNicknameToKick string) (service.Lobby, uuid.UUID, error) {
	ret := _mock.Called(ctx, roomCode, playerID, playerNicknameToKick)

	if len(ret) == 0 {
		panic("no return value specified for KickPlayer")
	}

	var r0 service.Lobby
	var r1 uuid.UUID
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, string) (service.Lobby, uuid.UUID, error)); ok {
		return returnFunc(ctx, roomCode, playerID, playerNicknameToKick)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, string) service.Lobby); ok {
		r0 = returnFunc(ctx, roomCode, playerID, playerNicknameToKick)
	} else {
		r0 = ret.Get(0).(service.Lobby)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, string) uuid.UUID); ok {
		r1 = returnFunc(ctx, roomCode, playerID, playerNicknameToKick)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, uuid.UUID, string) error); ok {
		r2 = returnFunc(ctx, roomCode, playerID, playerNicknameToKick)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLobbyServicer_KickPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KickPlayer'
type MockLobbyServicer_KickPlayer_Call struct {
	*mock.Call
}

// KickPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
//   - playerID uuid.UUID
//   - playerNicknameToKick string
func (_e *MockLobbyServicer_Expecter) KickPlayer(ctx interface{}, roomCode interface{}, playerID interface{}, playerNicknameToKick interface{}) *MockLobbyServicer_KickPlayer_Call {
	return &MockLobbyServicer_KickPlayer_Call{Call: _e.mock.On("KickPlayer", ctx, roomCode, playerID, playerNicknameToKick)}
}

func (_c *MockLobbyServicer_KickPlayer_Call) Run(run func(ctx context.Context, roomCode string, playerID uuid.UUID, playerNicknameToKick string)) *MockLobbyServicer_KickPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLobbyServicer_KickPlayer_Call) Return(lobby service.Lobby, uUID uuid.UUID, err error) *MockLobbyServicer_KickPlayer_Call {
	_c.Call.Return(lobby, uUID, err)
	return _c
}

func (_c *MockLobbyServicer_KickPlayer_Call) RunAndReturn(run func(ctx context.Context, roomCode string, playerID uuid.UUID, playerNicknameToKick string) (service.Lobby, uuid.UUID, error)) *MockLobbyServicer_KickPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockLobbyServicer
func (_mock *MockLobbyServicer) Start(ctx context.Context, roomCode string, playerID uuid.UUID, deadline time.Time) (service.QuestionState, error) {
	ret := _mock.Called(ctx, roomCode, playerID, deadline)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 service.QuestionState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) (service.QuestionState, error)); ok {
		return returnFunc(ctx, roomCode, playerID, deadline)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) service.QuestionState); ok {
		r0 = returnFunc(ctx, roomCode, playerID, deadline)
	} else {
		r0 = ret.Get(0).(service.QuestionState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r1 = returnFunc(ctx, roomCode, playerID, deadline)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLobbyServicer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockLobbyServicer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - roomCode string
//   - playerID uuid.UUID
//   - deadline time.Time
func (_e *MockLobbyServicer_Expecter) Start(ctx interface{}, roomCode interface{}, playerID interface{}, deadline interface{}) *MockLobbyServicer_Start_Call {
	return &MockLobbyServicer_Start_Call{Call: _e.mock.On("Start", ctx, roomCode, playerID, deadline)}
}

func (_c *MockLobbyServicer_Start_Call) Run(run func(ctx context.Context, roomCode string, playerID uuid.UUID, deadline time.Time)) *MockLobbyServicer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLobbyServicer_Start_Call) Return(questionState service.QuestionState, err error) *MockLobbyServicer_Start_Call {
	_c.Call.Return(questionState, err)
	return _c
}

func (_c *MockLobbyServicer_Start_Call) RunAndReturn(run func(ctx context.Context, roomCode string, playerID uuid.UUID, deadline time.Time) (service.QuestionState, error)) *MockLobbyServicer_Start_Call {
	_c.Call.Return(run)
	return _c
}
