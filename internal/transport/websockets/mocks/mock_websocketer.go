// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/gofrs/uuid/v5"
	"github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWebsocketer creates a new instance of MockWebsocketer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebsocketer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebsocketer {
	mock := &MockWebsocketer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebsocketer is an autogenerated mock type for the Websocketer type
type MockWebsocketer struct {
	mock.Mock
}

type MockWebsocketer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebsocketer) EXPECT() *MockWebsocketer_Expecter {
	return &MockWebsocketer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockWebsocketer
func (_mock *MockWebsocketer) Close(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWebsocketer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWebsocketer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockWebsocketer_Expecter) Close(id interface{}) *MockWebsocketer_Close_Call {
	return &MockWebsocketer_Close_Call{Call: _e.mock.On("Close", id)}
}

func (_c *MockWebsocketer_Close_Call) Run(run func(id uuid.UUID)) *MockWebsocketer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWebsocketer_Close_Call) Return(err error) *MockWebsocketer_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWebsocketer_Close_Call) RunAndReturn(run func(id uuid.UUID) error) *MockWebsocketer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockWebsocketer
func (_mock *MockWebsocketer) Publish(ctx context.Context, id uuid.UUID, msg []byte) error {
	ret := _mock.Called(ctx, id, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []byte) error); ok {
		r0 = returnFunc(ctx, id, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWebsocketer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockWebsocketer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - msg []byte
func (_e *MockWebsocketer_Expecter) Publish(ctx interface{}, id interface{}, msg interface{}) *MockWebsocketer_Publish_Call {
	return &MockWebsocketer_Publish_Call{Call: _e.mock.On("Publish", ctx, id, msg)}
}

func (_c *MockWebsocketer_Publish_Call) Run(run func(ctx context.Context, id uuid.UUID, msg []byte)) *MockWebsocketer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockWebsocketer_Publish_Call) Return(err error) *MockWebsocketer_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWebsocketer_Publish_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, msg []byte) error) *MockWebsocketer_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockWebsocketer
func (_mock *MockWebsocketer) Subscribe(ctx context.Context, id uuid.UUID) <-chan *redis.Message {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan *redis.Message
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) <-chan *redis.Message); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *redis.Message)
		}
	}
	return r0
}

// MockWebsocketer_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockWebsocketer_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockWebsocketer_Expecter) Subscribe(ctx interface{}, id interface{}) *MockWebsocketer_Subscribe_Call {
	return &MockWebsocketer_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, id)}
}

func (_c *MockWebsocketer_Subscribe_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockWebsocketer_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebsocketer_Subscribe_Call) Return(messageCh <-chan *redis.Message) *MockWebsocketer_Subscribe_Call {
	_c.Call.Return(messageCh)
	return _c
}

func (_c *MockWebsocketer_Subscribe_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) <-chan *redis.Message) *MockWebsocketer_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
