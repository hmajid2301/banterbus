// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package websockets

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"gitlab.com/banterbus/banterbus/internal/transport/websockets"
)

// NewMockWSHandler creates a new instance of MockWSHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWSHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWSHandler {
	mock := &MockWSHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWSHandler is an autogenerated mock type for the WSHandler type
type MockWSHandler struct {
	mock.Mock
}

type MockWSHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWSHandler) EXPECT() *MockWSHandler_Expecter {
	return &MockWSHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockWSHandler
func (_mock *MockWSHandler) Handle(ctx context.Context, client *websockets.Client, sub *websockets.Subscriber) error {
	ret := _mock.Called(ctx, client, sub)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *websockets.Client, *websockets.Subscriber) error); ok {
		r0 = returnFunc(ctx, client, sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWSHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockWSHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - client *websockets.Client
//   - sub *websockets.Subscriber
func (_e *MockWSHandler_Expecter) Handle(ctx interface{}, client interface{}, sub interface{}) *MockWSHandler_Handle_Call {
	return &MockWSHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, client, sub)}
}

func (_c *MockWSHandler_Handle_Call) Run(run func(ctx context.Context, client *websockets.Client, sub *websockets.Subscriber)) *MockWSHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *websockets.Client
		if args[1] != nil {
			arg1 = args[1].(*websockets.Client)
		}
		var arg2 *websockets.Subscriber
		if args[2] != nil {
			arg2 = args[2].(*websockets.Subscriber)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockWSHandler_Handle_Call) Return(err error) *MockWSHandler_Handle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWSHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, client *websockets.Client, sub *websockets.Subscriber) error) *MockWSHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockWSHandler
func (_mock *MockWSHandler) Validate() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWSHandler_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockWSHandler_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *MockWSHandler_Expecter) Validate() *MockWSHandler_Validate_Call {
	return &MockWSHandler_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *MockWSHandler_Validate_Call) Run(run func()) *MockWSHandler_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWSHandler_Validate_Call) Return(err error) *MockWSHandler_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWSHandler_Validate_Call) RunAndReturn(run func() error) *MockWSHandler_Validate_Call {
	_c.Call.Return(run)
	return _c
}
