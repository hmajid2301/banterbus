// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.1

package db

import (
	"errors"
	"fmt"
)

const (
	// FibbingITQuestion is a FibbingItGameState of type FibbingITQuestion.
	FibbingITQuestion FibbingItGameState = iota
	// FibbingItVoting is a FibbingItGameState of type FibbingItVoting.
	FibbingItVoting
	// FibbingItReveal is a FibbingItGameState of type FibbingItReveal.
	FibbingItReveal
	// FibbingItScoring is a FibbingItGameState of type FibbingItScoring.
	FibbingItScoring
	// FibbingItNewRound is a FibbingItGameState of type FibbingItNewRound.
	FibbingItNewRound
	// FibbingItWinner is a FibbingItGameState of type FibbingItWinner.
	FibbingItWinner
)

var ErrInvalidFibbingItGameState = errors.New("not a valid FibbingItGameState")

const _FibbingItGameStateName = "FibbingITQuestionFibbingItVotingFibbingItRevealFibbingItScoringFibbingItNewRoundFibbingItWinner"

var _FibbingItGameStateMap = map[FibbingItGameState]string{
	FibbingITQuestion: _FibbingItGameStateName[0:17],
	FibbingItVoting:   _FibbingItGameStateName[17:32],
	FibbingItReveal:   _FibbingItGameStateName[32:47],
	FibbingItScoring:  _FibbingItGameStateName[47:63],
	FibbingItNewRound: _FibbingItGameStateName[63:80],
	FibbingItWinner:   _FibbingItGameStateName[80:95],
}

// String implements the Stringer interface.
func (x FibbingItGameState) String() string {
	if str, ok := _FibbingItGameStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FibbingItGameState(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FibbingItGameState) IsValid() bool {
	_, ok := _FibbingItGameStateMap[x]
	return ok
}

var _FibbingItGameStateValue = map[string]FibbingItGameState{
	_FibbingItGameStateName[0:17]:  FibbingITQuestion,
	_FibbingItGameStateName[17:32]: FibbingItVoting,
	_FibbingItGameStateName[32:47]: FibbingItReveal,
	_FibbingItGameStateName[47:63]: FibbingItScoring,
	_FibbingItGameStateName[63:80]: FibbingItNewRound,
	_FibbingItGameStateName[80:95]: FibbingItWinner,
}

// ParseFibbingItGameState attempts to convert a string to a FibbingItGameState.
func ParseFibbingItGameState(name string) (FibbingItGameState, error) {
	if x, ok := _FibbingItGameStateValue[name]; ok {
		return x, nil
	}
	return FibbingItGameState(0), fmt.Errorf("%s is %w", name, ErrInvalidFibbingItGameState)
}

const (
	// Created is a RoomState of type Created.
	Created RoomState = iota
	// Playing is a RoomState of type Playing.
	Playing
	// Paused is a RoomState of type Paused.
	Paused
	// Finished is a RoomState of type Finished.
	Finished
	// Abandoned is a RoomState of type Abandoned.
	Abandoned
)

var ErrInvalidRoomState = errors.New("not a valid RoomState")

const _RoomStateName = "CreatedPlayingPausedFinishedAbandoned"

var _RoomStateMap = map[RoomState]string{
	Created:   _RoomStateName[0:7],
	Playing:   _RoomStateName[7:14],
	Paused:    _RoomStateName[14:20],
	Finished:  _RoomStateName[20:28],
	Abandoned: _RoomStateName[28:37],
}

// String implements the Stringer interface.
func (x RoomState) String() string {
	if str, ok := _RoomStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RoomState(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RoomState) IsValid() bool {
	_, ok := _RoomStateMap[x]
	return ok
}

var _RoomStateValue = map[string]RoomState{
	_RoomStateName[0:7]:   Created,
	_RoomStateName[7:14]:  Playing,
	_RoomStateName[14:20]: Paused,
	_RoomStateName[20:28]: Finished,
	_RoomStateName[28:37]: Abandoned,
}

// ParseRoomState attempts to convert a string to a RoomState.
func ParseRoomState(name string) (RoomState, error) {
	if x, ok := _RoomStateValue[name]; ok {
		return x, nil
	}
	return RoomState(0), fmt.Errorf("%s is %w", name, ErrInvalidRoomState)
}
