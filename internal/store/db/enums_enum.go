// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.1

package db

import (
	"errors"
	"fmt"
)

const (
	// FibbingItGameStateFibbingITQuestion is a FibbingItGameState of type FibbingITQuestion.
	FibbingItGameStateFibbingITQuestion FibbingItGameState = iota
	// FibbingItGameStateFibbingItVoting is a FibbingItGameState of type FibbingItVoting.
	FibbingItGameStateFibbingItVoting
	// FibbingItGameStateFibbingItRevealRole is a FibbingItGameState of type FibbingItRevealRole.
	FibbingItGameStateFibbingItRevealRole
	// FibbingItGameStateFibbingItScoring is a FibbingItGameState of type FibbingItScoring.
	FibbingItGameStateFibbingItScoring
	// FibbingItGameStateFibbingItNewRound is a FibbingItGameState of type FibbingItNewRound.
	FibbingItGameStateFibbingItNewRound
	// FibbingItGameStateFibbingItWinner is a FibbingItGameState of type FibbingItWinner.
	FibbingItGameStateFibbingItWinner
)

var ErrInvalidFibbingItGameState = errors.New("not a valid FibbingItGameState")

const _FibbingItGameStateName = "FibbingITQuestionFibbingItVotingFibbingItRevealRoleFibbingItScoringFibbingItNewRoundFibbingItWinner"

var _FibbingItGameStateMap = map[FibbingItGameState]string{
	FibbingItGameStateFibbingITQuestion:   _FibbingItGameStateName[0:17],
	FibbingItGameStateFibbingItVoting:     _FibbingItGameStateName[17:32],
	FibbingItGameStateFibbingItRevealRole: _FibbingItGameStateName[32:51],
	FibbingItGameStateFibbingItScoring:    _FibbingItGameStateName[51:67],
	FibbingItGameStateFibbingItNewRound:   _FibbingItGameStateName[67:84],
	FibbingItGameStateFibbingItWinner:     _FibbingItGameStateName[84:99],
}

// String implements the Stringer interface.
func (x FibbingItGameState) String() string {
	if str, ok := _FibbingItGameStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FibbingItGameState(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FibbingItGameState) IsValid() bool {
	_, ok := _FibbingItGameStateMap[x]
	return ok
}

var _FibbingItGameStateValue = map[string]FibbingItGameState{
	_FibbingItGameStateName[0:17]:  FibbingItGameStateFibbingITQuestion,
	_FibbingItGameStateName[17:32]: FibbingItGameStateFibbingItVoting,
	_FibbingItGameStateName[32:51]: FibbingItGameStateFibbingItRevealRole,
	_FibbingItGameStateName[51:67]: FibbingItGameStateFibbingItScoring,
	_FibbingItGameStateName[67:84]: FibbingItGameStateFibbingItNewRound,
	_FibbingItGameStateName[84:99]: FibbingItGameStateFibbingItWinner,
}

// ParseFibbingItGameState attempts to convert a string to a FibbingItGameState.
func ParseFibbingItGameState(name string) (FibbingItGameState, error) {
	if x, ok := _FibbingItGameStateValue[name]; ok {
		return x, nil
	}
	return FibbingItGameState(0), fmt.Errorf("%s is %w", name, ErrInvalidFibbingItGameState)
}

const (
	// RoomStateCreated is a RoomState of type Created.
	RoomStateCreated RoomState = iota
	// RoomStatePlaying is a RoomState of type Playing.
	RoomStatePlaying
	// RoomStatePaused is a RoomState of type Paused.
	RoomStatePaused
	// RoomStateFinished is a RoomState of type Finished.
	RoomStateFinished
	// RoomStateAbandoned is a RoomState of type Abandoned.
	RoomStateAbandoned
)

var ErrInvalidRoomState = errors.New("not a valid RoomState")

const _RoomStateName = "CreatedPlayingPausedFinishedAbandoned"

var _RoomStateMap = map[RoomState]string{
	RoomStateCreated:   _RoomStateName[0:7],
	RoomStatePlaying:   _RoomStateName[7:14],
	RoomStatePaused:    _RoomStateName[14:20],
	RoomStateFinished:  _RoomStateName[20:28],
	RoomStateAbandoned: _RoomStateName[28:37],
}

// String implements the Stringer interface.
func (x RoomState) String() string {
	if str, ok := _RoomStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RoomState(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RoomState) IsValid() bool {
	_, ok := _RoomStateMap[x]
	return ok
}

var _RoomStateValue = map[string]RoomState{
	_RoomStateName[0:7]:   RoomStateCreated,
	_RoomStateName[7:14]:  RoomStatePlaying,
	_RoomStateName[14:20]: RoomStatePaused,
	_RoomStateName[20:28]: RoomStateFinished,
	_RoomStateName[28:37]: RoomStateAbandoned,
}

// ParseRoomState attempts to convert a string to a RoomState.
func ParseRoomState(name string) (RoomState, error) {
	if x, ok := _RoomStateValue[name]; ok {
		return x, nil
	}
	return RoomState(0), fmt.Errorf("%s is %w", name, ErrInvalidRoomState)
}
