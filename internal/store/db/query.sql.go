// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addFibbingItAnswer = `-- name: AddFibbingItAnswer :one
INSERT INTO fibbing_it_answers (id, answer, round_id, player_id) VALUES (?, ?, ?, ?) RETURNING id, created_at, updated_at, answer, player_id, round_id, "foreign"
`

type AddFibbingItAnswerParams struct {
	ID       string
	Answer   string
	RoundID  string
	PlayerID string
}

func (q *Queries) AddFibbingItAnswer(ctx context.Context, arg AddFibbingItAnswerParams) (FibbingItAnswer, error) {
	row := q.db.QueryRowContext(ctx, addFibbingItAnswer,
		arg.ID,
		arg.Answer,
		arg.RoundID,
		arg.PlayerID,
	)
	var i FibbingItAnswer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Answer,
		&i.PlayerID,
		&i.RoundID,
		&i.Foreign,
	)
	return i, err
}

const addFibbingItRole = `-- name: AddFibbingItRole :one
INSERT INTO fibbing_it_player_roles (id, player_role, round_id, player_id) VALUES (?, ?, ?, ?) RETURNING id, created_at, updated_at, player_role, round_id, player_id
`

type AddFibbingItRoleParams struct {
	ID         string
	PlayerRole string
	RoundID    string
	PlayerID   string
}

func (q *Queries) AddFibbingItRole(ctx context.Context, arg AddFibbingItRoleParams) (FibbingItPlayerRole, error) {
	row := q.db.QueryRowContext(ctx, addFibbingItRole,
		arg.ID,
		arg.PlayerRole,
		arg.RoundID,
		arg.PlayerID,
	)
	var i FibbingItPlayerRole
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PlayerRole,
		&i.RoundID,
		&i.PlayerID,
	)
	return i, err
}

const addFibbingItRound = `-- name: AddFibbingItRound :one
INSERT INTO fibbing_it_rounds (id, round_type, round, fibber_question_id, normal_question_id, game_state_id) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at, updated_at, round_type, round, fibber_question_id, normal_question_id, game_state_id
`

type AddFibbingItRoundParams struct {
	ID               string
	RoundType        string
	Round            int64
	FibberQuestionID string
	NormalQuestionID string
	GameStateID      string
}

func (q *Queries) AddFibbingItRound(ctx context.Context, arg AddFibbingItRoundParams) (FibbingItRound, error) {
	row := q.db.QueryRowContext(ctx, addFibbingItRound,
		arg.ID,
		arg.RoundType,
		arg.Round,
		arg.FibberQuestionID,
		arg.NormalQuestionID,
		arg.GameStateID,
	)
	var i FibbingItRound
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoundType,
		&i.Round,
		&i.FibberQuestionID,
		&i.NormalQuestionID,
		&i.GameStateID,
	)
	return i, err
}

const addGameState = `-- name: AddGameState :one
INSERT INTO game_state (id, room_id) VALUES (?, ?) RETURNING id, created_at, updated_at, room_id
`

type AddGameStateParams struct {
	ID     string
	RoomID string
}

func (q *Queries) AddGameState(ctx context.Context, arg AddGameStateParams) (GameState, error) {
	row := q.db.QueryRowContext(ctx, addGameState, arg.ID, arg.RoomID)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoomID,
	)
	return i, err
}

const addPlayer = `-- name: AddPlayer :one
INSERT INTO players (id, avatar, nickname) VALUES (?, ?, ?) RETURNING id, created_at, updated_at, avatar, nickname, is_ready
`

type AddPlayerParams struct {
	ID       string
	Avatar   []byte
	Nickname string
}

func (q *Queries) AddPlayer(ctx context.Context, arg AddPlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, addPlayer, arg.ID, arg.Avatar, arg.Nickname)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Nickname,
		&i.IsReady,
	)
	return i, err
}

const addQuestion = `-- name: AddQuestion :one
INSERT INTO questions (id, game_name, round, question, language_code, group_id) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at, updated_at, game_name, round, enabled, question, language_code, group_id
`

type AddQuestionParams struct {
	ID           string
	GameName     string
	Round        string
	Question     string
	LanguageCode string
	GroupID      string
}

func (q *Queries) AddQuestion(ctx context.Context, arg AddQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, addQuestion,
		arg.ID,
		arg.GameName,
		arg.Round,
		arg.Question,
		arg.LanguageCode,
		arg.GroupID,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameName,
		&i.Round,
		&i.Enabled,
		&i.Question,
		&i.LanguageCode,
		&i.GroupID,
	)
	return i, err
}

const addQuestionsGroup = `-- name: AddQuestionsGroup :one
INSERT INTO questions_groups (id, group_name, group_type) VALUES (?, ?, ?) RETURNING id, created_at, updated_at, group_name, group_type
`

type AddQuestionsGroupParams struct {
	ID        string
	GroupName string
	GroupType string
}

func (q *Queries) AddQuestionsGroup(ctx context.Context, arg AddQuestionsGroupParams) (QuestionsGroup, error) {
	row := q.db.QueryRowContext(ctx, addQuestionsGroup, arg.ID, arg.GroupName, arg.GroupType)
	var i QuestionsGroup
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupName,
		&i.GroupType,
	)
	return i, err
}

const addRoom = `-- name: AddRoom :one
INSERT INTO rooms (id, game_name, host_player, room_code, room_state)  VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at, game_name, host_player, room_state, room_code
`

type AddRoomParams struct {
	ID         string
	GameName   string
	HostPlayer string
	RoomCode   string
	RoomState  string
}

func (q *Queries) AddRoom(ctx context.Context, arg AddRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, addRoom,
		arg.ID,
		arg.GameName,
		arg.HostPlayer,
		arg.RoomCode,
		arg.RoomState,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameName,
		&i.HostPlayer,
		&i.RoomState,
		&i.RoomCode,
	)
	return i, err
}

const addRoomPlayer = `-- name: AddRoomPlayer :one
INSERT INTO rooms_players (room_id, player_id) VALUES (?, ?) RETURNING room_id, player_id, created_at, updated_at
`

type AddRoomPlayerParams struct {
	RoomID   string
	PlayerID string
}

func (q *Queries) AddRoomPlayer(ctx context.Context, arg AddRoomPlayerParams) (RoomsPlayer, error) {
	row := q.db.QueryRowContext(ctx, addRoomPlayer, arg.RoomID, arg.PlayerID)
	var i RoomsPlayer
	err := row.Scan(
		&i.RoomID,
		&i.PlayerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPlayerByRoomCode = `-- name: GetAllPlayerByRoomCode :many
SELECT p.id, p.created_at, p.updated_at, p.avatar, p.nickname, p.is_ready, r.room_code, r.host_player
FROM players p
JOIN rooms_players rp ON p.id = rp.player_id
JOIN rooms r ON rp.room_id = r.id
WHERE rp.room_id = (
    SELECT r_inner.id
    FROM rooms r_inner
    WHERE r_inner.room_code = ? AND (r_inner.room_state = "CREATED" OR r_inner.room_state = "PLAYING")
)
`

type GetAllPlayerByRoomCodeRow struct {
	ID         string
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
	Avatar     []byte
	Nickname   string
	IsReady    sql.NullBool
	RoomCode   string
	HostPlayer string
}

func (q *Queries) GetAllPlayerByRoomCode(ctx context.Context, roomCode string) ([]GetAllPlayerByRoomCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlayerByRoomCode, roomCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlayerByRoomCodeRow
	for rows.Next() {
		var i GetAllPlayerByRoomCodeRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Avatar,
			&i.Nickname,
			&i.IsReady,
			&i.RoomCode,
			&i.HostPlayer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlayersInRoom = `-- name: GetAllPlayersInRoom :many
SELECT p.id, p.created_at, p.updated_at, p.avatar, p.nickname, p.is_ready, r.room_code, r.host_player
FROM players p
JOIN rooms_players rp ON p.id = rp.player_id
JOIN rooms r ON rp.room_id = r.id
WHERE rp.room_id = (
    SELECT rp_inner.room_id
    FROM rooms_players rp_inner
    WHERE rp_inner.player_id = ?
)
`

type GetAllPlayersInRoomRow struct {
	ID         string
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
	Avatar     []byte
	Nickname   string
	IsReady    sql.NullBool
	RoomCode   string
	HostPlayer string
}

func (q *Queries) GetAllPlayersInRoom(ctx context.Context, playerID string) ([]GetAllPlayersInRoomRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlayersInRoom, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlayersInRoomRow
	for rows.Next() {
		var i GetAllPlayersInRoomRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Avatar,
			&i.Nickname,
			&i.IsReady,
			&i.RoomCode,
			&i.HostPlayer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, created_at, updated_at, avatar, nickname, is_ready FROM players WHERE id = ?
`

func (q *Queries) GetPlayerByID(ctx context.Context, id string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Nickname,
		&i.IsReady,
	)
	return i, err
}

const getRandomQuestionByRound = `-- name: GetRandomQuestionByRound :one
SELECT id, created_at, updated_at, game_name, round, enabled, question, language_code, group_id FROM questions WHERE game_name = ? AND round = ? AND language_code = ? AND enabled = TRUE ORDER BY RANDOM() LIMIT 1
`

type GetRandomQuestionByRoundParams struct {
	GameName     string
	Round        string
	LanguageCode string
}

func (q *Queries) GetRandomQuestionByRound(ctx context.Context, arg GetRandomQuestionByRoundParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, getRandomQuestionByRound, arg.GameName, arg.Round, arg.LanguageCode)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameName,
		&i.Round,
		&i.Enabled,
		&i.Question,
		&i.LanguageCode,
		&i.GroupID,
	)
	return i, err
}

const getRandomQuestionInGroup = `-- name: GetRandomQuestionInGroup :one
SELECT q.id, q.created_at, q.updated_at, game_name, round, enabled, question, language_code, group_id, qg.id, qg.created_at, qg.updated_at, group_name, group_type
FROM questions q
JOIN questions_groups qg ON q.group_id = qg.id
WHERE qg.group_type = 'questions'
  AND q.group_id = ?
  AND q.enabled = TRUE
  AND q.id != ?
ORDER BY RANDOM()
LIMIT 1
`

type GetRandomQuestionInGroupParams struct {
	GroupID string
	ID      string
}

type GetRandomQuestionInGroupRow struct {
	ID           string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	GameName     string
	Round        string
	Enabled      sql.NullBool
	Question     string
	LanguageCode string
	GroupID      string
	ID_2         string
	CreatedAt_2  sql.NullTime
	UpdatedAt_2  sql.NullTime
	GroupName    string
	GroupType    string
}

func (q *Queries) GetRandomQuestionInGroup(ctx context.Context, arg GetRandomQuestionInGroupParams) (GetRandomQuestionInGroupRow, error) {
	row := q.db.QueryRowContext(ctx, getRandomQuestionInGroup, arg.GroupID, arg.ID)
	var i GetRandomQuestionInGroupRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameName,
		&i.Round,
		&i.Enabled,
		&i.Question,
		&i.LanguageCode,
		&i.GroupID,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.GroupName,
		&i.GroupType,
	)
	return i, err
}

const getRoomByCode = `-- name: GetRoomByCode :one
SELECT id, created_at, updated_at, game_name, host_player, room_state, room_code FROM rooms WHERE room_code = ?
`

func (q *Queries) GetRoomByCode(ctx context.Context, roomCode string) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByCode, roomCode)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameName,
		&i.HostPlayer,
		&i.RoomState,
		&i.RoomCode,
	)
	return i, err
}

const getRoomByPlayerID = `-- name: GetRoomByPlayerID :one
SELECT r.id, r.created_at, r.updated_at, r.game_name, r.host_player, r.room_state, r.room_code FROM rooms r JOIN rooms_players rp ON r.id = rp.room_id WHERE rp.player_id = ?
`

func (q *Queries) GetRoomByPlayerID(ctx context.Context, playerID string) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByPlayerID, playerID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameName,
		&i.HostPlayer,
		&i.RoomState,
		&i.RoomCode,
	)
	return i, err
}

const removePlayerFromRoom = `-- name: RemovePlayerFromRoom :one
UPDATE rooms_players SET room_id = "" WHERE player_id = ? RETURNING room_id, player_id, created_at, updated_at
`

func (q *Queries) RemovePlayerFromRoom(ctx context.Context, playerID string) (RoomsPlayer, error) {
	row := q.db.QueryRowContext(ctx, removePlayerFromRoom, playerID)
	var i RoomsPlayer
	err := row.Scan(
		&i.RoomID,
		&i.PlayerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAvatar = `-- name: UpdateAvatar :one
UPDATE players SET avatar = ? WHERE id = ? RETURNING id, created_at, updated_at, avatar, nickname, is_ready
`

type UpdateAvatarParams struct {
	Avatar []byte
	ID     string
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updateAvatar, arg.Avatar, arg.ID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Nickname,
		&i.IsReady,
	)
	return i, err
}

const updateIsReady = `-- name: UpdateIsReady :one
UPDATE players SET is_ready = ? WHERE id = ? RETURNING id, created_at, updated_at, avatar, nickname, is_ready
`

type UpdateIsReadyParams struct {
	IsReady sql.NullBool
	ID      string
}

func (q *Queries) UpdateIsReady(ctx context.Context, arg UpdateIsReadyParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updateIsReady, arg.IsReady, arg.ID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Nickname,
		&i.IsReady,
	)
	return i, err
}

const updateNickname = `-- name: UpdateNickname :one
UPDATE players SET nickname = ? WHERE id = ? RETURNING id, created_at, updated_at, avatar, nickname, is_ready
`

type UpdateNicknameParams struct {
	Nickname string
	ID       string
}

func (q *Queries) UpdateNickname(ctx context.Context, arg UpdateNicknameParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updateNickname, arg.Nickname, arg.ID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Nickname,
		&i.IsReady,
	)
	return i, err
}

const updateRoomState = `-- name: UpdateRoomState :one
UPDATE rooms SET room_state = ? WHERE id = ? RETURNING id, created_at, updated_at, game_name, host_player, room_state, room_code
`

type UpdateRoomStateParams struct {
	RoomState string
	ID        string
}

func (q *Queries) UpdateRoomState(ctx context.Context, arg UpdateRoomStateParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, updateRoomState, arg.RoomState, arg.ID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GameName,
		&i.HostPlayer,
		&i.RoomState,
		&i.RoomCode,
	)
	return i, err
}
