package db

import "errors"

// RoomState represents the current state of a room
// ENUM(Created, Playing, Paused, Finished, Abandoned)
type RoomState int

// FibbingItGameState represents the current state of a Fibbing It game
// ENUM(FibbingITQuestion, FibbingItVoting, FibbingItRevealRole, FibbingItScoring, FibbingItNewRound, FibbingItWinner)
type FibbingItGameState int

// Const aliases for backwards compatibility - these will be generated by go-enum as prefixed versions
const (
	Created   = RoomStateCreated
	Playing   = RoomStatePlaying
	Paused    = RoomStatePaused
	Finished  = RoomStateFinished
	Abandoned = RoomStateAbandoned

	FibbingITQuestion   = FibbingItGameStateFibbingITQuestion
	FibbingItVoting     = FibbingItGameStateFibbingItVoting
	FibbingItRevealRole = FibbingItGameStateFibbingItRevealRole
	FibbingItScoring    = FibbingItGameStateFibbingItScoring
	FibbingItNewRound   = FibbingItGameStateFibbingItNewRound
	FibbingItWinner     = FibbingItGameStateFibbingItWinner
)

// RoomStateFromString provides backwards compatibility with the old function name
func RoomStateFromString(s string) (RoomState, error) {
	// Try parsing the new format first
	if state, err := ParseRoomState(s); err == nil {
		return state, nil
	}

	// Map the old string format to new format for backwards compatibility
	stringMap := map[string]string{
		"CREATED":   "Created",
		"PLAYING":   "Playing",
		"PAUSED":    "Paused",
		"FINISHED":  "Finished",
		"ABANDONED": "Abandoned",
	}

	if mapped, ok := stringMap[s]; ok {
		return ParseRoomState(mapped)
	}
	return RoomState(0), errors.New("invalid RoomState string")
}

// GameStateFromString provides backwards compatibility with the old function name
func GameStateFromString(s string) (FibbingItGameState, error) {
	// Try parsing the new format first
	if state, err := ParseFibbingItGameState(s); err == nil {
		return state, nil
	}

	// Map the old string format to new format for backwards compatibility
	stringMap := map[string]string{
		"FIBBING_IT_QUESTION":    "FibbingITQuestion",
		"FIBBING_IT_VOTING":      "FibbingItVoting",
		"FIBBING_IT_REVEAL_ROLE": "FibbingItRevealRole",
		"FIBBING_IT_SCORING":     "FibbingItScoring",
		"FIBBING_IT_NEW_ROUND":   "FibbingItNewRound",
		"FIBBING_IT_WINNER":      "FibbingItWinner",
	}

	if mapped, ok := stringMap[s]; ok {
		return ParseFibbingItGameState(mapped)
	}
	return FibbingItGameState(0), errors.New("invalid FibbingItGameState string")
}

// Note: String methods are now generated by go-enum
// The generated methods provide the enum values in the proper format
// Backwards compatibility is maintained through the const aliases above
