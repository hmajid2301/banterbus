// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package statemachine

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/service"
)

// NewMockStatePresenter creates a new instance of MockStatePresenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatePresenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatePresenter {
	mock := &MockStatePresenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStatePresenter is an autogenerated mock type for the StatePresenter type
type MockStatePresenter struct {
	mock.Mock
}

type MockStatePresenter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatePresenter) EXPECT() *MockStatePresenter_Expecter {
	return &MockStatePresenter_Expecter{mock: &_m.Mock}
}

// UpdateClientsAboutQuestion provides a mock function for the type MockStatePresenter
func (_mock *MockStatePresenter) UpdateClientsAboutQuestion(ctx context.Context, questionState service.QuestionState, showModal bool) error {
	ret := _mock.Called(ctx, questionState, showModal)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientsAboutQuestion")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service.QuestionState, bool) error); ok {
		r0 = returnFunc(ctx, questionState, showModal)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStatePresenter_UpdateClientsAboutQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientsAboutQuestion'
type MockStatePresenter_UpdateClientsAboutQuestion_Call struct {
	*mock.Call
}

// UpdateClientsAboutQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - questionState service.QuestionState
//   - showModal bool
func (_e *MockStatePresenter_Expecter) UpdateClientsAboutQuestion(ctx interface{}, questionState interface{}, showModal interface{}) *MockStatePresenter_UpdateClientsAboutQuestion_Call {
	return &MockStatePresenter_UpdateClientsAboutQuestion_Call{Call: _e.mock.On("UpdateClientsAboutQuestion", ctx, questionState, showModal)}
}

func (_c *MockStatePresenter_UpdateClientsAboutQuestion_Call) Run(run func(ctx context.Context, questionState service.QuestionState, showModal bool)) *MockStatePresenter_UpdateClientsAboutQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service.QuestionState
		if args[1] != nil {
			arg1 = args[1].(service.QuestionState)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutQuestion_Call) Return(err error) *MockStatePresenter_UpdateClientsAboutQuestion_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutQuestion_Call) RunAndReturn(run func(ctx context.Context, questionState service.QuestionState, showModal bool) error) *MockStatePresenter_UpdateClientsAboutQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientsAboutReveal provides a mock function for the type MockStatePresenter
func (_mock *MockStatePresenter) UpdateClientsAboutReveal(ctx context.Context, revealState service.RevealRoleState) error {
	ret := _mock.Called(ctx, revealState)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientsAboutReveal")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service.RevealRoleState) error); ok {
		r0 = returnFunc(ctx, revealState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStatePresenter_UpdateClientsAboutReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientsAboutReveal'
type MockStatePresenter_UpdateClientsAboutReveal_Call struct {
	*mock.Call
}

// UpdateClientsAboutReveal is a helper method to define mock.On call
//   - ctx context.Context
//   - revealState service.RevealRoleState
func (_e *MockStatePresenter_Expecter) UpdateClientsAboutReveal(ctx interface{}, revealState interface{}) *MockStatePresenter_UpdateClientsAboutReveal_Call {
	return &MockStatePresenter_UpdateClientsAboutReveal_Call{Call: _e.mock.On("UpdateClientsAboutReveal", ctx, revealState)}
}

func (_c *MockStatePresenter_UpdateClientsAboutReveal_Call) Run(run func(ctx context.Context, revealState service.RevealRoleState)) *MockStatePresenter_UpdateClientsAboutReveal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service.RevealRoleState
		if args[1] != nil {
			arg1 = args[1].(service.RevealRoleState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutReveal_Call) Return(err error) *MockStatePresenter_UpdateClientsAboutReveal_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutReveal_Call) RunAndReturn(run func(ctx context.Context, revealState service.RevealRoleState) error) *MockStatePresenter_UpdateClientsAboutReveal_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientsAboutScore provides a mock function for the type MockStatePresenter
func (_mock *MockStatePresenter) UpdateClientsAboutScore(ctx context.Context, scoringState service.ScoreState) error {
	ret := _mock.Called(ctx, scoringState)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientsAboutScore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service.ScoreState) error); ok {
		r0 = returnFunc(ctx, scoringState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStatePresenter_UpdateClientsAboutScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientsAboutScore'
type MockStatePresenter_UpdateClientsAboutScore_Call struct {
	*mock.Call
}

// UpdateClientsAboutScore is a helper method to define mock.On call
//   - ctx context.Context
//   - scoringState service.ScoreState
func (_e *MockStatePresenter_Expecter) UpdateClientsAboutScore(ctx interface{}, scoringState interface{}) *MockStatePresenter_UpdateClientsAboutScore_Call {
	return &MockStatePresenter_UpdateClientsAboutScore_Call{Call: _e.mock.On("UpdateClientsAboutScore", ctx, scoringState)}
}

func (_c *MockStatePresenter_UpdateClientsAboutScore_Call) Run(run func(ctx context.Context, scoringState service.ScoreState)) *MockStatePresenter_UpdateClientsAboutScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service.ScoreState
		if args[1] != nil {
			arg1 = args[1].(service.ScoreState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutScore_Call) Return(err error) *MockStatePresenter_UpdateClientsAboutScore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutScore_Call) RunAndReturn(run func(ctx context.Context, scoringState service.ScoreState) error) *MockStatePresenter_UpdateClientsAboutScore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientsAboutVoting provides a mock function for the type MockStatePresenter
func (_mock *MockStatePresenter) UpdateClientsAboutVoting(ctx context.Context, votingState service.VotingState) error {
	ret := _mock.Called(ctx, votingState)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientsAboutVoting")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service.VotingState) error); ok {
		r0 = returnFunc(ctx, votingState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStatePresenter_UpdateClientsAboutVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientsAboutVoting'
type MockStatePresenter_UpdateClientsAboutVoting_Call struct {
	*mock.Call
}

// UpdateClientsAboutVoting is a helper method to define mock.On call
//   - ctx context.Context
//   - votingState service.VotingState
func (_e *MockStatePresenter_Expecter) UpdateClientsAboutVoting(ctx interface{}, votingState interface{}) *MockStatePresenter_UpdateClientsAboutVoting_Call {
	return &MockStatePresenter_UpdateClientsAboutVoting_Call{Call: _e.mock.On("UpdateClientsAboutVoting", ctx, votingState)}
}

func (_c *MockStatePresenter_UpdateClientsAboutVoting_Call) Run(run func(ctx context.Context, votingState service.VotingState)) *MockStatePresenter_UpdateClientsAboutVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service.VotingState
		if args[1] != nil {
			arg1 = args[1].(service.VotingState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutVoting_Call) Return(err error) *MockStatePresenter_UpdateClientsAboutVoting_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutVoting_Call) RunAndReturn(run func(ctx context.Context, votingState service.VotingState) error) *MockStatePresenter_UpdateClientsAboutVoting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientsAboutWinner provides a mock function for the type MockStatePresenter
func (_mock *MockStatePresenter) UpdateClientsAboutWinner(ctx context.Context, winnerState service.WinnerState) error {
	ret := _mock.Called(ctx, winnerState)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientsAboutWinner")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service.WinnerState) error); ok {
		r0 = returnFunc(ctx, winnerState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStatePresenter_UpdateClientsAboutWinner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientsAboutWinner'
type MockStatePresenter_UpdateClientsAboutWinner_Call struct {
	*mock.Call
}

// UpdateClientsAboutWinner is a helper method to define mock.On call
//   - ctx context.Context
//   - winnerState service.WinnerState
func (_e *MockStatePresenter_Expecter) UpdateClientsAboutWinner(ctx interface{}, winnerState interface{}) *MockStatePresenter_UpdateClientsAboutWinner_Call {
	return &MockStatePresenter_UpdateClientsAboutWinner_Call{Call: _e.mock.On("UpdateClientsAboutWinner", ctx, winnerState)}
}

func (_c *MockStatePresenter_UpdateClientsAboutWinner_Call) Run(run func(ctx context.Context, winnerState service.WinnerState)) *MockStatePresenter_UpdateClientsAboutWinner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service.WinnerState
		if args[1] != nil {
			arg1 = args[1].(service.WinnerState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutWinner_Call) Return(err error) *MockStatePresenter_UpdateClientsAboutWinner_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStatePresenter_UpdateClientsAboutWinner_Call) RunAndReturn(run func(ctx context.Context, winnerState service.WinnerState) error) *MockStatePresenter_UpdateClientsAboutWinner_Call {
	_c.Call.Return(run)
	return _c
}
