// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package statemachine

import (
	"context"
	"time"

	"github.com/gofrs/uuid/v5"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/hmajid2301/banterbus/internal/service"
	"gitlab.com/hmajid2301/banterbus/internal/store/db"
)

// NewMockRoundServicer creates a new instance of MockRoundServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoundServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoundServicer {
	mock := &MockRoundServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoundServicer is an autogenerated mock type for the RoundServicer type
type MockRoundServicer struct {
	mock.Mock
}

type MockRoundServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoundServicer) EXPECT() *MockRoundServicer_Expecter {
	return &MockRoundServicer_Expecter{mock: &_m.Mock}
}

// AreAllPlayersAnswerReady provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) AreAllPlayersAnswerReady(ctx context.Context, gameStateID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for AreAllPlayersAnswerReady")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, gameStateID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_AreAllPlayersAnswerReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AreAllPlayersAnswerReady'
type MockRoundServicer_AreAllPlayersAnswerReady_Call struct {
	*mock.Call
}

// AreAllPlayersAnswerReady is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
func (_e *MockRoundServicer_Expecter) AreAllPlayersAnswerReady(ctx interface{}, gameStateID interface{}) *MockRoundServicer_AreAllPlayersAnswerReady_Call {
	return &MockRoundServicer_AreAllPlayersAnswerReady_Call{Call: _e.mock.On("AreAllPlayersAnswerReady", ctx, gameStateID)}
}

func (_c *MockRoundServicer_AreAllPlayersAnswerReady_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID)) *MockRoundServicer_AreAllPlayersAnswerReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundServicer_AreAllPlayersAnswerReady_Call) Return(b bool, err error) *MockRoundServicer_AreAllPlayersAnswerReady_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRoundServicer_AreAllPlayersAnswerReady_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID) (bool, error)) *MockRoundServicer_AreAllPlayersAnswerReady_Call {
	_c.Call.Return(run)
	return _c
}

// AreAllPlayersVotingReady provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) AreAllPlayersVotingReady(ctx context.Context, gameStateID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for AreAllPlayersVotingReady")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, gameStateID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_AreAllPlayersVotingReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AreAllPlayersVotingReady'
type MockRoundServicer_AreAllPlayersVotingReady_Call struct {
	*mock.Call
}

// AreAllPlayersVotingReady is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
func (_e *MockRoundServicer_Expecter) AreAllPlayersVotingReady(ctx interface{}, gameStateID interface{}) *MockRoundServicer_AreAllPlayersVotingReady_Call {
	return &MockRoundServicer_AreAllPlayersVotingReady_Call{Call: _e.mock.On("AreAllPlayersVotingReady", ctx, gameStateID)}
}

func (_c *MockRoundServicer_AreAllPlayersVotingReady_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID)) *MockRoundServicer_AreAllPlayersVotingReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundServicer_AreAllPlayersVotingReady_Call) Return(b bool, err error) *MockRoundServicer_AreAllPlayersVotingReady_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRoundServicer_AreAllPlayersVotingReady_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID) (bool, error)) *MockRoundServicer_AreAllPlayersVotingReady_Call {
	_c.Call.Return(run)
	return _c
}

// FinishGame provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) FinishGame(ctx context.Context, gameStateID uuid.UUID) error {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for FinishGame")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoundServicer_FinishGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishGame'
type MockRoundServicer_FinishGame_Call struct {
	*mock.Call
}

// FinishGame is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
func (_e *MockRoundServicer_Expecter) FinishGame(ctx interface{}, gameStateID interface{}) *MockRoundServicer_FinishGame_Call {
	return &MockRoundServicer_FinishGame_Call{Call: _e.mock.On("FinishGame", ctx, gameStateID)}
}

func (_c *MockRoundServicer_FinishGame_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID)) *MockRoundServicer_FinishGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundServicer_FinishGame_Call) Return(err error) *MockRoundServicer_FinishGame_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoundServicer_FinishGame_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID) error) *MockRoundServicer_FinishGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameState provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) GetGameState(ctx context.Context, gameStateID uuid.UUID) (db.FibbingItGameState, error) {
	ret := _mock.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for GetGameState")
	}

	var r0 db.FibbingItGameState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.FibbingItGameState, error)); ok {
		return returnFunc(ctx, gameStateID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.FibbingItGameState); ok {
		r0 = returnFunc(ctx, gameStateID)
	} else {
		r0 = ret.Get(0).(db.FibbingItGameState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_GetGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameState'
type MockRoundServicer_GetGameState_Call struct {
	*mock.Call
}

// GetGameState is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
func (_e *MockRoundServicer_Expecter) GetGameState(ctx interface{}, gameStateID interface{}) *MockRoundServicer_GetGameState_Call {
	return &MockRoundServicer_GetGameState_Call{Call: _e.mock.On("GetGameState", ctx, gameStateID)}
}

func (_c *MockRoundServicer_GetGameState_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID)) *MockRoundServicer_GetGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoundServicer_GetGameState_Call) Return(fibbingItGameState db.FibbingItGameState, err error) *MockRoundServicer_GetGameState_Call {
	_c.Call.Return(fibbingItGameState, err)
	return _c
}

func (_c *MockRoundServicer_GetGameState_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID) (db.FibbingItGameState, error)) *MockRoundServicer_GetGameState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToQuestion provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) UpdateStateToQuestion(ctx context.Context, gameStateID uuid.UUID, deadline time.Time, nextRound bool) (service.QuestionState, error) {
	ret := _mock.Called(ctx, gameStateID, deadline, nextRound)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToQuestion")
	}

	var r0 service.QuestionState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, bool) (service.QuestionState, error)); ok {
		return returnFunc(ctx, gameStateID, deadline, nextRound)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, bool) service.QuestionState); ok {
		r0 = returnFunc(ctx, gameStateID, deadline, nextRound)
	} else {
		r0 = ret.Get(0).(service.QuestionState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, bool) error); ok {
		r1 = returnFunc(ctx, gameStateID, deadline, nextRound)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_UpdateStateToQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToQuestion'
type MockRoundServicer_UpdateStateToQuestion_Call struct {
	*mock.Call
}

// UpdateStateToQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
//   - deadline time.Time
//   - nextRound bool
func (_e *MockRoundServicer_Expecter) UpdateStateToQuestion(ctx interface{}, gameStateID interface{}, deadline interface{}, nextRound interface{}) *MockRoundServicer_UpdateStateToQuestion_Call {
	return &MockRoundServicer_UpdateStateToQuestion_Call{Call: _e.mock.On("UpdateStateToQuestion", ctx, gameStateID, deadline, nextRound)}
}

func (_c *MockRoundServicer_UpdateStateToQuestion_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time, nextRound bool)) *MockRoundServicer_UpdateStateToQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRoundServicer_UpdateStateToQuestion_Call) Return(questionState service.QuestionState, err error) *MockRoundServicer_UpdateStateToQuestion_Call {
	_c.Call.Return(questionState, err)
	return _c
}

func (_c *MockRoundServicer_UpdateStateToQuestion_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time, nextRound bool) (service.QuestionState, error)) *MockRoundServicer_UpdateStateToQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToReveal provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) UpdateStateToReveal(ctx context.Context, gameStateID uuid.UUID, deadline time.Time) (service.RevealRoleState, error) {
	ret := _mock.Called(ctx, gameStateID, deadline)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToReveal")
	}

	var r0 service.RevealRoleState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (service.RevealRoleState, error)); ok {
		return returnFunc(ctx, gameStateID, deadline)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) service.RevealRoleState); ok {
		r0 = returnFunc(ctx, gameStateID, deadline)
	} else {
		r0 = ret.Get(0).(service.RevealRoleState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = returnFunc(ctx, gameStateID, deadline)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_UpdateStateToReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToReveal'
type MockRoundServicer_UpdateStateToReveal_Call struct {
	*mock.Call
}

// UpdateStateToReveal is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
//   - deadline time.Time
func (_e *MockRoundServicer_Expecter) UpdateStateToReveal(ctx interface{}, gameStateID interface{}, deadline interface{}) *MockRoundServicer_UpdateStateToReveal_Call {
	return &MockRoundServicer_UpdateStateToReveal_Call{Call: _e.mock.On("UpdateStateToReveal", ctx, gameStateID, deadline)}
}

func (_c *MockRoundServicer_UpdateStateToReveal_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time)) *MockRoundServicer_UpdateStateToReveal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRoundServicer_UpdateStateToReveal_Call) Return(revealRoleState service.RevealRoleState, err error) *MockRoundServicer_UpdateStateToReveal_Call {
	_c.Call.Return(revealRoleState, err)
	return _c
}

func (_c *MockRoundServicer_UpdateStateToReveal_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time) (service.RevealRoleState, error)) *MockRoundServicer_UpdateStateToReveal_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToScore provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) UpdateStateToScore(ctx context.Context, gameStateID uuid.UUID, deadline time.Time, scoring service.Scoring) (service.ScoreState, error) {
	ret := _mock.Called(ctx, gameStateID, deadline, scoring)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToScore")
	}

	var r0 service.ScoreState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, service.Scoring) (service.ScoreState, error)); ok {
		return returnFunc(ctx, gameStateID, deadline, scoring)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, service.Scoring) service.ScoreState); ok {
		r0 = returnFunc(ctx, gameStateID, deadline, scoring)
	} else {
		r0 = ret.Get(0).(service.ScoreState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, service.Scoring) error); ok {
		r1 = returnFunc(ctx, gameStateID, deadline, scoring)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_UpdateStateToScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToScore'
type MockRoundServicer_UpdateStateToScore_Call struct {
	*mock.Call
}

// UpdateStateToScore is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
//   - deadline time.Time
//   - scoring service.Scoring
func (_e *MockRoundServicer_Expecter) UpdateStateToScore(ctx interface{}, gameStateID interface{}, deadline interface{}, scoring interface{}) *MockRoundServicer_UpdateStateToScore_Call {
	return &MockRoundServicer_UpdateStateToScore_Call{Call: _e.mock.On("UpdateStateToScore", ctx, gameStateID, deadline, scoring)}
}

func (_c *MockRoundServicer_UpdateStateToScore_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time, scoring service.Scoring)) *MockRoundServicer_UpdateStateToScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 service.Scoring
		if args[3] != nil {
			arg3 = args[3].(service.Scoring)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRoundServicer_UpdateStateToScore_Call) Return(scoreState service.ScoreState, err error) *MockRoundServicer_UpdateStateToScore_Call {
	_c.Call.Return(scoreState, err)
	return _c
}

func (_c *MockRoundServicer_UpdateStateToScore_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time, scoring service.Scoring) (service.ScoreState, error)) *MockRoundServicer_UpdateStateToScore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToVoting provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) UpdateStateToVoting(ctx context.Context, gameStateID uuid.UUID, deadline time.Time) (service.VotingState, error) {
	ret := _mock.Called(ctx, gameStateID, deadline)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToVoting")
	}

	var r0 service.VotingState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (service.VotingState, error)); ok {
		return returnFunc(ctx, gameStateID, deadline)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) service.VotingState); ok {
		r0 = returnFunc(ctx, gameStateID, deadline)
	} else {
		r0 = ret.Get(0).(service.VotingState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = returnFunc(ctx, gameStateID, deadline)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_UpdateStateToVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToVoting'
type MockRoundServicer_UpdateStateToVoting_Call struct {
	*mock.Call
}

// UpdateStateToVoting is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
//   - deadline time.Time
func (_e *MockRoundServicer_Expecter) UpdateStateToVoting(ctx interface{}, gameStateID interface{}, deadline interface{}) *MockRoundServicer_UpdateStateToVoting_Call {
	return &MockRoundServicer_UpdateStateToVoting_Call{Call: _e.mock.On("UpdateStateToVoting", ctx, gameStateID, deadline)}
}

func (_c *MockRoundServicer_UpdateStateToVoting_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time)) *MockRoundServicer_UpdateStateToVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRoundServicer_UpdateStateToVoting_Call) Return(votingState service.VotingState, err error) *MockRoundServicer_UpdateStateToVoting_Call {
	_c.Call.Return(votingState, err)
	return _c
}

func (_c *MockRoundServicer_UpdateStateToVoting_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time) (service.VotingState, error)) *MockRoundServicer_UpdateStateToVoting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateToWinner provides a mock function for the type MockRoundServicer
func (_mock *MockRoundServicer) UpdateStateToWinner(ctx context.Context, gameStateID uuid.UUID, deadline time.Time) (service.WinnerState, error) {
	ret := _mock.Called(ctx, gameStateID, deadline)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateToWinner")
	}

	var r0 service.WinnerState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (service.WinnerState, error)); ok {
		return returnFunc(ctx, gameStateID, deadline)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) service.WinnerState); ok {
		r0 = returnFunc(ctx, gameStateID, deadline)
	} else {
		r0 = ret.Get(0).(service.WinnerState)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = returnFunc(ctx, gameStateID, deadline)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoundServicer_UpdateStateToWinner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateToWinner'
type MockRoundServicer_UpdateStateToWinner_Call struct {
	*mock.Call
}

// UpdateStateToWinner is a helper method to define mock.On call
//   - ctx context.Context
//   - gameStateID uuid.UUID
//   - deadline time.Time
func (_e *MockRoundServicer_Expecter) UpdateStateToWinner(ctx interface{}, gameStateID interface{}, deadline interface{}) *MockRoundServicer_UpdateStateToWinner_Call {
	return &MockRoundServicer_UpdateStateToWinner_Call{Call: _e.mock.On("UpdateStateToWinner", ctx, gameStateID, deadline)}
}

func (_c *MockRoundServicer_UpdateStateToWinner_Call) Run(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time)) *MockRoundServicer_UpdateStateToWinner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRoundServicer_UpdateStateToWinner_Call) Return(winnerState service.WinnerState, err error) *MockRoundServicer_UpdateStateToWinner_Call {
	_c.Call.Return(winnerState, err)
	return _c
}

func (_c *MockRoundServicer_UpdateStateToWinner_Call) RunAndReturn(run func(ctx context.Context, gameStateID uuid.UUID, deadline time.Time) (service.WinnerState, error)) *MockRoundServicer_UpdateStateToWinner_Call {
	_c.Call.Return(run)
	return _c
}
