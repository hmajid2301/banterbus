// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package statemachine

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockState creates a new instance of MockState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockState {
	mock := &MockState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockState is an autogenerated mock type for the State type
type MockState struct {
	mock.Mock
}

type MockState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockState) EXPECT() *MockState_Expecter {
	return &MockState_Expecter{mock: &_m.Mock}
}

// Start provides a mock function for the type MockState
func (_mock *MockState) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockState_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockState_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockState_Expecter) Start(ctx interface{}) *MockState_Start_Call {
	return &MockState_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockState_Start_Call) Run(run func(ctx context.Context)) *MockState_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockState_Start_Call) Return(err error) *MockState_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockState_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockState_Start_Call {
	_c.Call.Return(run)
	return _c
}
