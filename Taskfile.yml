version: "3"

tasks:
  dev:
    desc: Start the app in dev mode with live-reloading.
    cmds:
      - air

  build:dev:
    desc: Build the app for development, generates all the files needed for the binary.
    cmds:
      - templ generate
      - tailwindcss -i ./static/css/tailwind.css -o ./static/css/styles.css
      - go build -o ./tmp/main .

  lint:
    desc: Runs the linter.
    cmds:
      - golangci-lint run {{.CLI_ARGS}} ./...

  docker:build:
    desc: Builds a Docker image using Nix.
    cmds:
      - nix build .#container

  docker:load:
    desc: Loads the Docker image from tar (in results).
    cmds:
      - docker load < result

  docker:publish:
    desc: Publishes the Docker image
    deps:
      - docker:load
    cmds:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - docker image tag banterbus:0.1 $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
      - docker image tag banterbus:0.1 $CI_REGISTRY_IMAGE:latest
      - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:latest
      - docker push $CI_REGISTRY_IMAGE:latest

  format:
    desc: Runs the formatter.
    cmds:
      - goimports -local gitlab.com/hmajid2301/banterbus -w .
      - golines -m 120 .

  tests:unit:
    desc: Runs all the unit tests.
    cmds:
      - go test -v -short ./...

  tests:integration:
    desc: Runs all the integration tests.
    cmds:
      - go test -run ^TestIntegration -v ./...

  tests:
    desc: Runs all the tests.
    cmds:
      - go test -run ./...

  coverage:
    desc: Run the integration tests and gets the code coverage
    cmds:
      - go test -covermode count -coverprofile=coverage.txt -v ./... | tee output.txt
      - cat output.txt | go-junit-report -set-exit-code > report.xml
      - gocover-cobertura < coverage.txt > coverage.xml

  generate:sqlc:
    desc: Generates the code to interact with SQL DB.
    cmds:
      - sqlc generate

  release:
    desc: Release the CLI tool.
    cmds:
      - goreleaser release --clean --verbose
