version: "3"

tasks:
  dev:
    desc: Start the app in dev mode with live-reloading.
    env:
      BANTERBUS_LOG_LEVEL: debug
    cmds:
      - task: watch
      - air

  lint:
    desc: Runs the linter.
    cmds:
      - golangci-lint run ./...

  format:
    desc: Runs the formatter.
    env:
      LOCATIONS: "./internal/ ./tests/ main.go"
    cmds:
      - goimports -local gitlab.com/hmajid2301/banterbus -w $LOCATIONS
      - golines -m 120 -w $LOCATIONS

  tests:
    desc: Runs all the tests.
    cmds:
      - gotestsum

  tests:unit:
    desc: Runs all the unit tests.
    cmds:
      - gotestsum --format testname --hide-summary=skipped -- -cover -skip '^TestIntegration' ./internal/... {{.CLI_ARGS}}

  tests:integration:
    desc: Runs all the integration tests.
    cmds:
      - gotestsum --format testname --hide-summary=skipped -- -cover -run ^TestIntegration ./internal/... {{.CLI_ARGS}}

  tests:e2e:
    desc: Runs e2e tests with playwright.
    cmds:
      - gotestsum --format standard-verbose -- -cover ./tests/e2e/... {{.CLI_ARGS}}

  coverage:
    desc: show coverage
    cmds:
      - go tool covdata textfmt -i="coverage" -o combined-coverage.txt
      - go tool cover -func=combined-coverage.txt

  watch:
    desc: Watch for file changes and run commands, i.e. generate templates or tailwindcss
    env:
      TEMPL_EXPERIMENT: rawgo
    cmds:
      - templ generate -watch --proxy="http://localhost:8080" --open-browser=true &
      - tailwindcss --watch -i ./static/css/tailwind.css -o ./static/css/styles.css --minify &
      # TODO: do we want to add watch commands for the following?
      # - mockery --all
      # - sqlc generate

  generate:
    desc: Generates all the code needed for the project i.e. sqlc, templ & tailwindcss
    env:
      TEMPL_EXPERIMENT: rawgo
    cmds:
      - mockery --all
      - templ generate
      - tailwindcss -i ./static/css/tailwind.css -o ./static/css/styles.css --minify
      - sqlc generate
      - gomod2nix generate
      - task: format

  release:
    desc: Release the CLI tool.
    cmds:
      - goreleaser release --clean --verbose

  docker:publish:
    desc: Build and publish the Docker image
    env:
      LOCAL_IMAGE: banterbus
      FLAKE_TARGET: container
      IMMUTABLE: "true"
    cmds:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - |
        if [ "$IMMUTABLE" = "true" ]; then
          if docker pull $IMAGE; then
            echo "Image with tag $IMAGE_TAG already exists. Failing the pipeline."
            exit 1
          fi
        fi
      - nix build .#${FLAKE_TARGET}
      - docker load < result
      - docker image tag $LOCAL_IMAGE:latest $IMAGE
      - docker push $IMAGE
