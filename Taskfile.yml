version: "3"

tasks:
  build:
    desc: Build the binary in a tmp location.
    cmds:
      - go build -o ./tmp/main main.go

  run:
    desc: Run the binary.
    cmds:
      - go run main.go

  dev:
    desc: Start the app in dev mode with live-reloading.
    summary: |
      Start the app in dev mode with live-reloading.

      This command starts a local version of the app with reloading enabled.
      So when the code changes the server restarts. It also watches for changes in `templ` and `tailwind` classes.
      We reload using air. It also makes sure that the docker containers are started first that the app depends on.
    env:
      BANTERBUS_LOG_LEVEL: debug
    cmds:
      - podman-compose up -d --force-recreate --remove-orphans
      - concurrently "air" "task watch"

  lint:
    desc: Runs the linter.
    cmds:
      - golangci-lint run ./...

  format:
    desc: Runs the formatter.
    env:
      LOCATIONS: "./internal/ ./tests/ main.go"
    cmds:
      - goimports -local gitlab.com/hmajid2301/banterbus -w $LOCATIONS
      - golines -m 120 -w $LOCATIONS
      - sqlfluff format internal/store/db/sqlc/ --dialect postgres --disable-progress-bar
      - templ fmt internal/views
      - rustywind internal/views/ --write

  tests:
    desc: Runs all the tests.
    cmds:
      - gotestsum -- -parallel 0

  tests:unit:
    desc: Runs all the unit tests.
    cmds:
      - gotestsum --format testname --hide-summary=skipped -- -coverprofile coverage.out -cover -covermode=atomic -skip '^TestIntegration' -parallel 0 ./internal/... {{.CLI_ARGS}}

  tests:integration:
    desc: Runs all the integration tests.
    cmds:
      - gotestsum --format testname --hide-summary=skipped -- -coverprofile coverage.out -cover -covermode=atomic -run ^TestIntegration -parallel 0 ./internal/... {{.CLI_ARGS}}

  tests:e2e:
    desc: Runs e2e tests with playwright.
    env:
      SHOW_VOTING_SCREEN_FOR: 10s
      BANTERBUS_DISABLE_TELEMETRY: true
    cmds:
      - |
        concurrently \
          --names "SERVER,TESTS" \
          --success first \
          "task run" --kill-others \
          "until curl -sSf http://localhost:8080/health >/dev/null; do sleep 2; done && \
           gotestsum --format testname --hide-summary=skipped --packages='./tests/e2e' -- \
             -coverprofile coverage.out \
             -cover -covermode=atomic -parallel 0 {{.CLI_ARGS}}"

  tests:e2e:quiet:
    desc: Runs e2e tests with playwright without any logging as this can be super verbose.
    env:
      BANTERBUS_LOG_DISABLED: true
      BANTERBUS_PLAYWRIGHT_HEADLESS: true
    cmds:
      - gotestsum --format dots -- ./tests/e2e/... {{.CLI_ARGS}}

  tests:smoke:
    desc: Runs e2e smoke tests with playwright, expected to run against a live instance i.e. dev or prod.
    env:
      BANTERBUS_LOG_DISABLED: true
      BANTERBUS_PLAYWRIGHT_HEADLESS: true
    cmds:
      - gotestsum --format standard-verbose -- ./tests/e2e/... -run '^TestSmoke' {{.CLI_ARGS}}

  coverage:
    desc: show coverage
    cmds:
      - go tool covdata textfmt -i="coverage" -o combined-coverage.txt
      - go tool cover -func=combined-coverage.txt -o coverage.xml

  watch:
    desc: Watch for file changes and run commands, i.e. generate templates or tailwindcss
    env:
      TEMPL_EXPERIMENT: rawgo
    cmds:
      - templ generate -watch --proxy="http://localhost:8080" --open-browser=true &
      - tailwindcss --watch=always -i ./static/css/tailwind.css -o ./static/css/styles.css --minify &
      # TODO: do we want to add watch commands for the following?
      # - mockery --all
      # - sqlc generate

  generate:
    desc: Generates all the code needed for the project i.e. sqlc, templ & tailwindcss
    env:
      TEMPL_EXPERIMENT: rawgo
    cmds:
      - templ generate
      - tailwindcss -i ./static/css/tailwind.css -o ./static/css/styles.css --minify
      - mockery
      - sqlc generate
      - gomod2nix generate
      - task: format

  release:
    desc: Release the web app.
    cmds:
      - goreleaser release --clean --verbose

  docker:build:
    desc: Build the Docker image
    env:
      LOCAL_IMAGE: banterbus
      FLAKE_TARGET: container
    cmds:
      - nix build .#${FLAKE_TARGET}
      - docker load < result

  docker:publish:
    desc: Build and publish the Docker image
    env:
      LOCAL_IMAGE: banterbus
      FLAKE_TARGET: container
      IMMUTABLE: "true"
    cmds:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - |
        if [ "$IMMUTABLE" = "true" ]; then
          if docker pull $IMAGE; then
            echo "Image with tag $IMAGE_TAG already exists. Failing the pipeline."
            exit 1
          fi
        fi
      - task: docker:build
      - docker image tag $LOCAL_IMAGE:latest $IMAGE
      - docker push $IMAGE

  ci:local:
    desc: Run gitlab ci locally
    cmds:
      - job=$(gitlab-ci-local --list-all | tail -n +4 | awk '{print $1}' | gum filter --placeholder "Select job") && gitlab-ci-local "$job"
