image: nixos/nix

workflow:
  auto_cancel:
    on_new_commit: interruptible

default:
  interruptible: true

variables:
  IMAGE_TAG: v0.1.6
  BANTERBUS_CI_IMAGE: $CI_REGISTRY_IMAGE/ci:$IMAGE_TAG
  POSTGRES_USER: banterbus
  POSTGRES_PASSWORD: banterbus
  POSTGRES_HOST_AUTH_METHOD: trust

stages:
  - pre
  - deps
  - test
  - build
  - deploy
  - release

.task:
  stage: test
  image: $BANTERBUS_CI_IMAGE
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  cache:
    paths:
      - ${GOPATH}/pkg/mod
    policy: pull
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  before_script:
    # INFO: Used to create directory, needed for tests and linter
    - mkdir -p /tmp

.test:
  extends:
    - .task
  variables:
     GOTESTSUM_JUNITFILE: "report.xml"
     XDG_DATA_HOME: "/tmp/"
     GOTEST_EXTRA_ARGS: '-args -test.gocoverdir=$CI_PROJECT_DIR/coverage'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  before_script:
    - mkdir -p $CI_PROJECT_DIR/coverage /tmp
  artifacts:
    paths:
      - coverage
    reports:
      junit: report.xml

.docker:
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMMUTABLE: "true"
  services:
    - docker:dind
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  script:
    - echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
    - nix-env -iA nixpkgs.docker nixpkgs.go-task
    - task docker:publish

.deploy:
  stage: deploy
  image:
    name: ghcr.io/fluxcd/flux-cli:v2.0.0
    entrypoint: ['']
  timeout: 5m
  script:
    - IMAGE=$(cat image_name.txt)
    - kubectl config use-context hmajid2301/k3s-config:ms01
    - flux reconcile image repository banterbus
    - |
      echo "Waiting for deployment to update to image: $IMAGE"
      until kubectl get deployment banterbus -n $NAMESPACE -o jsonpath="{.spec.template.spec.containers[0].image}" | grep -q "$IMAGE"; do
        echo "Deployment not updated yet. Waiting..."
        sleep 10
      done
      echo "Deployment updated to image: $IMAGE"
    - kubectl wait --for=condition=available --timeout=600s deployment/banterbus -n $NAMESPACE


publish:docker:ci:
  stage: pre
  variables:
    IMAGE: $BANTERBUS_CI_IMAGE
    FLAKE_TARGET: container-ci
    LOCAL_IMAGE: banterbus-dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "containers/ci.nix"
        - "flake.nix"
        - "flake.lock"
  extends:
    - .docker
  before_script:
    - |
      if ! git diff --name-only HEAD~1 | grep -q ".nix"; then
        echo "No changes in *.nix in the current commit. Skipping job."
        exit 0
      fi

download:dependency:
  extends:
    - .task
  stage: deps
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - go.mod
        - go.sum
  script:
    - go mod download
  cache:
    policy: pull-push

lint:
  extends:
    - .task
  script:
    - task lint

format:
  extends:
    - .task
  script:
    - task format
    - git diff --exit-code

generate:
  extends:
    - .task
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - task generate
    - git diff --exit-code

tests:unit:
  extends:
    - .test
  script:
    - task tests:unit -- ${GOTEST_EXTRA_ARGS}

tests:integration:
  extends:
    - .test
  services:
    - redis:7.4.1
    - name: postgres:16.6
      alias: postgres
      command:
        - "postgres"
        - "-c"
        - "max_connections=1000"
    - name: ghcr.io/navikt/mock-oauth2-server:2.1.10
      alias: oauth2
  variables:
    BANTERBUS_REDIS_ADDRESS: redis:6379
    BANTERBUS_DB_URI: postgresql://banterbus:banterbus@postgres:5432
    BANTERBUS_JWKS_URL: http://oauth2:8080/default/jwks
  script:
    - task tests:integration -- ${GOTEST_EXTRA_ARGS}

test:e2e:
  extends:
    - .test
  services:
    - redis:7.4.1
    - postgres:16.6
    - name: ghcr.io/navikt/mock-oauth2-server:2.1.10
      alias: oauth2
  variables:
    BANTERBUS_REDIS_ADDRESS: redis:6379
    BANTERBUS_DB_URI: postgresql://banterbus:banterbus@postgres:5432
    BANTERBUS_JWKS_URL: http://oauth2:8080/default/jwks
  script:
    - task tests:e2e -- ${GOTEST_EXTRA_ARGS}
  artifacts:
    when: always
    reports:
      junit: report.xml
    paths:
      - coverage
      - tests/e2e/videos/*

combine:coverage:
  stage: build
  extends:
    - .task
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  script:
    - task coverage
  coverage: /total:\s+\(statements\)\s+\d+.\d+%/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

publish:dev:docker:
  stage: build
  needs: []
  variables:
    FLAKE_TARGET: container
    LOCAL_IMAGE: banterbus
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  extends:
    - .docker
  before_script:
    - export IMAGE="$CI_REGISTRY_IMAGE:dev-$CI_COMMIT_SHA-$(date +%s)"
    - echo $IMAGE > image_name.txt
  artifacts:
    paths:
      - image_name.txt

check_deploy:dev:
  extends: .deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    NAMESPACE: dev
  dependencies:
    - publish:dev:docker

#INFO: Because Nix docker builds are immutable, we can just rebuild the image here for production
# If we wanted to be more efficient we could work out way to retag a dev image. But this is good enough for now.
publish:prod:docker:
  stage: build
  variables:
    FLAKE_TARGET: container
    LOCAL_IMAGE: banterbus
  services:
    - docker:27-dind
  extends:
    - .docker
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  before_script:
    - export IMAGE="$CI_REGISTRY_IMAGE:prod-$CI_COMMIT_SHA-$(date +%s)"
    - echo $IMAGE > image_name.txt
  artifacts:
    paths:
      - image_name.txt

check_deploy:prod:
  extends: .deploy
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  variables:
    NAMESPACE: prod
  dependencies:
    - publish:prod:docker

release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  extends:
    - .task
  variables:
    GIT_DEPTH: 0
  script:
    - task release

smoke:tests:e2e:
  extends:
    - .test
  variables:
    BANTERBUS_PLAYWRIGHT_URL: https://banterbus.games
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
  script:
    - task tests:e2e -- ${GOTEST_EXTRA_ARGS}
  after_script:
    - |
      if [ "$CI_JOB_STATUS" != "success" ]; then
        curl -X POST \
            -H "Authorization: Bearer $NOTIFY_TOKEN" "https://notify.homelab.haseebmajid.dev/message" \
            -F "title=Job Failed" \
            -F "message=The smoke:tests:e2e job has failed in the pipeline. Job URL: $CI_JOB_URL"
      fi
