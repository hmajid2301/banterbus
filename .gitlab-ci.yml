image: nixos/nix

workflow:
  auto_cancel:
    on_new_commit: interruptible

default:
  interruptible: true

variables:
  IMAGE_TAG: v0.1.11
  BANTERBUS_CI_IMAGE: $CI_REGISTRY_IMAGE/ci:$IMAGE_TAG
  BANTERBUS_DB_URI: postgresql://postgres:postgres@docker:5432?sslmode=disable
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

stages:
  - pre
  - deps
  - test
  - build
  - deploy
  - release
  - post

.task:
  stage: test
  image: $BANTERBUS_CI_IMAGE
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  cache:
    paths:
      - ${GOPATH}/pkg/mod
    policy: pull
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    # INFO: Used to create directory, needed for tests and linter
    - mkdir -p /tmp

.test:
  extends:
    - .task
  # INFO: Not needed for unit tests but simplifies this file a bit.
  services:
    - name: docker:dind
  variables:
     GOTESTSUM_JUNITFILE: "report.xml"
     XDG_DATA_HOME: "/tmp/"
     GOTEST_EXTRA_ARGS: '-args -test.gocoverdir=$CI_PROJECT_DIR/coverage -test.parallel 10'
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
  before_script:
    - mkdir -p $CI_PROJECT_DIR/coverage /tmp  $CI_PROJECT_DIR/e2e/screenshots
    - docker login -u "$CI_DEPENDENCY_PROXY_USER" -p "$CI_DEPENDENCY_PROXY_PASSWORD" "$CI_DEPENDENCY_PROXY_SERVER"
  artifacts:
    paths:
      - coverage
    reports:
      junit: report.xml

.docker:
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMMUTABLE: "true"
  services:
    - docker:dind
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  before_script:
    - nix-env -iA nixpkgs.docker nixpkgs.go-task nixpkgs.attic-client nixpkgs.tailscale nixpkgs.cacert
    - mkdir -p /etc/nix
    - |
      cat >> /etc/nix/nix.conf << EOF
      experimental-features = nix-command flakes
      extra-platforms = x86_64-linux i686-linux
      system-features = benchmark big-parallel nixos-test i686
      substituters = https://attic.homelab.haseebmajid.dev/system?priority=43 https://nix-community.cachix.org?priority=41 https://numtide.cachix.org?priority=42 https://cache.nixos.org/
      trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= system:5M8uBPjS68HTadSbeCs0Jiu0Z1tJBNdahtKBCXhl+Z0= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= numtide.cachix.org-1:2ps1kLBUWjxIneOy1Ik6cQjb41X0iXVXeHigGmycPPE=
      EOF
    - |
      if [ -n "$ATTIC_AUTH_KEY" ]; then
        echo "machine attic.homelab.haseebmajid.dev password $ATTIC_AUTH_KEY" > /etc/nix/netrc
      fi
    - mkdir -p ~/.ssh /etc/ssh
    - chmod 700 ~/.ssh
    - ssh-keygen -t ed25519 -N "" -f ~/.ssh/id_ed25519
    - ssh-keygen -t ed25519 -N "" -f /etc/ssh/ssh_host_ed25519_key
    - |
      cat >> ~/.ssh/config << EOF
      Host *
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
      EOF
    - export SSH_ASKPASS_REQUIRE=never
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_ed25519 2>/dev/null
    - |
      cat > /etc/resolv.conf << EOF
      nameserver 1.1.1.1
      nameserver 8.8.8.8
      EOF
    - |
      if [ -n "$TAILSCALE_AUTH_KEY" ]; then
        echo "Setting up Tailscale connection..."
        tailscaled --state="mem:" --statedir=/var/lib/tailscale &
        tailscale up --authkey=${TAILSCALE_AUTH_KEY} --hostname="gitlab-$(cat /etc/hostname)" --accept-routes --ssh
      else
        echo "TAILSCALE_AUTH_KEY not set, skipping Tailscale setup"
      fi
    - |
      if [ -n "$ATTIC_AUTH_KEY" ]; then
        echo "Setting up Attic binary cache..."
        attic login homelab https://attic.homelab.haseebmajid.dev $ATTIC_AUTH_KEY
        attic use homelab:main
        attic watch-store homelab:main &
      else
        echo "ATTIC_AUTH_KEY not set, skipping Attic setup"
      fi
  script:
    - task docker:publish


publish:docker:ci:
  stage: pre
  variables:
    IMAGE: $BANTERBUS_CI_IMAGE
    FLAKE_TARGET: container-ci
    LOCAL_IMAGE: banterbus-dev
    IMMUTABLE: true
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /UPDATE_IMAGE_TAG/
      when: on_success
  extends:
    - .docker
  script:
    - task docker:publish

download:dependency:
  extends:
    - .task
  stage: deps
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - go.mod
        - go.sum
  script:
    - go mod download
  cache:
    policy: pull-push

lint:
  extends:
    - .task
  script:
    - task lint

generate:
  extends:
    - .task
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - task generate
    - git diff --exit-code

tests:unit:
  extends:
    - .test
  script:
    - task tests:unit -- ${GOTEST_EXTRA_ARGS}

tests:integration:
  extends:
    - .test
  variables:
    BANTERBUS_REDIS_HOST: docker
    BANTERBUS_REDIS_PORT: 6379
    BANTERBUS_DB_HOST: docker
    BANTERBUS_DB_PORT: 5432
    BANTERBUS_DB_USER: postgres
    BANTERBUS_DB_PASSWORD: postgres
    BANTERBUS_DB_NAME: postgres
  script:
    - docker compose --profile test up -d --wait
    - task tests:integration -- ${GOTEST_EXTRA_ARGS}
  after_script:
    - docker ps

test:e2e:
  extends:
    - .test
  variables:
    BANTERBUS_LOG_LEVEL: INFO
    BANTERBUS_ENVIRONMENT: ci-test
    BANTERBUS_REDIS_ADDRESS: docker:6379
    BANTERBUS_DB_HOST: docker
    BANTERBUS_DB_PORT: 5432
    BANTERBUS_DB_USERNAME: postgres
    BANTERBUS_DB_PASSWORD: postgres
    BANTERBUS_DB_NAME: banterbus
    BANTERBUS_JWKS_URL: http://docker:9091/default/jwks
    BANTERBUS_PLAYWRIGHT_HEADLESS: true
    GOCOVERDIR: $CI_PROJECT_DIR/coverage/e2e
    SHOW_VOTING_SCREEN_FOR: 10s
    RUN_WITH_COVERAGE: true
    BANTERBUS_PORT: 8080
    BANTERBUS_HOST: 0.0.0.0
    OTEL_EXPORTER_OTLP_ENDPOINT: https://otel-collector.haseebmajid.dev
    OTEL_SERVICE_NAME: banterbus
    OTEL_SERVICE_VERSION: $CI_COMMIT_SHA
    OTEL_RESOURCE_ATTRIBUTES: deployment.environment=ci,service.namespace=e2e-tests,ci.job_id=$CI_JOB_ID,ci.pipeline_id=$CI_PIPELINE_ID,ci.commit_sha=$CI_COMMIT_SHA,ci.merge_request_iid=$CI_MERGE_REQUEST_IID
  script:
    - docker compose --profile test up -d --wait
    - task tests:e2e -- ${GOTEST_EXTRA_ARGS}
  artifacts:
    when: always
    reports:
      junit: report.xml
    paths:
      - coverage
      - tests/e2e/videos/*
      - tests/e2e/*.png

combine:coverage:
  stage: build
  extends:
    - .task
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - task coverage
    - gocover-cobertura < coverage/combined.out > coverage.xml || touch coverage.xml
  coverage: /total:\s+\(statements\)\s+\d+.\d+%/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage/

publish:docker:dev:
  stage: build
  extends:
    - .docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - task docker:build
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker tag banterbus:latest $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_IID
    - docker push $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_IID
    - echo "$CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_IID" > image_name.txt
  artifacts:
    paths:
      - image_name.txt

# smoke:tests:dev:e2e:
#   extends:
#     - .test
#   stage: post
#   variables:
#     BANTERBUS_PLAYWRIGHT_URL: https://dev.banterbus.games
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#   script:
#    - task tests:e2e -- -v -run 'TestE2ERound/Should_successfully_complete_an_entire_game_where_the_fibber_is_caught_first_time'
#   artifacts:
#     when: always
#     paths:
#       - coverage
#       - tests/e2e/videos/*
#       - tests/e2e/*.png
#   dependencies:
#     - check_deploy:dev

get:mr:iid:
  image: $BANTERBUS_CI_IMAGE
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG
  script:
    - |
      # Fetch merged MRs associated with this commit
      RESPONSE=$(curl -sS \
        --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
        -w "\n%{http_code}" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA/merge_requests?state=merged")

      HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
      BODY=$(echo "$RESPONSE" | head -n -1)

      if [ "$HTTP_STATUS" != "200" ]; then
        echo "ERROR: API request failed with status $HTTP_STATUS"
        echo "Response body:"
        echo "$BODY"
        exit 1
      fi

      # Extract most recent MR IID
      MR_IID=$(echo "$BODY" | jq -r 'sort_by(.merged_at) | last | .iid // empty')

      if [ -n "$MR_IID" ]; then
        echo "Detected MR IID: $MR_IID"
        echo "MR_IID=$MR_IID" >> build.env
      else
        echo "No merged MR found for commit $CI_COMMIT_SHA"
        exit 1
      fi
  artifacts:
    reports:
      dotenv: build.env

deploy:prod:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  needs: ["get:mr:iid"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
  environment:
    name: production
  before_script:
    - export IMAGE="$CI_REGISTRY_IMAGE:prod-$CI_COMMIT_SHA-$(date +%s)"
    - echo $IMAGE > image_name.txt
  script:
    - echo "Pulling MR image $CI_REGISTRY_IMAGE:$MR_IID"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker pull $CI_REGISTRY_IMAGE:$MR_IID
    - echo "Tagging as production image $IMAGE"
    - docker tag $CI_REGISTRY_IMAGE:$MR_IID $IMAGE
    - echo "Pushing production image to registry"
    - docker push $IMAGE
    - echo "Production image $IMAGE"
  artifacts:
    paths:
      - image_name.txt

release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  extends:
    - .task
  variables:
    GIT_DEPTH: 0
  script:
    - task release

# TODO: fix smoke tests
# smoke:tests:prod:e2e:
#   extends:
#     - .test
#   stage: post
#   variables:
#     BANTERBUS_PLAYWRIGHT_URL: https://banterbus.games
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"
#       when: always
#     - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
#   script:
#    - task tests:e2e -- -v -run 'TestE2ERound/Should_successfully_complete_an_entire_game_where_the_fibber_is_caught_first_time'
#   after_script:
#     - |
#       if [ "$CI_JOB_STATUS" != "success" ]; then
#         curl -X POST \
#             -H "Authorization: Bearer $NOTIFY_TOKEN" "https://notify.homelab.haseebmajid.dev/message" \
#             -F "title=Job Failed" \
#             -F "message=The smoke:tests:e2e job has failed in the pipeline. Job URL: $CI_JOB_URL"
#       fi
#   artifacts:
#     when: always
#     paths:
#       - coverage
#       - tests/e2e/videos/*
#       - tests/e2e/*.png
#   dependencies:
#     - check_deploy:prod
