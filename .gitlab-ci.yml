image: nixos/nix

workflow:
  auto_cancel:
    on_new_commit: interruptible

default:
  interruptible: true

variables:
  IMAGE_TAG: 0.1.0
  BANTERBUS_CI_IMAGE: $CI_REGISTRY_IMAGE/ci:$IMAGE_TAG

stages:
  - pre
  - deps
  - test
  - build
  - release

.task:
  stage: test
  image:
    name: $BANTERBUS_CI_IMAGE
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  cache:
    paths:
      - ${GOPATH}/pkg/mod
    policy: pull
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - task build:dev

.test:
  coverage: /total:\s+\(statements\)\s+\d+.\d+%/
  variables:
     GOTESTSUM_JUNITFILE: "report.xml"
     XDG_DATA_HOME: "/tmp/"
     GOTEST_EXTRA_ARGS: "-coverprofile=coverage.txt"
  after_script:
    - task coverage
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

publish:docker:ci:
  stage: pre
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMAGE: $CI_REGISTRY_IMAGE/ci
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "containers/ci.nix"
  services:
    - docker:25-dind
  script:
    - echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
    - nix-env -iA nixpkgs.docker
    - nix build .#container-ci
    - docker load < ./result
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # INFO: Check if the image tag already exists, until immutable tags are ready.
    - |
      if docker pull $IMAGE:$IMAGE_TAG; then
        echo "Image with tag $IMAGE_TAG already exists. Failing the pipeline."
        exit 1
      fi
    - docker image tag banterbus-dev:latest $IMAGE:latest
    - docker image tag banterbus-dev:latest $IMAGE:$IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE/ci:latest
    - docker push $IMAGE:$IMAGE_TAG


download:dependency:
  extends: .task
  stage: deps
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      # INFO: until cache works with custom runner
      changes:
        - go.mod
        - go.sum
  script:
    - go mod download
  cache:
    policy: pull-push

lint:
  extends:
    - .task
  script:
    - task lint

format:
  extends:
    - .task
  script:
    -  task format

generate:sqlc:
  extends:
    - .task
  script:
    - task generate:sqlc
    - git diff --exit-code

tests:unit:
  extends:
    - .task
    - .test
  script:
    - task tests:unit -- ${GOTEST_EXTRA_ARGS}

tests:integration:
  extends:
    - .task
    - .test
  script:
    - task tests:integration -- ${GOTEST_EXTRA_ARGS}

test:e2e:
  extends:
    - .task
    - .test
  script:
    - go run github.com/playwright-community/playwright-go/cmd/playwright@latest install --with-deps || true
    - task tests:e2e -- ${GOTEST_EXTRA_ARGS}
  allow_failure: true
  artifacts:
    when: always
    paths:
      - tests/e2e/videos/*

#TODO: tag image using dev SHA
publish:dev:docker:
  stage: build
  needs: []
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  services:
    - docker:25-dind
  script:
    - echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
    - nix-env -iA nixpkgs.docker
    - nix develop -c task build:dev
    - nix build .#container
    - docker load < ./result
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker image tag banterbus:latest $CI_REGISTRY_IMAGE:dev
    - docker push $CI_REGISTRY_IMAGE:dev

#TODO: promote image from dev to prod
#TODO: tag image using prod SHA
publish:prod:docker:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  needs: []
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:25-dind
  script:
    - echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
    - nix-env -iA nixpkgs.docker
    - nix develop -c task build:dev
    - nix build .#container
    - nix develop -c task docker:publish

release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  extends:
    - .task
  variables:
    GIT_DEPTH: 0
  script:
    - task release

